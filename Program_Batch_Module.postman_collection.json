{
	"info": {
		"_postman_id": "9b628651-0533-47e3-8aa0-4b195017ed2d",
		"name": "Program_Batch_Module",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28160329",
		"_collection_link": "https://dark-desert-138608.postman.co/workspace/Postman-Hackathon-June2023-%3A%2B1%3A~75bf3eff-9272-4023-8ada-ff5931da7a35/collection/28160329-9b628651-0533-47e3-8aa0-4b195017ed2d?action=share&creator=28160329&source=collection_link"
	},
	"item": [
		{
			"name": "GET Batch",
			"item": [
				{
					"name": "GET ALL Batches",
					"item": [
						{
							"name": "Program_Batch_TC_001_Valid_Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate Response body\r",
											"    pm.test(\"Validate Response body\", function() {\r",
											"         \r",
											"        pm.expect(jsonResponse.batchId, pm.environment.get(\"batchId\"));\r",
											"        pm.expect(jsonResponse.batchName,pm.environment.get(\"batchName\"));\r",
											"        pm.expect(jsonResponse.batchStatus,pm.environment.get(\"batchStatus\"));\r",
											"        pm.expect(jsonResponse.batchDescription, pm.environment.get(\"batchDescription\"));\r",
											"        pm.expect(jsonResponse.batchNoOfClasses, pm.environment.get(\"batchNoOfClasses\"));\r",
											"        pm.expect(jsonResponse.programId, pm.environment.get(\"programId\"));\r",
											"        pm.expect(jsonResponse.programName,pm.environment.get(\"programName\"));\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =  \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"batchName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchNoOfClasses\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"batchName\",\r",
											"    \"batchDescription\",\r",
											"    \"batchStatus\",\r",
											"    \"batchNoOfClasses\",\r",
											"    \"programId\",\r",
											"    \"programName\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse[0],schema)).to.be.true\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/{{getAllBatches}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{getAllBatches}}"
									]
								}
							},
							"response": [
								{
									"name": "Program_Batch_TC_001_Valid_Endpoint",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/{{getAllBatches}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"{{getAllBatches}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Sun, 25 Jun 2023 11:23:40 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "[\n    {\n        \"batchId\": 128,\n        \"batchName\": \"1\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"string\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 53,\n        \"batchName\": \"101\",\n        \"batchDescription\": \"SQL BATCH 198\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 87,\n        \"batchName\": \"105\",\n        \"batchDescription\": \"SQL BATCH 199\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 138,\n        \"batchName\": \"108\",\n        \"batchDescription\": \"SQL\\ufffdBATCH\\ufffd199\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 139,\n        \"batchName\": \"109\",\n        \"batchDescription\": \"SQL\\ufffdBATCH\\ufffd200\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 140,\n        \"batchName\": \"110\",\n        \"batchDescription\": \"Selenium Batch 100\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 141,\n        \"batchName\": \"111\",\n        \"batchDescription\": \"SQL\\ufffdBATCH\\ufffd199\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 142,\n        \"batchName\": \"112\",\n        \"batchDescription\": \"SQL\\ufffdBATCH\\ufffd200\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 143,\n        \"batchName\": \"113\",\n        \"batchDescription\": \"Selenium Batch 100\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 146,\n        \"batchName\": \"114\",\n        \"batchDescription\": \"SQL\\ufffdBATCH\\ufffd199\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 147,\n        \"batchName\": \"115\",\n        \"batchDescription\": \"SQL\\ufffdBATCH\\ufffd200\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 148,\n        \"batchName\": \"116\",\n        \"batchDescription\": \"Selenium Batch 100\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 480,\n        \"batchName\": \"123\",\n        \"batchDescription\": \"Test Batch description\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 24,\n        \"programName\": \"APITesting7\"\n    },\n    {\n        \"batchId\": 772,\n        \"batchName\": \"125\",\n        \"batchDescription\": \"DA Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 1035,\n        \"programName\": \"Jun23-API Warriers-DA-Team9\"\n    },\n    {\n        \"batchId\": 330,\n        \"batchName\": \"4\",\n        \"batchDescription\": \"Test001\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 1367,\n        \"programName\": \"something003\"\n    },\n    {\n        \"batchId\": 149,\n        \"batchName\": \"52\",\n        \"batchDescription\": \"Selenium\",\n        \"batchStatus\": \"Not Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 661,\n        \"programName\": \"Sdet2\"\n    },\n    {\n        \"batchId\": 355,\n        \"batchName\": \"7\",\n        \"batchDescription\": \"Test001\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 1566,\n        \"programName\": \"something004\"\n    },\n    {\n        \"batchId\": 303,\n        \"batchName\": \"--750\",\n        \"batchDescription\": \"Batch SDET01 under program\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 1350,\n        \"programName\": \"UpdatedJun23-PostmanAcers-SDET-750\"\n    },\n    {\n        \"batchId\": 119,\n        \"batchName\": \"999\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"999\",\n        \"batchNoOfClasses\": 9,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 869,\n        \"batchName\": \"Adolph\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 842,\n        \"batchName\": \"Alia\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 843,\n        \"batchName\": \"Amaya\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 845,\n        \"batchName\": \"Andrew\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 206,\n        \"batchName\": \"API Hackathon\",\n        \"batchDescription\": null,\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 204,\n        \"batchName\": \"API Hackathon\",\n        \"batchDescription\": null,\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 205,\n        \"batchName\": \"API Hackathon\",\n        \"batchDescription\": null,\n        \"batchStatus\": \"string\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 209,\n        \"batchName\": \"API Hackathon1\",\n        \"batchDescription\": null,\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 38,\n        \"batchName\": \"API HACKATHON 2024\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"PASS\",\n        \"batchNoOfClasses\": 15,\n        \"programId\": 101,\n        \"programName\": \"Jun23-Hackers@API-Postman-05\"\n    },\n    {\n        \"batchId\": 99,\n        \"batchName\": \"API HACKATHON 2025\",\n        \"batchDescription\": \"API testing\",\n        \"batchStatus\": \"PASS\",\n        \"batchNoOfClasses\": 15,\n        \"programId\": 101,\n        \"programName\": \"Jun23-Hackers@API-Postman-05\"\n    },\n    {\n        \"batchId\": 197,\n        \"batchName\": \"asd \",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"string\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 49,\n        \"batchName\": \"batch-*****\",\n        \"batchDescription\": \"batch-*****\",\n        \"batchStatus\": \"batch-status2\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 54,\n        \"batchName\": \"Batch01\",\n        \"batchDescription\": \"API01\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 23,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 56,\n        \"batchName\": \"Batch02\",\n        \"batchDescription\": \"API1\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 223,\n        \"programName\": \" Jun23-PostmanPioneers-SDET-055 \"\n    },\n    {\n        \"batchId\": 55,\n        \"batchName\": \"Batch02\",\n        \"batchDescription\": \"API1\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 22,\n        \"programName\": \"Jun23-Postman Ninjas-SDET-NaN\"\n    },\n    {\n        \"batchId\": 353,\n        \"batchName\": \"batch1\",\n        \"batchDescription\": \"senior\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 100,\n        \"batchName\": \"{{BatchName}}\",\n        \"batchDescription\": \"fourth_batch\",\n        \"batchStatus\": \"pass\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 507,\n        \"batchName\": \"{{batchNameFormatted}}\",\n        \"batchDescription\": \"Selenium ,java,postman\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 527,\n        \"programId\": 1782,\n        \"programName\": \"Jun23-Postman Poineers-SDET-813\"\n    },\n    {\n        \"batchId\": 482,\n        \"batchName\": \"{{batchNameFormatted}}\",\n        \"batchDescription\": \"Selenium ,java,postman\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 337,\n        \"programId\": 1765,\n        \"programName\": \"Jun23-Postman Poineers-SDET-950\"\n    },\n    {\n        \"batchId\": 493,\n        \"batchName\": \"{{batchNameFormatted}}\",\n        \"batchDescription\": \"Selenium ,java,postman\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 302,\n        \"programId\": 1781,\n        \"programName\": \"Jun23-Postman Poineers-SDET-837\"\n    },\n    {\n        \"batchId\": 475,\n        \"batchName\": \"{{batchNameFormatted}}\",\n        \"batchDescription\": \"Selenium ,java,postman\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 70,\n        \"programId\": 1743,\n        \"programName\": \"Jun23-Postman Poineers-SDET-824\"\n    },\n    {\n        \"batchId\": 490,\n        \"batchName\": \"{{batchNameFormatted}}\",\n        \"batchDescription\": \"Selenium ,java,postman\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 174,\n        \"programId\": 1780,\n        \"programName\": \"Jun23-Postman Poineers-SDET-683\"\n    },\n    {\n        \"batchId\": 489,\n        \"batchName\": \"{{batchNameFormatted}}\",\n        \"batchDescription\": \"Selenium ,java,postman\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 76,\n        \"programId\": 1779,\n        \"programName\": \"Jun23-Postman Poineers-SDET-891\"\n    },\n    {\n        \"batchId\": 461,\n        \"batchName\": \"{{batchNameFormatted}}\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"string\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 1728,\n        \"programName\": \"Jun23-Postman Poineers-SDET-280\"\n    },\n    {\n        \"batchId\": 464,\n        \"batchName\": \"{{batchNameFormatted}}\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"string\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1735,\n        \"programName\": \"Jun23-Postman Poineers-SDET-388\"\n    },\n    {\n        \"batchId\": 50,\n        \"batchName\": \"batchNew\",\n        \"batchDescription\": \"batchNew\",\n        \"batchStatus\": \"batch-status2\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 52,\n        \"batchName\": \"batchNew2\",\n        \"batchDescription\": \"batchNew\",\n        \"batchStatus\": \"batch-status2\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 57,\n        \"batchName\": \"batchNewest\",\n        \"batchDescription\": \"batchNewest\",\n        \"batchStatus\": \"batch-status2\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 200,\n        \"programName\": \"Learn API\"\n    },\n    {\n        \"batchId\": 102,\n        \"batchName\": \"Batchupdate\",\n        \"batchDescription\": \"API4\",\n        \"batchStatus\": \"Active state\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 223,\n        \"programName\": \" Jun23-PostmanPioneers-SDET-055 \"\n    },\n    {\n        \"batchId\": 856,\n        \"batchName\": \"Bradley\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 850,\n        \"batchName\": \"Cara\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 221,\n        \"batchName\": \"CHECKING\",\n        \"batchDescription\": \"API-41\",\n        \"batchStatus\": \"ACTIVE\",\n        \"batchNoOfClasses\": 67,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 617,\n        \"batchName\": \"Clotilde\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 286,\n        \"batchName\": \"da\",\n        \"batchDescription\": \"nothing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 13,\n        \"programId\": 888,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-123\"\n    },\n    {\n        \"batchId\": 289,\n        \"batchName\": \"da\",\n        \"batchDescription\": \"nothing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 13,\n        \"programId\": 644,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-94197978\"\n    },\n    {\n        \"batchId\": 226,\n        \"batchName\": \"DA\",\n        \"batchDescription\": \"Data Analyst\",\n        \"batchStatus\": \"Running\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 284,\n        \"batchName\": \"DA\",\n        \"batchDescription\": \"DA Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 327,\n        \"batchName\": \"Ds\",\n        \"batchDescription\": \"Data Scientist\",\n        \"batchStatus\": \"Running\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 329,\n        \"batchName\": \"DS\",\n        \"batchDescription\": \"Data Science\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 22,\n        \"programId\": 111,\n        \"programName\": \"Jun23-Hackers@API-Postman-102\"\n    },\n    {\n        \"batchId\": 870,\n        \"batchName\": \"Haley\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 391,\n        \"batchName\": \"HugsForBugs\",\n        \"batchDescription\": \"BATCH19\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 846,\n        \"batchName\": \"Jon\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 744,\n        \"batchName\": \"Jun23-\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 311,\n        \"batchName\": \"Jun23-APIc Scripters-DA-25-006\",\n        \"batchDescription\": \"Learn Analysis\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 23,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 314,\n        \"batchName\": \"Jun23-APIc Scripters-DA-27-008\",\n        \"batchDescription\": \"Learn Analysis\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 1362,\n        \"programName\": \"Jun23-APIc Scripters-SDET5DA1-388\"\n    },\n    {\n        \"batchId\": 324,\n        \"batchName\": \"Jun23-APIc Scripters-DA-29-010\",\n        \"batchDescription\": \"Learn Analysis\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 1362,\n        \"programName\": \"Jun23-APIc Scripters-SDET5DA1-388\"\n    },\n    {\n        \"batchId\": 310,\n        \"batchName\": \"Jun23-APIc Scripters-SDET-24-005\",\n        \"batchDescription\": \"Learn Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 313,\n        \"batchName\": \"Jun23-APIc Scripters-SDET-26-007\",\n        \"batchDescription\": \"Learn Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 1362,\n        \"programName\": \"Jun23-APIc Scripters-SDET5DA1-388\"\n    },\n    {\n        \"batchId\": 323,\n        \"batchName\": \"Jun23-APIc Scripters-SDET-28-009\",\n        \"batchDescription\": \"Learn Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 1362,\n        \"programName\": \"Jun23-APIc Scripters-SDET5DA1-388\"\n    },\n    {\n        \"batchId\": 328,\n        \"batchName\": \"Jun23-APIc Scripters-SDET-30-011\",\n        \"batchDescription\": \"Learn Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 1362,\n        \"programName\": \"Jun23-APIc Scripters-SDET5DA1-388\"\n    },\n    {\n        \"batchId\": 616,\n        \"batchName\": \"Jun23-ApiExpliorers-SDET-205\",\n        \"batchDescription\": \"PostmanApi\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 22,\n        \"programName\": \"Jun23-Postman Ninjas-SDET-NaN\"\n    },\n    {\n        \"batchId\": 626,\n        \"batchName\": \"Jun23-ApiExplorers-SDET-205\",\n        \"batchDescription\": \"PostmanApi\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 8,\n        \"programId\": 23,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 619,\n        \"batchName\": \"Jun23-ApiExplorers-SDET-205\",\n        \"batchDescription\": \"PostmanApi\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 22,\n        \"programName\": \"Jun23-Postman Ninjas-SDET-NaN\"\n    },\n    {\n        \"batchId\": 383,\n        \"batchName\": \"Jun23-Api Explorers-sdetpostman-01\",\n        \"batchDescription\": \"Api Testing using Postman\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 243,\n        \"programId\": 101,\n        \"programName\": \"Jun23-Hackers@API-Postman-05\"\n    },\n    {\n        \"batchId\": 384,\n        \"batchName\": \"Jun23-Api Explorers-sdetpostman-01\",\n        \"batchDescription\": \"Api Testing using Postman\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 243,\n        \"programId\": 103,\n        \"programName\": \"Jun23-Hackers@API-Postman-07\"\n    },\n    {\n        \"batchId\": 756,\n        \"batchName\": \"Jun23-API-hackathon-SDET103-207\",\n        \"batchDescription\": \"Giving Marvelous SDET training at Numpy\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 2173,\n        \"programName\": \"Jun23-API Tracker-SDET-805\"\n    },\n    {\n        \"batchId\": 732,\n        \"batchName\": \"Jun23-API-hackathon-SDET103-497\",\n        \"batchDescription\": \"Giving Marvelous SDET traing at Numpy\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 2173,\n        \"programName\": \"Jun23-API Tracker-SDET-805\"\n    },\n    {\n        \"batchId\": 733,\n        \"batchName\": \"Jun23-API-hackathon-SDET103-618\",\n        \"batchDescription\": \"Giving Marvelous SDET traing at Numpy\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 2173,\n        \"programName\": \"Jun23-API Tracker-SDET-805\"\n    },\n    {\n        \"batchId\": 743,\n        \"batchName\": \"Jun23-API-hackathon-SDET103-806\",\n        \"batchDescription\": \"Giving Marvelous SDET traing at Numpy\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 2173,\n        \"programName\": \"Jun23-API Tracker-SDET-805\"\n    },\n    {\n        \"batchId\": 242,\n        \"batchName\": \"Jun23-API Hackers-DA-Team07-00762544\",\n        \"batchDescription\": \"Tableau62544\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 8,\n        \"programId\": 29,\n        \"programName\": \"{{programName}}\"\n    },\n    {\n        \"batchId\": 245,\n        \"batchName\": \"Jun23-API Hackers-DA-Team07-00762789\",\n        \"batchDescription\": \"Tableau62789\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 8,\n        \"programId\": 29,\n        \"programName\": \"{{programName}}\"\n    },\n    {\n        \"batchId\": 386,\n        \"batchName\": \"Jun23-API Hackers-DA-Team07-00769309\",\n        \"batchDescription\": \"Tableau69309\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 8,\n        \"programId\": 29,\n        \"programName\": \"{{programName}}\"\n    },\n    {\n        \"batchId\": 253,\n        \"batchName\": \"Jun23-API Hackers-DA-Team07-00784548\",\n        \"batchDescription\": \"Tableau84548\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 8,\n        \"programId\": 29,\n        \"programName\": \"{{programName}}\"\n    },\n    {\n        \"batchId\": 792,\n        \"batchName\": \"Jun23-API Hackers-DA-Team07-007-PUT update490\",\n        \"batchDescription\": \"Tableau-PUT update\",\n        \"batchStatus\": \"4\",\n        \"batchNoOfClasses\": 8,\n        \"programId\": 29,\n        \"programName\": \"{{programName}}\"\n    },\n    {\n        \"batchId\": 784,\n        \"batchName\": \"Jun23-API Hackers-DA-Team07-007-PUT update9698\",\n        \"batchDescription\": \"Tableau-PUT update\",\n        \"batchStatus\": \"4\",\n        \"batchNoOfClasses\": 8,\n        \"programId\": 29,\n        \"programName\": \"{{programName}}\"\n    },\n    {\n        \"batchId\": 241,\n        \"batchName\": \"Jun23-API Hackers-SDET-Team07-00711864\",\n        \"batchDescription\": \"java programming11864\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 717,\n        \"programName\": \"{{programName}}\"\n    },\n    {\n        \"batchId\": 252,\n        \"batchName\": \"Jun23-API Hackers-SDET-Team07-00713063\",\n        \"batchDescription\": \"java programming13063\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 717,\n        \"programName\": \"{{programName}}\"\n    },\n    {\n        \"batchId\": 385,\n        \"batchName\": \"Jun23-API Hackers-SDET-Team07-00714364\",\n        \"batchDescription\": \"java programming14364\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 717,\n        \"programName\": \"{{programName}}\"\n    },\n    {\n        \"batchId\": 244,\n        \"batchName\": \"Jun23-API Hackers-SDET-Team07-00722659\",\n        \"batchDescription\": \"java programming22659\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 717,\n        \"programName\": \"{{programName}}\"\n    },\n    {\n        \"batchId\": 240,\n        \"batchName\": \"Jun23-API Hackers-SDET-Team07-00725879\",\n        \"batchDescription\": \"java programming25879\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 717,\n        \"programName\": \"{{programName}}\"\n    },\n    {\n        \"batchId\": 239,\n        \"batchName\": \"Jun23-API Hackers-SDET-Team07-00783952\",\n        \"batchDescription\": \"java programming83952\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 717,\n        \"programName\": \"{{programName}}\"\n    },\n    {\n        \"batchId\": 782,\n        \"batchName\": \"Jun23-API Hackers-SDET-Team07-007-PUT update4332\",\n        \"batchDescription\": \"java programming-PUT update\",\n        \"batchStatus\": \"4\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 717,\n        \"programName\": \"{{programName}}\"\n    },\n    {\n        \"batchId\": 790,\n        \"batchName\": \"Jun23-API Hackers-SDET-Team07-007-PUT update7607\",\n        \"batchDescription\": \"java programming-PUT update\",\n        \"batchStatus\": \"4\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 717,\n        \"programName\": \"{{programName}}\"\n    },\n    {\n        \"batchId\": 387,\n        \"batchName\": \"Jun23-API Hackers-SF-Team07-0073054\",\n        \"batchDescription\": \"Salesforce3054\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 738,\n        \"programName\": \"Jun23-PostmanNinjas-SDET-511\"\n    },\n    {\n        \"batchId\": 243,\n        \"batchName\": \"Jun23-API Hackers-SF-Team07-00793384\",\n        \"batchDescription\": \"Salesforce93384\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 738,\n        \"programName\": \"Jun23-PostmanNinjas-SDET-511\"\n    },\n    {\n        \"batchId\": 786,\n        \"batchName\": \"Jun23-API Hackers-SF-Team07-007-PUT update132\",\n        \"batchDescription\": \"Salesforce-PUT update\",\n        \"batchStatus\": \"4\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 738,\n        \"programName\": \"Jun23-PostmanNinjas-SDET-511\"\n    },\n    {\n        \"batchId\": 794,\n        \"batchName\": \"Jun23-API Hackers-SF-Team07-007-PUT update3708\",\n        \"batchDescription\": \"Salesforce-PUT update\",\n        \"batchStatus\": \"4\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 738,\n        \"programName\": \"Jun23-PostmanNinjas-SDET-511\"\n    },\n    {\n        \"batchId\": 295,\n        \"batchName\": \"Jun23-ApiPixies--SDET-001\",\n        \"batchDescription\": \"Automation Testing Batch\",\n        \"batchStatus\": \"Ongoing\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 296,\n        \"batchName\": \"Jun23-ApiPixies-SDET-001\",\n        \"batchDescription\": \"Automation Testing Batch\",\n        \"batchStatus\": \"Ongoing\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 307,\n        \"batchName\": \"Jun23-ApiPixies-SDET-002\",\n        \"batchDescription\": \"Automation Testing Batch\",\n        \"batchStatus\": \"Ongoing\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 30,\n        \"batchName\": \"Jun23-API_PIXIES-SDET-SDET94-002\",\n        \"batchDescription\": \"batchstringg\",\n        \"batchStatus\": \"string\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 835,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-158\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 834,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-168\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 233,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-269\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 828,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-282\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 837,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-303\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 853,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-440\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 833,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-489\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 836,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-496\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 838,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-53\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 232,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-619\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 831,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-662\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 234,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-723\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 830,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-791\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 855,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-906\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 829,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-961\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 854,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-98\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 840,\n        \"batchName\": \"Jun23-ApiSloggers-sql1-149\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 523,\n        \"batchName\": \"Jun23-API Warriers-DA-DA001-605\",\n        \"batchDescription\": \"DA Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 1035,\n        \"programName\": \"Jun23-API Warriers-DA-Team9\"\n    },\n    {\n        \"batchId\": 518,\n        \"batchName\": \"Jun23-API Warriers-DA-DA01-226\",\n        \"batchDescription\": \"DA classes New Batches\",\n        \"batchStatus\": \"Inactive\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1035,\n        \"programName\": \"Jun23-API Warriers-DA-Team9\"\n    },\n    {\n        \"batchId\": 530,\n        \"batchName\": \"Jun23-API Warriers-ManualTesting-MT001-846\",\n        \"batchDescription\": \"Manual Testing Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 25,\n        \"programId\": 1042,\n        \"programName\": \"Jun23-API Warriers-Manual Testing-Team9\"\n    },\n    {\n        \"batchId\": 531,\n        \"batchName\": \"Jun23-API Warriers-ManualTesting-MT001-914\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 18,\n        \"programId\": 1037,\n        \"programName\": \"Jun23-API Warriers-SMPO-Team9\"\n    },\n    {\n        \"batchId\": 529,\n        \"batchName\": \"Jun23-API Warriers-SA-SA001-280\",\n        \"batchDescription\": \"Salesforce Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 30,\n        \"programId\": 1036,\n        \"programName\": \"Jun23-API Warriers-SalesForce-Team9\"\n    },\n    {\n        \"batchId\": 528,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET001-14\",\n        \"batchDescription\": \"SDET Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 15,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 409,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-114\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1035,\n        \"programName\": \"Jun23-API Warriers-DA-Team9\"\n    },\n    {\n        \"batchId\": 491,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-129\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 471,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-148\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 503,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-181\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1037,\n        \"programName\": \"Jun23-API Warriers-SMPO-Team9\"\n    },\n    {\n        \"batchId\": 504,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-196\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 509,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-216\",\n        \"batchDescription\": \"Salesforce Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1036,\n        \"programName\": \"Jun23-API Warriers-SalesForce-Team9\"\n    },\n    {\n        \"batchId\": 512,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-26\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 492,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-27\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 468,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-270\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 419,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-276\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1035,\n        \"programName\": \"Jun23-API Warriers-DA-Team9\"\n    },\n    {\n        \"batchId\": 470,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-386\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 455,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-402\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 438,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-467\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 469,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-487\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 405,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-516\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1037,\n        \"programName\": \"Jun23-API Warriers-SMPO-Team9\"\n    },\n    {\n        \"batchId\": 426,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-529\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1036,\n        \"programName\": \"Jun23-API Warriers-SalesForce-Team9\"\n    },\n    {\n        \"batchId\": 408,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-575\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1037,\n        \"programName\": \"Jun23-API Warriers-SMPO-Team9\"\n    },\n    {\n        \"batchId\": 505,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-615\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1037,\n        \"programName\": \"Jun23-API Warriers-SMPO-Team9\"\n    },\n    {\n        \"batchId\": 513,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-633\",\n        \"batchDescription\": \"DA Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1035,\n        \"programName\": \"Jun23-API Warriers-DA-Team9\"\n    },\n    {\n        \"batchId\": 511,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-640\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1066,\n        \"programName\": \"Jun23-SparkPlugs-SDET-362 \"\n    },\n    {\n        \"batchId\": 497,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-649\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 510,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-665\",\n        \"batchDescription\": \"Manual Testing Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1042,\n        \"programName\": \"Jun23-API Warriers-Manual Testing-Team9\"\n    },\n    {\n        \"batchId\": 334,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-69\",\n        \"batchDescription\": \"sdet classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 394,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-746\",\n        \"batchDescription\": \"Not SDET\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1037,\n        \"programName\": \"Jun23-API Warriers-SMPO-Team9\"\n    },\n    {\n        \"batchId\": 460,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-770\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 494,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-815\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 454,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-825\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 448,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-827\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 433,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-874\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 335,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-909\",\n        \"batchDescription\": \"sdet classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 457,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-912\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 447,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-928\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 508,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-971\",\n        \"batchDescription\": \"SDET Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 406,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-993\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1037,\n        \"programName\": \"Jun23-API Warriers-SMPO-Team9\"\n    },\n    {\n        \"batchId\": 627,\n        \"batchName\": \"Jun23-API Warriers-SMPO-SMPO001-174\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 18,\n        \"programId\": 1037,\n        \"programName\": \"Jun23-API Warriers-SMPO-Team9\"\n    },\n    {\n        \"batchId\": 532,\n        \"batchName\": \"Jun23-API Warriers-SMPO-SMPO001-181\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 18,\n        \"programId\": 1037,\n        \"programName\": \"Jun23-API Warriers-SMPO-Team9\"\n    },\n    {\n        \"batchId\": 809,\n        \"batchName\": \"Jun23-API Warriers-SMPO-SMPO001-46\",\n        \"batchDescription\": \" \",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 1035,\n        \"programName\": \"Jun23-API Warriers-DA-Team9\"\n    },\n    {\n        \"batchId\": 648,\n        \"batchName\": \"Jun23-API Warriers-SMPO-SMPO001-468\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 18,\n        \"programId\": 1037,\n        \"programName\": \"Jun23-API Warriers-SMPO-Team9\"\n    },\n    {\n        \"batchId\": 687,\n        \"batchName\": \"Jun23-API Warriers-SMPO-SMPO001-542\",\n        \"batchDescription\": \"SDET Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 15,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 630,\n        \"batchName\": \"Jun23-API Warriers-SMPO-SMPO001-64\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 18,\n        \"programId\": 1037,\n        \"programName\": \"Jun23-API Warriers-SMPO-Team9\"\n    },\n    {\n        \"batchId\": 727,\n        \"batchName\": \"Jun23-API Warriers-SMPO-SMPO001-662\",\n        \"batchDescription\": \"DA Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 1035,\n        \"programName\": \"Jun23-API Warriers-DA-Team9\"\n    },\n    {\n        \"batchId\": 789,\n        \"batchName\": \"Jun23-API Warriers-SMPO-SMPO001-750\",\n        \"batchDescription\": \"DA Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 67,\n        \"programId\": 1035,\n        \"programName\": \"Jun23-API Warriers-DA-Team9\"\n    },\n    {\n        \"batchId\": 538,\n        \"batchName\": \"Jun23-API Warriers-SMPO-SMPO001-751\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 18,\n        \"programId\": 1037,\n        \"programName\": \"Jun23-API Warriers-SMPO-Team9\"\n    },\n    {\n        \"batchId\": 773,\n        \"batchName\": \"Jun23-API Warriers-SMPO-SMPO001-800\",\n        \"batchDescription\": \"DA Classes\",\n        \"batchStatus\": \"123\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 1035,\n        \"programName\": \"Jun23-API Warriers-DA-Team9\"\n    },\n    {\n        \"batchId\": 632,\n        \"batchName\": \"Jun23-API Warriers-SMPO-SMPO001-838\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 18,\n        \"programId\": 1037,\n        \"programName\": \"Jun23-API Warriers-SMPO-Team9\"\n    },\n    {\n        \"batchId\": 633,\n        \"batchName\": \"Jun23-API Warriers-SMPO-SMPO001-942\",\n        \"batchDescription\": \"SDET Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 15,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 799,\n        \"batchName\": \"Jun23-API Warriers-SMPO-SMPO001-949\",\n        \"batchDescription\": null,\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 1035,\n        \"programName\": \"Jun23-API Warriers-DA-Team9\"\n    },\n    {\n        \"batchId\": 297,\n        \"batchName\": \"Jun23-EliteForce-DA-DA\",\n        \"batchDescription\": \"DA Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 1237,\n        \"programName\": \"Jun23-EliteForce-DA-001\"\n    },\n    {\n        \"batchId\": 304,\n        \"batchName\": \"Jun23-EliteForce-SDET-SDET\",\n        \"batchDescription\": \"SDET Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1352,\n        \"programName\": \"Jun23-EliteForce-SDET-001\"\n    },\n    {\n        \"batchId\": 565,\n        \"batchName\": \"Jun23-EliteForce-SDET-SDET655-655\",\n        \"batchDescription\": \"9zm3n2novy\",\n        \"batchStatus\": \"Ongoing\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 736,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-{{$}}\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 735,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-{{$random}}\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 734,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-{{$randomint}}\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 346,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-{{$randomint}}\",\n        \"batchDescription\": \"Sam\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 555,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-104\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 533,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-111\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 520,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-140\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 719,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-145\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 584,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-150\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 649,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-153\",\n        \"batchDescription\": \"Manual Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 868,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-28075770\"\n    },\n    {\n        \"batchId\": 699,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-167\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 825,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-187\",\n        \"batchDescription\": null,\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 752,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-190\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 527,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-196\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 688,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-197\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 677,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-199\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 600,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-2\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 536,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-206\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 681,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-21\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 625,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-212\",\n        \"batchDescription\": \"Manual Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 868,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-28075770\"\n    },\n    {\n        \"batchId\": 624,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-223\",\n        \"batchDescription\": \"Manual Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 868,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-28075770\"\n    },\n    {\n        \"batchId\": 613,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-228\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 748,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-231\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 541,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-233\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 594,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-235\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 602,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-24\",\n        \"batchDescription\": \"Junit testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 8,\n        \"programId\": 866,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 755,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-240\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 680,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-248\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 581,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-250\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 693,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-273\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 757,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-293\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"1\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 611,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-294\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 658,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-302\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 868,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-28075770\"\n    },\n    {\n        \"batchId\": 745,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-303\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 506,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-313\",\n        \"batchDescription\": \"\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 668,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-323\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 672,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-33\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 678,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-332\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 603,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-337\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 711,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-341\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 689,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-353\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 707,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-355\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 598,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-358\",\n        \"batchDescription\": \"Junit testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 8,\n        \"programId\": 866,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 599,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-367\",\n        \"batchDescription\": \"Soap UI testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 9,\n        \"programId\": 867,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-48299936\"\n    },\n    {\n        \"batchId\": 724,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-370\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 701,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-371\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 682,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-385\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 709,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-392\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 522,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-394\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 535,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-4\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 621,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-410\",\n        \"batchDescription\": \"Soap UI testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 9,\n        \"programId\": 867,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-48299936\"\n    },\n    {\n        \"batchId\": 545,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-416\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 706,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-417\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 501,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-424\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 614,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-43\",\n        \"batchDescription\": \"Soap UI testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 9,\n        \"programId\": 867,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-48299936\"\n    },\n    {\n        \"batchId\": 728,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-430\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 690,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-431\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 606,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-436\",\n        \"batchDescription\": \"Junit testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 8,\n        \"programId\": 866,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 499,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-444\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 578,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-445\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 746,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-445\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 657,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-467\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 868,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-28075770\"\n    },\n    {\n        \"batchId\": 749,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-473\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 675,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-479\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 601,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-486\",\n        \"batchDescription\": \"Manual Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 868,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-28075770\"\n    },\n    {\n        \"batchId\": 670,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-491\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 673,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-497\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 550,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-498\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 716,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-499\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 685,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-503\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 694,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-508\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 659,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-509\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 702,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-510\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 710,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-511\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 661,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-518\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 713,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-52\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 695,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-53\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 622,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-533\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 722,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-540\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 597,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-551\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 636,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-551\",\n        \"batchDescription\": \"Manual Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 868,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-28075770\"\n    },\n    {\n        \"batchId\": 666,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-553\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 546,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-561\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 663,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-571\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 496,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-577\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 679,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-582\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 676,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-583\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 595,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-588\",\n        \"batchDescription\": \"Junit testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 8,\n        \"programId\": 866,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 623,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-591\",\n        \"batchDescription\": \"Junit testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 8,\n        \"programId\": 866,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 686,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-593\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 660,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-606\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 747,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-608\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 592,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-610\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 867,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-48299936\"\n    },\n    {\n        \"batchId\": 726,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-616\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 750,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-628\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 586,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-629\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 721,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-648\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 495,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-651\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 604,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-652\",\n        \"batchDescription\": \"Soap UI testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 9,\n        \"programId\": 867,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-48299936\"\n    },\n    {\n        \"batchId\": 654,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-653\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 868,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-28075770\"\n    },\n    {\n        \"batchId\": 717,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-655\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 665,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-656\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 767,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-659\",\n        \"batchDescription\": \"\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 700,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-660\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 544,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-675\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 348,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-68\",\n        \"batchDescription\": \"Sam\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 534,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-681\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 669,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-684\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 583,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-690\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 514,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-693\",\n        \"batchDescription\": \"\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 615,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-698\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 588,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-716\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 753,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-72\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 667,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-736\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 524,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-746\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 696,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-76\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 715,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-760\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 664,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-768\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 662,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-779\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 684,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-784\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 612,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-786\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 543,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-787\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 607,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-79\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 723,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-797\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 585,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-799\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 683,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-80\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 653,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-802\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 868,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-28075770\"\n    },\n    {\n        \"batchId\": 620,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-803\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 609,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-814\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 714,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-825\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 519,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-825\",\n        \"batchDescription\": \"\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 692,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-830\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 498,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-830\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 771,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-831\",\n        \"batchDescription\": null,\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 718,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-835\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 596,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-854\",\n        \"batchDescription\": \"Junit testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 8,\n        \"programId\": 866,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 655,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-861\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 868,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-28075770\"\n    },\n    {\n        \"batchId\": 751,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-862\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 712,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-873\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 608,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-876\",\n        \"batchDescription\": \"Soap UI testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 9,\n        \"programId\": 867,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-48299936\"\n    },\n    {\n        \"batchId\": 708,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-883\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 656,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-887\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 868,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-28075770\"\n    },\n    {\n        \"batchId\": 766,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-89\",\n        \"batchDescription\": null,\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 691,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-890\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 593,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-894\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 866,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 725,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-895\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 671,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-913\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 754,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-919\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 540,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-924\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 589,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-931\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 868,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-28075770\"\n    },\n    {\n        \"batchId\": 548,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-94\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 634,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-942\",\n        \"batchDescription\": \"Manual Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 868,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-28075770\"\n    },\n    {\n        \"batchId\": 605,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-953\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 582,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-969\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 587,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-97\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 610,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-974\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 580,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-982\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 720,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-984\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 537,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-985\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 674,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-999\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 98,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET02-\",\n        \"batchDescription\": \"second_batch\",\n        \"batchStatus\": \"inactive\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 371,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-113\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 104,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-120\",\n        \"batchDescription\": \"six_batch\",\n        \"batchStatus\": \"failed\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 372,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-138\",\n        \"batchDescription\": \"six_batch\",\n        \"batchStatus\": \"failed\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 404,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-167\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 442,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-175\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1681,\n        \"programName\": \"Jun23-HugsForBugs-SDET-788\"\n    },\n    {\n        \"batchId\": 443,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-175\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 437,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-239\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 393,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-245\",\n        \"batchDescription\": \"six_batch\",\n        \"batchStatus\": \"failed\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 397,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-324\",\n        \"batchDescription\": \"six_batch\",\n        \"batchStatus\": \"failed\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 103,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-334\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 551,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-516\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1865,\n        \"programName\": \"Jun23-HugsForBugs-SDET-489\"\n    },\n    {\n        \"batchId\": 413,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-620\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 424,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-663\",\n        \"batchDescription\": \"six_batch\",\n        \"batchStatus\": \"failed\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 392,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-67\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 396,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-673\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 398,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-683\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 430,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-715\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 425,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-756\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 120,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-769\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 399,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-811\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 445,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-888\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1682,\n        \"programName\": \"Jun23-HugsForBugs-SDET-833\"\n    },\n    {\n        \"batchId\": 423,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-961\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 13,\n        \"batchName\": \"Jun23-LightningAPIHackers-SDET102-13\",\n        \"batchDescription\": \"bDesc2\",\n        \"batchStatus\": \"bSt2\",\n        \"batchNoOfClasses\": 13,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 16,\n        \"batchName\": \"Jun23-LightningAPIHackers-SDET102-16\",\n        \"batchDescription\": \"bDesc3\",\n        \"batchStatus\": \"bSt3\",\n        \"batchNoOfClasses\": 16,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 17,\n        \"batchName\": \"Jun23-LightningAPIHackers-SDET102-17\",\n        \"batchDescription\": \"bDesc3\",\n        \"batchStatus\": \"bSt3\",\n        \"batchNoOfClasses\": 17,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 19,\n        \"batchName\": \"Jun23-LightningAPIHackers-SDET102-19\",\n        \"batchDescription\": \"bDesc1\",\n        \"batchStatus\": \"bSt1\",\n        \"batchNoOfClasses\": 19,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 572,\n        \"batchName\": \"Jun23-LightningAPIHackers-SDET102-7\",\n        \"batchDescription\": \"Evening\",\n        \"batchStatus\": \"In progress\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 357,\n        \"programName\": \"Jun23-LightningAPIHackers-SDET-003\"\n    },\n    {\n        \"batchId\": 8,\n        \"batchName\": \"Jun23-LightningAPIHackers-SDET102-8\",\n        \"batchDescription\": \"Weekend\",\n        \"batchStatus\": \"Lighening Speed\",\n        \"batchNoOfClasses\": 8,\n        \"programId\": 1111,\n        \"programName\": \"Jun23-Postman Poineers-SDET-397\"\n    },\n    {\n        \"batchId\": 465,\n        \"batchName\": \"Jun23-LightningAPIHackers-SDET102-{{counter}}\",\n        \"batchDescription\": \"Evening\",\n        \"batchStatus\": \"In progress\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 357,\n        \"programName\": \"Jun23-LightningAPIHackers-SDET-003\"\n    },\n    {\n        \"batchId\": 542,\n        \"batchName\": \"Jun23-LightningAPIHackers-SDET102-UpdatedName\",\n        \"batchDescription\": \"changed batch description\",\n        \"batchStatus\": \"changed batch status\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 662,\n        \"programName\": \"Jun23-Lightning API Hackers-SDET-null\"\n    },\n    {\n        \"batchId\": 9,\n        \"batchName\": \"Jun23-LightningAPIHackers-SDET-9\",\n        \"batchDescription\": \"trialBatch\",\n        \"batchStatus\": \"batch-status2\",\n        \"batchNoOfClasses\": 9,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 651,\n        \"batchName\": \"Jun23-NinjaGeeks-SDET-POSTMAN-12\",\n        \"batchDescription\": \"POSTMAN Learning 479\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 621,\n        \"programId\": 1485,\n        \"programName\": \"Jun23-API Trackers-SDET-698\"\n    },\n    {\n        \"batchId\": 650,\n        \"batchName\": \"Jun23-NinjaGeeks-SDET-POSTMAN-491\",\n        \"batchDescription\": \"POSTMAN Learning 959\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 437,\n        \"programId\": 1485,\n        \"programName\": \"Jun23-API Trackers-SDET-698\"\n    },\n    {\n        \"batchId\": 762,\n        \"batchName\": \"Jun23-PostmanAcers-DA-012-SDET01-001\",\n        \"batchDescription\": \"DA Batch DA01\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 2206,\n        \"programName\": \"Jun23-PostmanAcers-DA-012\"\n    },\n    {\n        \"batchId\": 305,\n        \"batchName\": \"Jun23-PostmanAcers-DA-100--001\",\n        \"batchDescription\": \"SDET Second Batch SDET02\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 1350,\n        \"programName\": \"UpdatedJun23-PostmanAcers-SDET-750\"\n    },\n    {\n        \"batchId\": 84,\n        \"batchName\": \"Jun23-PostmanAcers-DA-100-SDET01-\",\n        \"batchDescription\": \"SDET Second Batch SDET02\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 301,\n        \"programName\": \"Jun23-PostmanAcers-SDET-300\"\n    },\n    {\n        \"batchId\": 61,\n        \"batchName\": \"Jun23-PostmanAcers-DA-DA01-200\",\n        \"batchDescription\": \"DA First Batch DA01\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 261,\n        \"programName\": \"Jun23-PostmanAcers-DA-200\"\n    },\n    {\n        \"batchId\": 73,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-100-SDET01-\",\n        \"batchDescription\": \"SDET First Batch SDET01\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 315,\n        \"programName\": \"Updated_Jun23-PostmanAcers-SDET-500\"\n    },\n    {\n        \"batchId\": 89,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-100-SDET01-001\",\n        \"batchDescription\": \"SDET First Batch SDET01\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 315,\n        \"programName\": \"Updated_Jun23-PostmanAcers-SDET-500\"\n    },\n    {\n        \"batchId\": 82,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-100-SDET01-serialNumber\",\n        \"batchDescription\": \"SDET First Batch SDET01\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 315,\n        \"programName\": \"Updated_Jun23-PostmanAcers-SDET-500\"\n    },\n    {\n        \"batchId\": 74,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-100-SDET01-serialNumber\",\n        \"batchDescription\": \"SDET First Batch SDET01\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 315,\n        \"programName\": \"Updated_Jun23-PostmanAcers-SDET-500\"\n    },\n    {\n        \"batchId\": 83,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-100-SDET01-{serialNumber}\",\n        \"batchDescription\": \"SDET First Batch SDET01\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 315,\n        \"programName\": \"Updated_Jun23-PostmanAcers-SDET-500\"\n    },\n    {\n        \"batchId\": 320,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-750--001\",\n        \"batchDescription\": \"SDET Second Batch SDET02\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 1350,\n        \"programName\": \"UpdatedJun23-PostmanAcers-SDET-750\"\n    },\n    {\n        \"batchId\": 322,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-750-SDET01-001\",\n        \"batchDescription\": \"SDET Second Batch SDET02\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 1350,\n        \"programName\": \"UpdatedJun23-PostmanAcers-SDET-750\"\n    },\n    {\n        \"batchId\": 113,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-SDET01-001\",\n        \"batchDescription\": \"Batch SDET\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 498,\n        \"programName\": \"Jun23-PostmanAcers-SDET-001\"\n    },\n    {\n        \"batchId\": 131,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-SDET01--002\",\n        \"batchDescription\": \"Batch DA\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 554,\n        \"programName\": \"Jun23-PostmanAcers-SDET-002\"\n    },\n    {\n        \"batchId\": 130,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-SDET01-002\",\n        \"batchDescription\": \"Batch SDET\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 498,\n        \"programName\": \"Jun23-PostmanAcers-SDET-001\"\n    },\n    {\n        \"batchId\": 216,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-SDET01--007\",\n        \"batchDescription\": \"Batch SDET01 under program 007\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 946,\n        \"programName\": \"Jun23-PostmanAcers-SDET-007\"\n    },\n    {\n        \"batchId\": 217,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-SDET01-007\",\n        \"batchDescription\": \"Batch SDET01 under program 007\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 946,\n        \"programName\": \"Jun23-PostmanAcers-SDET-007\"\n    },\n    {\n        \"batchId\": 220,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-SDET01-008\",\n        \"batchDescription\": \"Batch SDET01 under program 008\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 947,\n        \"programName\": \"Jun23-PostmanAcers-SDET-008\"\n    },\n    {\n        \"batchId\": 60,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-SDET01-200\",\n        \"batchDescription\": \"SDET First Batch SDET01\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 257,\n        \"programName\": \"Jun23-PostmanAcers-SDET-200\"\n    },\n    {\n        \"batchId\": 64,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-SDET01-300\",\n        \"batchDescription\": \"SDET First Batch SDET01\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 301,\n        \"programName\": \"Jun23-PostmanAcers-SDET-300\"\n    },\n    {\n        \"batchId\": 66,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-SDET02-300\",\n        \"batchDescription\": \"SDET Second Batch SDET02\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 301,\n        \"programName\": \"Jun23-PostmanAcers-SDET-300\"\n    },\n    {\n        \"batchId\": 868,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-170\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 839,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-219\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 774,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-228\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 863,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-301\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 860,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-406\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 826,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-478\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 827,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-492\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 862,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-616\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 861,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-62\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 851,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-630\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 859,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-637\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 866,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-677\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 864,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-684\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 832,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-685\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 865,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-718\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 852,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-745\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 652,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-748\",\n        \"batchDescription\": \"API07\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 13,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 153,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-75\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 824,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-784\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 867,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-86\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 2,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-914\",\n        \"batchDescription\": \"API07\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 13,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 525,\n        \"batchName\": \"Jun23-Postman Poineers-SDET-SDET01-36\",\n        \"batchDescription\": \"Selenium ,java,postman\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 830,\n        \"programId\": 1808,\n        \"programName\": \"Jun23-Postman Poineers-SDET-134\"\n    },\n    {\n        \"batchId\": 539,\n        \"batchName\": \"Jun23-Postman Poineers-SDET-SDET01-65\",\n        \"batchDescription\": \"Selenium ,java,postman\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 372,\n        \"programId\": 1855,\n        \"programName\": \"Jun23-Postman Poineers-SDET-256\"\n    },\n    {\n        \"batchId\": 526,\n        \"batchName\": \"Jun23-Postman Poineers-SDET-SDET01-846\",\n        \"batchDescription\": \"Selenium ,java,postman\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 122,\n        \"programId\": 1812,\n        \"programName\": \"Jun23-Postman Poineers-SDET-211\"\n    },\n    {\n        \"batchId\": 26,\n        \"batchName\": \"Jun23-sparkplugs-SDET-001\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 212,\n        \"batchName\": \"Jun23-sparkplugs-SDET-0010\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 95,\n        \"batchName\": \"Jun23-sparkplugs-SDET-002\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 275,\n        \"batchName\": \"Jun23-sparkplugs-SDET-002\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 28,\n        \"batchName\": \"Jun23-sparkplugs-SDET-003\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 29,\n        \"batchName\": \"Jun23-sparkplugs-SDET-004\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 210,\n        \"batchName\": \"Jun23-sparkplugs-SDET-005\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 208,\n        \"batchName\": \"Jun23-sparkplugs-SDET-005\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 211,\n        \"batchName\": \"Jun23-sparkplugs-SDET-006\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 213,\n        \"batchName\": \"Jun23-sparkplugs-SDET-011\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 97,\n        \"batchName\": \"Jun23-sparkplugs-SDET-100\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 96,\n        \"batchName\": \"Jun23-sparkplugs-SDET-100\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 271,\n        \"batchName\": \"Jun23-sparkplugs-SDET-110\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 15,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 250,\n        \"batchName\": \"Jun23-sparkplugs-SDET1735\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 432,\n        \"batchName\": \"Jun23-sparkplugs-SDET-200\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 15,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 247,\n        \"batchName\": \"Jun23-sparkplugs-SDET2344\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 219,\n        \"batchName\": \"Jun23-sparkplugs-SDET-52\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 218,\n        \"batchName\": \"Jun23-sparkplugs-SDET-55\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 248,\n        \"batchName\": \"Jun23-sparkplugs-SDET683\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 249,\n        \"batchName\": \"Jun23-sparkplugs-SDET940\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 358,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET01-1041\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 361,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET01-1395\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 449,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET01-1448\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 22,\n        \"programName\": \"Jun23-Postman Ninjas-SDET-NaN\"\n    },\n    {\n        \"batchId\": 367,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET01-186\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 65,\n        \"programName\": \"Hackton4\"\n    },\n    {\n        \"batchId\": 416,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET01-1892\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 24,\n        \"programName\": \"APITesting7\"\n    },\n    {\n        \"batchId\": 338,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET01-2383\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 274,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET01-2595\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 458,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET01-2647\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 71,\n        \"programName\": \"Jun23-postman-pioneer-SDET104\"\n    },\n    {\n        \"batchId\": 277,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET01-278\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 336,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET01-2940\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 291,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET01-3357\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 365,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET01-3741\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 628,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET01-{{SerialNo}}\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 366,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET02-1458\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 451,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET02-1462\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 59,\n        \"programName\": \"history\"\n    },\n    {\n        \"batchId\": 418,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET02-1841\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 87,\n        \"programName\": \"Jun23-Testing-SDET-012\"\n    },\n    {\n        \"batchId\": 276,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET02-21\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 359,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET02-238\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 407,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET02-2459\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 93,\n        \"programName\": \"Jun23-Testing-SDET-016\"\n    },\n    {\n        \"batchId\": 278,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET02-250\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 368,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET02-2580\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 49,\n        \"programName\": \"Jun23-apiexplorer-updated2byid-sdet-103\"\n    },\n    {\n        \"batchId\": 450,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET02-2661\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 65,\n        \"programName\": \"Hackton4\"\n    },\n    {\n        \"batchId\": 362,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET02-2805\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 337,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET02-3476\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 292,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET02-3915\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 339,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET02-646\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 629,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET02-{{SerialNo}}\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 214,\n        \"batchName\": \"Jun23-sparkplugs-SDET-xx\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 215,\n        \"batchName\": \"Jun23-sparkplugs-SDET-xy\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 196,\n        \"batchName\": \"Jun23-Status200-SDET-SDET108-001\",\n        \"batchDescription\": \"Learn Postman newman and api testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 344,\n        \"programName\": \"Apiforhackathon\"\n    },\n    {\n        \"batchId\": 317,\n        \"batchName\": \"June23_APIDagger_SDET_SDET01_001598\",\n        \"batchDescription\": \"APIDagger_SDET\",\n        \"batchStatus\": \"Started\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 316,\n        \"batchName\": \"June23_APIDagger_SDET_SDET01_001634\",\n        \"batchDescription\": \"APIDagger_SDET\",\n        \"batchStatus\": \"Started\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 318,\n        \"batchName\": \"June23_APIDagger_SDET_SDET01_001693\",\n        \"batchDescription\": \"APIDagger_SDET\",\n        \"batchStatus\": \"Started\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 321,\n        \"batchName\": \"June23_APIDagger_SDET_SDET01_001757\",\n        \"batchDescription\": \"APIDagger_SDET\",\n        \"batchStatus\": \"Started\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 319,\n        \"batchName\": \"June23_APIDagger_SDET_SDET01_001903\",\n        \"batchDescription\": \"APIDagger_SDET\",\n        \"batchStatus\": \"Started\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 848,\n        \"batchName\": \"June23_APIDagger_SDET_SDET01_001995\",\n        \"batchDescription\": \"APIDagger_SDET\",\n        \"batchStatus\": \"Started\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 287,\n        \"batchName\": \"June23-APIExplorers-SDET-100\",\n        \"batchDescription\": \"String\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 101,\n        \"programName\": \"Jun23-Hackers@API-Postman-05\"\n    },\n    {\n        \"batchId\": 431,\n        \"batchName\": \"June23-APIExplorers-SDET-100\",\n        \"batchDescription\": \"String\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 102,\n        \"programName\": \"Jun23-Hackers@API-Postman-06\"\n    },\n    {\n        \"batchId\": 301,\n        \"batchName\": \"June23-APIExplorers-SDET-100\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"pass\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 66,\n        \"programName\": \"Api1\"\n    },\n    {\n        \"batchId\": 123,\n        \"batchName\": \"June23-APIExplorers-SDET-100\",\n        \"batchDescription\": \"String\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 5,\n        \"batchName\": \"June23-APIExplorers-SDET-114\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 349,\n        \"batchName\": \"June23-APIExplorers-SDET-114\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"strinActive\",\n        \"batchNoOfClasses\": 25,\n        \"programId\": 167,\n        \"programName\": \"Jun23-HugsForBugs-SDET-793\"\n    },\n    {\n        \"batchId\": 326,\n        \"batchName\": \"June23-APIExplorers-SDET-114\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 25,\n        \"programId\": 67,\n        \"programName\": \"SeleniuminJavabyvijaybharathi\"\n    },\n    {\n        \"batchId\": 101,\n        \"batchName\": \"June23-DebugSquad-SDET-SDET106-001\",\n        \"batchDescription\": \"Software Testing\",\n        \"batchStatus\": \"PASS\",\n        \"batchNoOfClasses\": 15,\n        \"programId\": 453,\n        \"programName\": \"Jun23-DebugSquad-SDET-001\"\n    },\n    {\n        \"batchId\": 462,\n        \"batchName\": \"June23-DebugSquad-SDET-SDET106-555\",\n        \"batchDescription\": \"Software Testing\",\n        \"batchStatus\": \"PASS\",\n        \"batchNoOfClasses\": 25,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 871,\n        \"batchName\": \"Kendra\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 872,\n        \"batchName\": \"Ladarius\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 579,\n        \"batchName\": \"Madge\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 847,\n        \"batchName\": \"Novella\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 382,\n        \"batchName\": \"null\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 459,\n        \"batchName\": \"P1B1\",\n        \"batchDescription\": \"API-collectors-Batch1\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 1725,\n        \"programName\": \"API-Phase1\"\n    },\n    {\n        \"batchId\": 463,\n        \"batchName\": \"P1B1\",\n        \"batchDescription\": \"API-collectors-Batch1\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 1734,\n        \"programName\": \"API-Phase1-P1\"\n    },\n    {\n        \"batchId\": 105,\n        \"batchName\": \"Post_batch\",\n        \"batchDescription\": \"Create_Batch\",\n        \"batchStatus\": \"Pass\",\n        \"batchNoOfClasses\": 51,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 222,\n        \"batchName\": \"QA\",\n        \"batchDescription\": \"Newcomers\",\n        \"batchStatus\": \"Comleted\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 841,\n        \"batchName\": \"Quinton\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 858,\n        \"batchName\": \"Ramiro\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 849,\n        \"batchName\": \"Rhianna\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 618,\n        \"batchName\": \"Rowan\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 844,\n        \"batchName\": \"Ruthie\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 228,\n        \"batchName\": \"SalesForce\",\n        \"batchDescription\": \"SMPO\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 990,\n        \"programName\": \"Sales Force\"\n    },\n    {\n        \"batchId\": 283,\n        \"batchName\": \"Salseforce\",\n        \"batchDescription\": \"Salseforce Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 25,\n        \"batchName\": \"SDET\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 299,\n        \"batchName\": \"-SDET01-001\",\n        \"batchDescription\": \"SDET Second Batch SDET02\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 1052,\n        \"programName\": \"UpdatedJun23-PostmanAcers-SDET-004\"\n    },\n    {\n        \"batchId\": 341,\n        \"batchName\": \"SDET 230\",\n        \"batchDescription\": \"SDET BATCH-937\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 356,\n        \"programId\": 1485,\n        \"programName\": \"Jun23-API Trackers-SDET-698\"\n    },\n    {\n        \"batchId\": 343,\n        \"batchName\": \"SDET 241\",\n        \"batchDescription\": \"SDET BATCH-723\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 948,\n        \"programId\": 1485,\n        \"programName\": \"Jun23-API Trackers-SDET-698\"\n    },\n    {\n        \"batchId\": 635,\n        \"batchName\": \"SDET 329\",\n        \"batchDescription\": \"SDET BATCH-207\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 36,\n        \"programId\": 1485,\n        \"programName\": \"Jun23-API Trackers-SDET-698\"\n    },\n    {\n        \"batchId\": 344,\n        \"batchName\": \"SDET 353\",\n        \"batchDescription\": \"SDET BATCH-687\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 496,\n        \"programId\": 1485,\n        \"programName\": \"Jun23-API Trackers-SDET-698\"\n    },\n    {\n        \"batchId\": 340,\n        \"batchName\": \"SDET 488\",\n        \"batchDescription\": \"SDET BATCH-968\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 328,\n        \"programId\": 1485,\n        \"programName\": \"Jun23-API Trackers-SDET-698\"\n    },\n    {\n        \"batchId\": 637,\n        \"batchName\": \"SDET 637\",\n        \"batchDescription\": \"SDET BATCH-590\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 838,\n        \"programId\": 1485,\n        \"programName\": \"Jun23-API Trackers-SDET-698\"\n    },\n    {\n        \"batchId\": 360,\n        \"batchName\": \"SDET 677\",\n        \"batchDescription\": \"SDET BATCH-437\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 924,\n        \"programId\": 1485,\n        \"programName\": \"Jun23-API Trackers-SDET-698\"\n    },\n    {\n        \"batchId\": 342,\n        \"batchName\": \"SDET 686\",\n        \"batchDescription\": \"SDET BATCH-88\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 128,\n        \"programId\": 1485,\n        \"programName\": \"Jun23-API Trackers-SDET-698\"\n    },\n    {\n        \"batchId\": 638,\n        \"batchName\": \"SDET 771\",\n        \"batchDescription\": \"SDET BATCH-980\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 243,\n        \"programId\": 1485,\n        \"programName\": \"Jun23-API Trackers-SDET-698\"\n    },\n    {\n        \"batchId\": 345,\n        \"batchName\": \"SDET 84\",\n        \"batchDescription\": \"SDET BATCH-735\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 267,\n        \"programId\": 1485,\n        \"programName\": \"Jun23-API Trackers-SDET-698\"\n    },\n    {\n        \"batchId\": 133,\n        \"batchName\": \"SDET API HACKATHON1 2023\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"PASS\",\n        \"batchNoOfClasses\": 15,\n        \"programId\": 101,\n        \"programName\": \"Jun23-Hackers@API-Postman-05\"\n    },\n    {\n        \"batchId\": 39,\n        \"batchName\": \"SDET API HACKATHON 2022\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"PASS\",\n        \"batchNoOfClasses\": 15,\n        \"programId\": 101,\n        \"programName\": \"Jun23-Hackers@API-Postman-05\"\n    },\n    {\n        \"batchId\": 58,\n        \"batchName\": \"SDET API Hackathon 2023\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"pass\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 220,\n        \"programName\": \"Saleforce\"\n    },\n    {\n        \"batchId\": 34,\n        \"batchName\": \"SDET API HACKATHON 2023\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"PASS\",\n        \"batchNoOfClasses\": 15,\n        \"programId\": 101,\n        \"programName\": \"Jun23-Hackers@API-Postman-05\"\n    },\n    {\n        \"batchId\": 41,\n        \"batchName\": \"SDET API HACKATHON 2023\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"FAIL\",\n        \"batchNoOfClasses\": 15,\n        \"programId\": 100,\n        \"programName\": \"Jun1-postman-pioneer-SDET104\"\n    },\n    {\n        \"batchId\": 40,\n        \"batchName\": \"SDET API HACKATHON 2025\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"PASS\",\n        \"batchNoOfClasses\": 15,\n        \"programId\": 101,\n        \"programName\": \"Jun23-Hackers@API-Postman-05\"\n    },\n    {\n        \"batchId\": 198,\n        \"batchName\": \"sdf\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"string\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 199,\n        \"batchName\": \"sdfdsf\",\n        \"batchDescription\": \"sdf\",\n        \"batchStatus\": \"string\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 200,\n        \"batchName\": \"sdfdsfrt\",\n        \"batchDescription\": \"sdf\",\n        \"batchStatus\": \"string\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 37,\n        \"batchName\": \"selenium\",\n        \"batchDescription\": \"summer weekday Batch\",\n        \"batchStatus\": \"string\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 24,\n        \"programName\": \"APITesting7\"\n    },\n    {\n        \"batchId\": 202,\n        \"batchName\": \"selenium hackathon\",\n        \"batchDescription\": \"summer weekday Batch\",\n        \"batchStatus\": \"string\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 24,\n        \"programName\": \"APITesting7\"\n    },\n    {\n        \"batchId\": 115,\n        \"batchName\": \"selenium hackathon updated the description1\",\n        \"batchDescription\": null,\n        \"batchStatus\": \"InnActive\",\n        \"batchNoOfClasses\": 101,\n        \"programId\": 24,\n        \"programName\": \"APITesting7\"\n    },\n    {\n        \"batchId\": 332,\n        \"batchName\": \"Smart\",\n        \"batchDescription\": \"Good To Learn\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 1,\n        \"batchName\": \"sparkplugs\",\n        \"batchDescription\": \"batch-decs1\",\n        \"batchStatus\": \"batch-status4\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 23,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 500,\n        \"batchName\": \"sparkplugs\",\n        \"batchDescription\": \"batch-decs1\",\n        \"batchStatus\": \"batch-status4\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 23,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 106,\n        \"batchName\": \"sparkplugs\",\n        \"batchDescription\": \"batch-decs1\",\n        \"batchStatus\": \"batch-status4\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 23,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 45,\n        \"batchName\": \"sparkplugs\",\n        \"batchDescription\": \"batch-decs1\",\n        \"batchStatus\": \"batch-status4\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 23,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 151,\n        \"batchName\": \"Spring ACT June Batch\",\n        \"batchDescription\": \"WeekDay June Medicine Batch \",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 55,\n        \"programName\": \"ACT\"\n    },\n    {\n        \"batchId\": 10,\n        \"batchName\": \"Spring SAT Batch\",\n        \"batchDescription\": \"Weekend June Batch \",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 54,\n        \"programName\": \"SAT\"\n    },\n    {\n        \"batchId\": 294,\n        \"batchName\": \"string\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 318,\n        \"programName\": \"Jun23-PostmanAcers-DA-100\"\n    },\n    {\n        \"batchId\": 137,\n        \"batchName\": \"string\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"string\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 69,\n        \"batchName\": \"string\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 317,\n        \"programName\": \"Learn Java\"\n    },\n    {\n        \"batchId\": 112,\n        \"batchName\": \"string\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"string\",\n        \"batchNoOfClasses\": 9,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 117,\n        \"batchName\": \"string2\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"string\",\n        \"batchNoOfClasses\": 9,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 118,\n        \"batchName\": \"string3\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"string\",\n        \"batchNoOfClasses\": 9,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 227,\n        \"batchName\": \"string567\",\n        \"batchDescription\": \"string 678\",\n        \"batchStatus\": \"string345\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 229,\n        \"batchName\": \"string5678\",\n        \"batchDescription\": \"string 678\",\n        \"batchStatus\": \"string345\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 231,\n        \"batchName\": \"string567890\",\n        \"batchDescription\": \"string 6789\",\n        \"batchStatus\": \"string345\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 309,\n        \"batchName\": \"string89\",\n        \"batchDescription\": \"nmj\",\n        \"batchStatus\": \"stringmn\",\n        \"batchNoOfClasses\": 9,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 363,\n        \"batchName\": \"S/w\",\n        \"batchDescription\": \"Software Learning\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 364,\n        \"batchName\": \"SW\",\n        \"batchDescription\": \"Software Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 517,\n        \"batchName\": \"SW1\",\n        \"batchDescription\": \"Software Testing\",\n        \"batchStatus\": \"Not Active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 109,\n        \"batchName\": \"team\",\n        \"batchDescription\": \"hackathon\",\n        \"batchStatus\": \"pass\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 132,\n        \"batchName\": \"test\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"pass\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 220,\n        \"programName\": \"Saleforce\"\n    },\n    {\n        \"batchId\": 285,\n        \"batchName\": \"test\",\n        \"batchDescription\": \"something\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 999,\n        \"programName\": \"Updated by ID by Path-Jun23-Lightning API Hackers-DA-14\"\n    },\n    {\n        \"batchId\": 281,\n        \"batchName\": \"test\",\n        \"batchDescription\": \"something\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 156,\n        \"programName\": \"June 8euejx39m6g postman_pioneer_sdet104\"\n    },\n    {\n        \"batchId\": 280,\n        \"batchName\": \"test\",\n        \"batchDescription\": \"something\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 155,\n        \"programName\": \"Jun23-SparkPlugs-SDET-004\"\n    },\n    {\n        \"batchId\": 91,\n        \"batchName\": \"test\",\n        \"batchDescription\": \"something\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 355,\n        \"programName\": \"something\"\n    },\n    {\n        \"batchId\": 126,\n        \"batchName\": \"test\",\n        \"batchDescription\": \"something\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 230,\n        \"programName\": \"string\"\n    },\n    {\n        \"batchId\": 127,\n        \"batchName\": \"test\",\n        \"batchDescription\": \"something\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 450,\n        \"programName\": \"SDET-Sel\"\n    },\n    {\n        \"batchId\": 194,\n        \"batchName\": \"test\",\n        \"batchDescription\": \"something\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 150,\n        \"programName\": \"June xlqi29zumt postman_pioneer_sdet104\"\n    },\n    {\n        \"batchId\": 567,\n        \"batchName\": \"test\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 288,\n        \"batchName\": \"test\",\n        \"batchDescription\": \"something\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 599,\n        \"programName\": \"Jun23-spark plugs-SDET-278\"\n    },\n    {\n        \"batchId\": 93,\n        \"batchName\": \"test\",\n        \"batchDescription\": \"something\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 356,\n        \"programName\": \"Jun23-PostWomenTechies-S5\"\n    },\n    {\n        \"batchId\": 162,\n        \"batchName\": \"test\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"pass\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 66,\n        \"programName\": \"Api1\"\n    },\n    {\n        \"batchId\": 356,\n        \"batchName\": \"Test001\",\n        \"batchDescription\": \"Test001\",\n        \"batchStatus\": \"3\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 1566,\n        \"programName\": \"something004\"\n    },\n    {\n        \"batchId\": 347,\n        \"batchName\": \"Test001\",\n        \"batchDescription\": \"Test001\",\n        \"batchStatus\": \"3\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 1367,\n        \"programName\": \"something003\"\n    },\n    {\n        \"batchId\": 282,\n        \"batchName\": \"test5\",\n        \"batchDescription\": \"nothing\",\n        \"batchStatus\": \"train\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 49,\n        \"programName\": \"Jun23-apiexplorer-updated2byid-sdet-103\"\n    },\n    {\n        \"batchId\": 195,\n        \"batchName\": \"test5\",\n        \"batchDescription\": \"nothing\",\n        \"batchStatus\": \"train\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 410,\n        \"programName\": \"Jun23-Postmanpioneer-SDET-104\"\n    },\n    {\n        \"batchId\": 94,\n        \"batchName\": \"test5\",\n        \"batchDescription\": \"nothing\",\n        \"batchStatus\": \"train\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 92,\n        \"batchName\": \"test5\",\n        \"batchDescription\": \"nothing\",\n        \"batchStatus\": \"train\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 467,\n        \"batchName\": \"Test Batch description update\",\n        \"batchDescription\": \"Test Batch description update\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 24,\n        \"programName\": \"APITesting7\"\n    },\n    {\n        \"batchId\": 483,\n        \"batchName\": \"Test Batch Name1\",\n        \"batchDescription\": \"Test Batch description\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 24,\n        \"programName\": \"APITesting7\"\n    },\n    {\n        \"batchId\": 238,\n        \"batchName\": \"Testname\",\n        \"batchDescription\": \"BatchAPI6\",\n        \"batchStatus\": \"pass\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 568,\n        \"batchName\": \"testP\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 156,\n        \"batchName\": \"TestTesting1\",\n        \"batchDescription\": \"Test001\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 688,\n        \"programName\": \"something002\"\n    },\n    {\n        \"batchId\": 129,\n        \"batchName\": \"TestTesting1\",\n        \"batchDescription\": \"Test001\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 570,\n        \"programName\": \"something001\"\n    },\n    {\n        \"batchId\": 857,\n        \"batchName\": \"Thaddeus\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 577,\n        \"batchName\": \"Tremaine\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 18,\n        \"batchName\": \"updatedbatchs\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    }\n]"
								}
							]
						},
						{
							"name": "Program_Batch_TC_002_Invalid_Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/{{invalidEndpointGetAllBatches}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{invalidEndpointGetAllBatches}}"
									]
								}
							},
							"response": [
								{
									"name": "Program_Batch_TC_002_Invalid_Endpoint",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/{{invalidEndpointGetAllBatches}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"{{invalidEndpointGetAllBatches}}"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Sun, 25 Jun 2023 11:23:11 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2023-06-25T11:23:11.149+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batch\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_003_Without_Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										""
									]
								}
							},
							"response": [
								{
									"name": "Program_Batch_TC_003_Without_Endpoint",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												""
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Sun, 25 Jun 2023 11:28:08 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2023-06-25T11:28:08.441+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_004_Invalid_Request_POST",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 415\", function () {\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Unsupported Media Type\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,415);\r",
											"    pm.expect(jsonResponse.error,\"Unsupported Media Type\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/{{getAllBatches}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{getAllBatches}}"
									]
								}
							},
							"response": [
								{
									"name": "Program_Batch_TC_004_Invalid_Request_POST",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/{{getAllBatches}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"{{getAllBatches}}"
											]
										}
									},
									"status": "Unsupported Media Type",
									"code": 415,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Accept",
											"value": "application/json"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Sun, 25 Jun 2023 11:29:20 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2023-06-25T11:29:20.348+00:00\",\n    \"status\": 415,\n    \"error\": \"Unsupported Media Type\",\n    \"path\": \"/lms/batches\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_004_Invalid_Request_PUT_DELETE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,405);\r",
											"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/{{getAllBatches}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{getAllBatches}}"
									]
								}
							},
							"response": [
								{
									"name": "Program_Batch_TC_004_Invalid_Request_POST",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/{{getAllBatches}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"{{getAllBatches}}"
											]
										}
									},
									"status": "Unsupported Media Type",
									"code": 415,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Accept",
											"value": "application/json"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Sun, 25 Jun 2023 11:29:20 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2023-06-25T11:29:20.348+00:00\",\n    \"status\": 415,\n    \"error\": \"Unsupported Media Type\",\n    \"path\": \"/lms/batches\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_005_Invalid_Request_PUT_DELETE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,405);\r",
											"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/{{getAllBatches}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{getAllBatches}}"
									]
								}
							},
							"response": [
								{
									"name": "Program_Batch_TC_005_Invalid_Request_GET_DELETE",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/{{getAllBatches}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"{{getAllBatches}}"
											]
										}
									},
									"status": "Method Not Allowed",
									"code": 405,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Allow",
											"value": "GET, POST"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Sun, 25 Jun 2023 11:32:15 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2023-06-25T11:32:15.395+00:00\",\n    \"status\": 405,\n    \"error\": \"Method Not Allowed\",\n    \"path\": \"/lms/batches\"\n}"
								},
								{
									"name": "Program_Batch_TC_005_Invalid_Request_GET_DELETE",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/{{getAllBatches}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"{{getAllBatches}}"
											]
										}
									},
									"status": "Method Not Allowed",
									"code": 405,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Allow",
											"value": "GET, POST"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Sun, 25 Jun 2023 11:33:06 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2023-06-25T11:33:06.896+00:00\",\n    \"status\": 405,\n    \"error\": \"Method Not Allowed\",\n    \"path\": \"/lms/batches\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_006_Invalid_Base_URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Due to application error displays XML code, response body validation cannot be done\");\r",
											"console.log(\"JSONError: Unexpected token '<' at 1:1<!DOCTYPE html>^\");\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.expect(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{invalidBaseUrl}}",
									"host": [
										"{{invalidBaseUrl}}"
									]
								}
							},
							"response": [
								{
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche",
											"protocol": "https",
											"host": [
												"lms-api-hackathon-june2023-930a8b0f895d",
												"herokuapp",
												"com"
											],
											"path": [
												"lms",
												"batche"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "GET Batch By ID",
					"item": [
						{
							"name": "Program_Batch_TC_007_Valid_Batch_ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"    \r",
											"//validate Response body\r",
											"    pm.test(\"Validate Response body\", function() {\r",
											"         \r",
											"        pm.expect(jsonResponse.batchId, pm.environment.get(\"batchId\"));\r",
											"        pm.expect(jsonResponse.batchName,pm.environment.get(\"batchName\"));\r",
											"        pm.expect(jsonResponse.batchStatus,pm.environment.get(\"batchStatus\"));\r",
											"        pm.expect(jsonResponse.batchDescription, pm.environment.get(\"batchDescription\"));;\r",
											"        pm.expect(jsonResponse.batchNoOfClasses, pm.environment.get(\"batchNoOfClasses\"));;\r",
											"        pm.expect(jsonResponse.programId, pm.environment.get(\"programId\"));;\r",
											"        pm.expect(jsonResponse.programName,pm.environment.get(\"programName\"));;\r",
											"})\r",
											"\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =  \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"batchName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchNoOfClasses\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"batchName\",\r",
											"    \"batchDescription\",\r",
											"    \"batchStatus\",\r",
											"    \"batchNoOfClasses\",\r",
											"    \"programId\",\r",
											"    \"programName\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate Schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema))\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{getBatchById}}/{{batchId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{getBatchById}}",
										"{{batchId}}"
									]
								}
							},
							"response": [
								{
									"name": "Program_Batch_TC_007_Valid_Batch_ID",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/{{getBatchById}}/{{batchId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"{{getBatchById}}",
												"{{batchId}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Mon, 26 Jun 2023 05:20:56 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"batchId\": 1504,\n    \"batchName\": \"Jun23-PostWomenTechies-SDET-100-001\",\n    \"batchDescription\": \"This batch is for Postman hackathon\",\n    \"batchStatus\": \"Active\",\n    \"batchNoOfClasses\": 10,\n    \"programId\": 3168,\n    \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_008_Without_Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_009_Invalid_Request_POST_PUT_DELETE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,405);\r",
											"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/{{getBatchById}}/1504",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{getBatchById}}",
										"1504"
									]
								}
							},
							"response": [
								{
									"name": "Program_Batch_TC_004_Invalid_Request_POST",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/{{getAllBatches}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"{{getAllBatches}}"
											]
										}
									},
									"status": "Unsupported Media Type",
									"code": 415,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Accept",
											"value": "application/json"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Sun, 25 Jun 2023 11:29:20 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2023-06-25T11:29:20.348+00:00\",\n    \"status\": 415,\n    \"error\": \"Unsupported Media Type\",\n    \"path\": \"/lms/batches\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_009_Invalid_Request_POST_PUT_DELETE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,405);\r",
											"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/{{getBatchById}}/1504",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{getBatchById}}",
										"1504"
									]
								}
							},
							"response": [
								{
									"name": "Program_Batch_TC_004_Invalid_Request_POST",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/{{getAllBatches}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"{{getAllBatches}}"
											]
										}
									},
									"status": "Unsupported Media Type",
									"code": 415,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Accept",
											"value": "application/json"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Sun, 25 Jun 2023 11:29:20 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2023-06-25T11:29:20.348+00:00\",\n    \"status\": 415,\n    \"error\": \"Unsupported Media Type\",\n    \"path\": \"/lms/batches\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_009_Invalid_Request_POST_PUT_DELETE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,405);\r",
											"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/{{getBatchById}}/1504",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{getBatchById}}",
										"1504"
									]
								}
							},
							"response": [
								{
									"name": "Program_Batch_TC_009_Invalid_Request_POST_GET_DELETE",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/{{getBatchById}}/1504",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"{{getBatchById}}",
												"1504"
											]
										}
									},
									"status": "Method Not Allowed",
									"code": 405,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Allow",
											"value": "GET"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Mon, 26 Jun 2023 07:15:23 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2023-06-26T07:15:23.393+00:00\",\n    \"status\": 405,\n    \"error\": \"Method Not Allowed\",\n    \"path\": \"/lms/batches/batchId/1504\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_010_Non numeric_Batch_ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/{{getBatchById}}/{{Program_Batch_TC_010}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{getBatchById}}",
										"{{Program_Batch_TC_010}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_011_Special_Characters_Batch_ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{getBatchById}}/{{InvalidSpecialCharId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{getBatchById}}",
										"{{InvalidSpecialCharId}}"
									]
								}
							},
							"response": [
								{
									"name": "Program_Batch_TC_011_Special_Characters_Batch_ID",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/{{getBatchById}}/{{Program_Batch_TC_011}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"{{getBatchById}}",
												"{{Program_Batch_TC_011}}"
											]
										}
									},
									"status": "Method Not Allowed",
									"code": 405,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Allow",
											"value": "DELETE, PUT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Mon, 26 Jun 2023 07:58:35 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2023-06-26T07:58:35.958+00:00\",\n    \"status\": 405,\n    \"error\": \"Method Not Allowed\",\n    \"path\": \"/lms/batches/batchId/\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_012_Alphanumeric_Batch_ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/{{getBatchById}}/{{InvalidAlphanumericBatchId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{getBatchById}}",
										"{{InvalidAlphanumericBatchId}}"
									]
								}
							},
							"response": [
								{
									"name": "Program_Batch_TC_011_Special_Characters_Batch_ID",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/{{getBatchById}}/{{Program_Batch_TC_011}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"{{getBatchById}}",
												"{{Program_Batch_TC_011}}"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Mon, 26 Jun 2023 07:48:11 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2023-06-26T07:48:11.002+00:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"path\": \"/lms/batches/batchId/PostWomenTechies\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_013_Non_Existing_Batch_ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    var environmentVar = pm.environment.get(\"Program_Batch_TC_013\");\r",
											"    //pm.expect(jsonResponse.message,\"Batch not found with Id :  \" +environmentVar+ \" \").to.be.true;\r",
											"    pm.expect(jsonResponse.message,'Batch not found with Id : 12345678 ');\r",
											"    pm.expect(jsonResponse.success,\"false\")\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/{{getBatchById}}/{{Program_Batch_TC_013}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{getBatchById}}",
										"{{Program_Batch_TC_013}}"
									]
								}
							},
							"response": [
								{
									"name": "Program_Batch_TC_011_Special_Characters_Batch_ID",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/{{getBatchById}}/{{Program_Batch_TC_011}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"{{getBatchById}}",
												"{{Program_Batch_TC_011}}"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Mon, 26 Jun 2023 07:48:11 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2023-06-26T07:48:11.002+00:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"path\": \"/lms/batches/batchId/PostWomenTechies\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_014_Invalid_Endpoints",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/{{Program_Batch_TC_014}}}/{{batchID}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{Program_Batch_TC_014}}}",
										"{{batchID}}"
									]
								}
							},
							"response": [
								{
									"name": "Program_Batch_TC_011_Special_Characters_Batch_ID",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/{{getBatchById}}/{{Program_Batch_TC_011}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"{{getBatchById}}",
												"{{Program_Batch_TC_011}}"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Mon, 26 Jun 2023 07:48:11 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2023-06-26T07:48:11.002+00:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"path\": \"/lms/batches/batchId/PostWomenTechies\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_015_Invalid_Base_URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Due to application error displays XML code, response body validation cannot be done\");\r",
											"console.log(\"JSONError: Unexpected token '<' at 1:1<!DOCTYPE html>^\");\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.expect(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{invalidBaseUrl}}",
									"host": [
										"{{invalidBaseUrl}}"
									]
								}
							},
							"response": [
								{
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche",
											"protocol": "https",
											"host": [
												"lms-api-hackathon-june2023-930a8b0f895d",
												"herokuapp",
												"com"
											],
											"path": [
												"lms",
												"batche"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "GET Batch By Name",
					"item": [
						{
							"name": "Program_Batch_TC_016_Valid_Batch_Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =  \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"batchName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchNoOfClasses\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"batchName\",\r",
											"    \"batchDescription\",\r",
											"    \"batchStatus\",\r",
											"    \"batchNoOfClasses\",\r",
											"    \"programId\",\r",
											"    \"programName\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema))\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/{{getBatchByName}}/{{batchName}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{getBatchByName}}",
										"{{batchName}}"
									]
								}
							},
							"response": [
								{
									"name": "Program_Batch_TC_007_Valid_Batch_ID",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/{{getBatchById}}/{{batchId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"{{getBatchById}}",
												"{{batchId}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Mon, 26 Jun 2023 05:20:56 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"batchId\": 1504,\n    \"batchName\": \"Jun23-PostWomenTechies-SDET-100-001\",\n    \"batchDescription\": \"This batch is for Postman hackathon\",\n    \"batchStatus\": \"Active\",\n    \"batchNoOfClasses\": 10,\n    \"programId\": 3168,\n    \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_017_Without_Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_018_Invalid_Endpoint_Alphanumeric_Batch_Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"pm.test(\"Validate response body\", function(){\r",
											"\r",
											"    //pm.expect(jsonResponse.message,\"programBatch with \"+ getbatchName+\"not found \").to.be.true\r",
											"    pm.expect(jsonResponse.message).to.include(\"programBatch\");\r",
											"    pm.expect(jsonResponse.success,\"false\")\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/{{getBatchByName}}/{{InvalidAlphanumericBatchId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{getBatchByName}}",
										"{{InvalidAlphanumericBatchId}}"
									]
								}
							},
							"response": [
								{
									"name": "Program_Batch_TC_011_Special_Characters_Batch_ID",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/{{getBatchById}}/{{Program_Batch_TC_011}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"{{getBatchById}}",
												"{{Program_Batch_TC_011}}"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Mon, 26 Jun 2023 07:48:11 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2023-06-26T07:48:11.002+00:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"path\": \"/lms/batches/batchId/PostWomenTechies\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_019_Invalid_Endpoint_Non_Existing_Batch_ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.message).to.include(\"programBatch\");\r",
											"    //pm.expect(jsonResponse.message,\"programBatch with \"+ batchName+\"not found \").to.be.true\r",
											"    pm.expect(jsonResponse.success,\"false\")\r",
											"})\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/{{getBatchByName}}/{{invalidbatchName}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{getBatchByName}}",
										"{{invalidbatchName}}"
									]
								}
							},
							"response": [
								{
									"name": "Program_Batch_TC_011_Special_Characters_Batch_ID",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/{{getBatchById}}/{{Program_Batch_TC_011}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"{{getBatchById}}",
												"{{Program_Batch_TC_011}}"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Mon, 26 Jun 2023 07:48:11 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2023-06-26T07:48:11.002+00:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"path\": \"/lms/batches/batchId/PostWomenTechies\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_020_Invalid_Endpoints",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/{{Program_Batch_TC_014}}}/{{batchName}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{Program_Batch_TC_014}}}",
										"{{batchName}}"
									]
								}
							},
							"response": [
								{
									"name": "Program_Batch_TC_011_Special_Characters_Batch_ID",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/{{getBatchById}}/{{Program_Batch_TC_011}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"{{getBatchById}}",
												"{{Program_Batch_TC_011}}"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Mon, 26 Jun 2023 07:48:11 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2023-06-26T07:48:11.002+00:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"path\": \"/lms/batches/batchId/PostWomenTechies\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_021_Invalid_Request_POST_PUT_DELETE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,405);\r",
											"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/{{getBatchByName}}/{{batchName}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{getBatchByName}}",
										"{{batchName}}"
									]
								}
							},
							"response": [
								{
									"name": "Program_Batch_TC_004_Invalid_Request_POST",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/{{getAllBatches}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"{{getAllBatches}}"
											]
										}
									},
									"status": "Unsupported Media Type",
									"code": 415,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Accept",
											"value": "application/json"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Sun, 25 Jun 2023 11:29:20 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2023-06-25T11:29:20.348+00:00\",\n    \"status\": 415,\n    \"error\": \"Unsupported Media Type\",\n    \"path\": \"/lms/batches\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_021_Invalid_Request_POST_PUT_DELETE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,405);\r",
											"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/{{getBatchByName}}/{{batchName}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{getBatchByName}}",
										"{{batchName}}"
									]
								}
							},
							"response": [
								{
									"name": "Program_Batch_TC_004_Invalid_Request_POST",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/{{getAllBatches}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"{{getAllBatches}}"
											]
										}
									},
									"status": "Unsupported Media Type",
									"code": 415,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Accept",
											"value": "application/json"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Sun, 25 Jun 2023 11:29:20 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2023-06-25T11:29:20.348+00:00\",\n    \"status\": 415,\n    \"error\": \"Unsupported Media Type\",\n    \"path\": \"/lms/batches\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_021_Invalid_Request_POST_PUT_DELETE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,405);\r",
											"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/{{getBatchByName}}/{{getDELbyProgramId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{getBatchByName}}",
										"{{getDELbyProgramId}}"
									]
								}
							},
							"response": [
								{
									"name": "Program_Batch_TC_004_Invalid_Request_POST",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/{{getAllBatches}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"{{getAllBatches}}"
											]
										}
									},
									"status": "Unsupported Media Type",
									"code": 415,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Accept",
											"value": "application/json"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Sun, 25 Jun 2023 11:29:20 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2023-06-25T11:29:20.348+00:00\",\n    \"status\": 415,\n    \"error\": \"Unsupported Media Type\",\n    \"path\": \"/lms/batches\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_022_Invalid_Base_URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Due to application error displays XML code, response body validation cannot be done\");\r",
											"console.log(\"JSONError: Unexpected token '<' at 1:1<!DOCTYPE html>^\");\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.expect(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{invalidBaseUrl}}",
									"host": [
										"{{invalidBaseUrl}}"
									]
								}
							},
							"response": [
								{
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche",
											"protocol": "https",
											"host": [
												"lms-api-hackathon-june2023-930a8b0f895d",
												"herokuapp",
												"com"
											],
											"path": [
												"lms",
												"batche"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "GET Batch By Program Id",
					"item": [
						{
							"name": "Program_Batch_TC_023_Valid_Program ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"    \r",
											"//validate Response body\r",
											"\r",
											"    pm.test(\"Validate response body\", function(){\r",
											"    \r",
											"    //pm.expect(jsonResponse.message,\"programBatch with \"+ invalidProgramId+\"not found \").to.be.true\r",
											"    //pm.expect(jsonResponse.success,\"false\")\r",
											"\r",
											"         \r",
											"        pm.expect(jsonResponse.batchId, pm.environment.get(\"batchId\"));\r",
											"        pm.expect(jsonResponse.batchName,pm.environment.get(\"batchName\"));\r",
											"        pm.expect(jsonResponse.batchStatus,pm.environment.get(\"batchStatus\"));\r",
											"        pm.expect(jsonResponse.batchDescription, pm.environment.get(\"batchDescription\"));;\r",
											"        pm.expect(jsonResponse.batchNoOfClasses, pm.environment.get(\"batchNoOfClasses\"));;\r",
											"        pm.expect(jsonResponse.programId, pm.environment.get(\"programId\"));;\r",
											"        pm.expect(jsonResponse.programName,pm.environment.get(\"programName\"));;\r",
											"})\r",
											"\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =  \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"batchName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchNoOfClasses\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"batchName\",\r",
											"    \"batchDescription\",\r",
											"    \"batchStatus\",\r",
											"    \"batchNoOfClasses\",\r",
											"    \"programId\",\r",
											"    \"programName\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse[0],schema))\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/{{getBatchByProgramId}}/{{programID}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{getBatchByProgramId}}",
										"{{programID}}"
									]
								}
							},
							"response": [
								{
									"name": "Program_Batch_TC_007_Valid_Batch_ID",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/{{getBatchById}}/{{batchId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"{{getBatchById}}",
												"{{batchId}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Mon, 26 Jun 2023 05:20:56 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"batchId\": 1504,\n    \"batchName\": \"Jun23-PostWomenTechies-SDET-100-001\",\n    \"batchDescription\": \"This batch is for Postman hackathon\",\n    \"batchStatus\": \"Active\",\n    \"batchNoOfClasses\": 10,\n    \"programId\": 3168,\n    \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_024_Invalid_Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/{{invalidEndpointGetAllBatches}}/{{programID}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{invalidEndpointGetAllBatches}}",
										"{{programID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_025_Invalid_Request_POST_GET_DELETE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,405);\r",
											"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/{{getBatchByProgramId}}/{{batchName}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{getBatchByProgramId}}",
										"{{batchName}}"
									]
								}
							},
							"response": [
								{
									"name": "Program_Batch_TC_004_Invalid_Request_POST",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/{{getAllBatches}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"{{getAllBatches}}"
											]
										}
									},
									"status": "Unsupported Media Type",
									"code": 415,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Accept",
											"value": "application/json"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Sun, 25 Jun 2023 11:29:20 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2023-06-25T11:29:20.348+00:00\",\n    \"status\": 415,\n    \"error\": \"Unsupported Media Type\",\n    \"path\": \"/lms/batches\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_025_Invalid_Request_POST_GET_DELETE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,405);\r",
											"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/{{getBatchByProgramId}}/{{batchName}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{getBatchByProgramId}}",
										"{{batchName}}"
									]
								}
							},
							"response": [
								{
									"name": "Program_Batch_TC_004_Invalid_Request_POST",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/{{getAllBatches}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"{{getAllBatches}}"
											]
										}
									},
									"status": "Unsupported Media Type",
									"code": 415,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Accept",
											"value": "application/json"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Sun, 25 Jun 2023 11:29:20 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2023-06-25T11:29:20.348+00:00\",\n    \"status\": 415,\n    \"error\": \"Unsupported Media Type\",\n    \"path\": \"/lms/batches\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_025_Invalid_Request_POST_GET_DELETE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,405);\r",
											"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/{{getBatchByProgramId}}/{{getDELbyProgramId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{getBatchByProgramId}}",
										"{{getDELbyProgramId}}"
									]
								}
							},
							"response": [
								{
									"name": "Program_Batch_TC_009_Invalid_Request_POST_GET_DELETE",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/{{getBatchById}}/1504",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"{{getBatchById}}",
												"1504"
											]
										}
									},
									"status": "Method Not Allowed",
									"code": 405,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Allow",
											"value": "GET"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Mon, 26 Jun 2023 07:15:23 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2023-06-26T07:15:23.393+00:00\",\n    \"status\": 405,\n    \"error\": \"Method Not Allowed\",\n    \"path\": \"/lms/batches/batchId/1504\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_026_Program ID_in_Non numeric",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{getBatchByProgramId}}/{{Program_Batch_TC_010}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{getBatchByProgramId}}",
										"{{Program_Batch_TC_010}}"
									]
								}
							},
							"response": [
								{
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche",
											"protocol": "https",
											"host": [
												"lms-api-hackathon-june2023-930a8b0f895d",
												"herokuapp",
												"com"
											],
											"path": [
												"lms",
												"batche"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_027__Program ID_in_Special_Characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,405);\r",
											"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/{{getBatchByProgramId}}/{{InvalidSpecialCharId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{getBatchByProgramId}}",
										"{{InvalidSpecialCharId}}"
									]
								}
							},
							"response": [
								{
									"name": "Program_Batch_TC_011_Special_Characters_Batch_ID",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/{{getBatchById}}/{{Program_Batch_TC_011}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"{{getBatchById}}",
												"{{Program_Batch_TC_011}}"
											]
										}
									},
									"status": "Method Not Allowed",
									"code": 405,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Allow",
											"value": "DELETE, PUT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Mon, 26 Jun 2023 07:58:35 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2023-06-26T07:58:35.958+00:00\",\n    \"status\": 405,\n    \"error\": \"Method Not Allowed\",\n    \"path\": \"/lms/batches/batchId/\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_028__Program ID_in_Alphanumeric",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,405);\r",
											"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/{{getBatchByProgramId}}/{{InvalidAlphanumericBatchId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{getBatchByProgramId}}",
										"{{InvalidAlphanumericBatchId}}"
									]
								}
							},
							"response": [
								{
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche",
											"protocol": "https",
											"host": [
												"lms-api-hackathon-june2023-930a8b0f895d",
												"herokuapp",
												"com"
											],
											"path": [
												"lms",
												"batche"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_029_Without_Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_030_Non_Existing_Batch_ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    var invalidProgramId = pm.variables.get(invalidProgramId);\r",
											"    //pm.expect(jsonResponse.message,\"programBatch with \"+ invalidProgramId+\"not found \").to.be.true\r",
											"    pm.expect(jsonResponse.success,\"false\")\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/{{getBatchByProgramId}}/{{Program_Batch_TC_013}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{getBatchByProgramId}}",
										"{{Program_Batch_TC_013}}"
									]
								}
							},
							"response": [
								{
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche",
											"protocol": "https",
											"host": [
												"lms-api-hackathon-june2023-930a8b0f895d",
												"herokuapp",
												"com"
											],
											"path": [
												"lms",
												"batche"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_031_Invalid_Base_URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Due to application error displays XML code, response body validation cannot be done\");\r",
											"console.log(\"JSONError: Unexpected token '<' at 1:1<!DOCTYPE html>^\");\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.expect(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{invalidBaseUrl}}",
									"host": [
										"{{invalidBaseUrl}}"
									]
								}
							},
							"response": [
								{
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche",
											"protocol": "https",
											"host": [
												"lms-api-hackathon-june2023-930a8b0f895d",
												"herokuapp",
												"com"
											],
											"path": [
												"lms",
												"batche"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "POST Batch - Create Batch",
			"item": [
				{
					"name": "Program_Batch_TC_032_Create Batch_Random_Value_BatchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    //pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    //pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =  \r",
									" {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchDescription\",\r",
									"    \"batchStatus\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse[0],schema))\r",
									" })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randno = Math.floor(Math.random()*10000+1);\r",
									"var randomstr = \"Jun23-PostwomenTechies-SDET-Selenium-100-\"+randno;\r",
									"\r",
									"pm.environment.set(\"batchId\",1);\r",
									"pm.environment.set(\"batchName\",randomstr);\r",
									"pm.environment.set(\"batchDescription\",\"This is for Selenium Assignment\");\r",
									"pm.environment.set(\"batchStatus\",\"Active\");\r",
									"pm.environment.set(\"batchNoOfClasses\",10);\r",
									"pm.environment.set(\"programName\",\"Jun23-PostWomenTechies-SDET-100-100\");\r",
									"pm.environment.set(\"programId\",3168);\r",
									"\r",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n {\r\n        \"batchId\": 0,\r\n        \"batchName\": \"{{randomBatchName}}\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{programId}},\r\n        \"programName\": \"{{programName}}\"\r\n        }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{createBatch}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{createBatch}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_033_34_54_35Create Batch_data_driven",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"//validate status message\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//validate Response body\r",
									"\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"var id = jsonResponse.batchId;\r",
									"console.log(id);\r",
									"    \r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =  \r",
									" {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchDescription\",\r",
									"    \"batchStatus\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse[0],schema))\r",
									" })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n {\r\n        \"batchId\": 0,\r\n        \"batchName\": \"{{batchName}}\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{programId}},\r\n        \"programName\": \"{{programName}}\"\r\n        }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{createBatch}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{createBatch}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_036_Without_Endpoints",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.status,404);\r",
									"    pm.expect(jsonResponse.error,\"Not Found\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"     \r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
									" })\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"batchId\": 0,\r\n        \"batchName\": \"{{batchName}}\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{programId}},\r\n        \"programName\": \"{{programName}}\"\r\n        }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{withoutEndpoint}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{withoutEndpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_037_Invalid_Endpoints",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.status,404);\r",
									"    pm.expect(jsonResponse.error,\"Not Found\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"     \r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
									" })\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"batchId\": 0,\r\n        \"batchName\": \"{{batchName}}\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{programId}},\r\n        \"programName\": \"{{programName}}\"\r\n        }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{invalidEndpoint}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{invalidEndpoint}}"
							]
						}
					},
					"response": [
						{
							"name": "New Request",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche",
									"protocol": "https",
									"host": [
										"lms-api-hackathon-june2023-930a8b0f895d",
										"herokuapp",
										"com"
									],
									"path": [
										"lms",
										"batche"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 23 Jun 2023 19:13:05 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
						}
					]
				},
				{
					"name": "Program_Batch_TC_038_Invalid_Request_PUT_GET_DELETE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code \r",
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Method Not Allowed\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.status,405);\r",
									"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"     \r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
									" })"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"batchId\": 0,\r\n        \"batchName\": \"{{batchName}}\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{programId}},\r\n        \"programName\": \"{{programName}}\"\r\n        }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{createBatch}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{createBatch}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_038_Invalid_Request_PUT_GET_DELETE_invalid_Batch_Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code \r",
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Method Not Allowed\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.status,405);\r",
									"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"     \r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
									" })"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"batchId\": 0,\r\n        \"batchName\": \"{{batchName}}\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{programId}},\r\n        \"programName\": \"{{programName}}\"\r\n        }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{createBatch}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{createBatch}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_038_Invalid_Request_PUT_GET_DELETE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"    \r",
									"//validate Response body\r",
									"    pm.test(\"Validate Response body\", function() {\r",
									"         \r",
									"        pm.expect(jsonResponse.batchId, pm.environment.get(\"batchId\"));\r",
									"        pm.expect(jsonResponse.batchName,pm.environment.get(\"batchName\"));\r",
									"        pm.expect(jsonResponse.batchStatus,pm.environment.get(\"batchStatus\"));\r",
									"        pm.expect(jsonResponse.batchDescription, pm.environment.get(\"batchDescription\"));;\r",
									"        pm.expect(jsonResponse.batchNoOfClasses, pm.environment.get(\"batchNoOfClasses\"));;\r",
									"        pm.expect(jsonResponse.programId, pm.environment.get(\"programId\"));;\r",
									"        pm.expect(jsonResponse.programName,pm.environment.get(\"programName\"));;\r",
									"})\r",
									"\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =  \r",
									" {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchDescription\",\r",
									"    \"batchStatus\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validate Schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema))\r",
									" })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"batchId\": 0,\r\n        \"batchName\": \"{{batchName}}\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{programId}},\r\n        \"programName\": \"{{programName}}\"\r\n        }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{createBatch}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{createBatch}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_039_Invalid_Base_URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Due to application error displays XML code, response body validation cannot be done\");\r",
									"console.log(\"JSONError: Unexpected token '<' at 1:1<!DOCTYPE html>^\");\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.expect(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{invalidBaseUrl}}/{{createBatch}}",
							"host": [
								"{{invalidBaseUrl}}"
							],
							"path": [
								"{{createBatch}}"
							]
						}
					},
					"response": [
						{
							"name": "New Request",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche",
									"protocol": "https",
									"host": [
										"lms-api-hackathon-june2023-930a8b0f895d",
										"herokuapp",
										"com"
									],
									"path": [
										"lms",
										"batche"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 23 Jun 2023 19:13:05 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
						}
					]
				},
				{
					"name": "Program_Batch_TC_041_Without_Request_body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 415\", function () {\r",
									"    pm.response.to.have.status(415);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Unsupported Media Type\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.status,415);\r",
									"    pm.expect(jsonResponse.error,\"Unsupported Media Type\");\r",
									"})\r",
									"var schema =   \r",
									" {\r",
									"     \r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema))\r",
									" })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{createBatch}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{createBatch}}"
							]
						}
					},
					"response": [
						{
							"name": "New Request",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche",
									"protocol": "https",
									"host": [
										"lms-api-hackathon-june2023-930a8b0f895d",
										"herokuapp",
										"com"
									],
									"path": [
										"lms",
										"batche"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 23 Jun 2023 19:13:05 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
						}
					]
				},
				{
					"name": "Program_Batch_TC_042_Already_Existing_Batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    //pm.expect(jsonResponse.message,\"Program \"+ pm.variables.get(\"programID\") +\"with\" + pm.variables.get(\"batchId\")+\"already exists: ; Please give a different batch Name or Choose a different Program\");\r",
									"    pm.expect(jsonResponse.message).to.include(\"already exists\");\r",
									"    pm.expect(jsonResponse.success,\"false\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
									" })\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"batchId\": 0,\r\n        \"batchName\": \"{{batchName}}\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{programId}},\r\n        \"programName\": \"{{programName}}\"\r\n        }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{createBatch}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{createBatch}}"
							]
						}
					},
					"response": [
						{
							"name": "New Request",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche",
									"protocol": "https",
									"host": [
										"lms-api-hackathon-june2023-930a8b0f895d",
										"herokuapp",
										"com"
									],
									"path": [
										"lms",
										"batche"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 23 Jun 2023 19:13:05 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
						}
					]
				},
				{
					"name": "Program_Batch_TC_043_Without_Batch_Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.message,\"Batch Name is mandatory\");\r",
									"    pm.expect(jsonResponse.success,\"false\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema)).to.be.false;\r",
									" })\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"batchId\": 0,\r\n        //\"batchName\": \"{{batchName}}\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{programId}},\r\n        \"programName\": \"{{programName}}\"\r\n        }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{createBatch}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{createBatch}}"
							]
						}
					},
					"response": [
						{
							"name": "New Request",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche",
									"protocol": "https",
									"host": [
										"lms-api-hackathon-june2023-930a8b0f895d",
										"herokuapp",
										"com"
									],
									"path": [
										"lms",
										"batche"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 23 Jun 2023 19:13:05 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
						}
					]
				},
				{
					"name": "Program_Batch_TC_044_Without_Batch_Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.message,\"Batch status is needed\");\r",
									"    pm.expect(jsonResponse.success,\"false\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema)).to.be.false\r",
									" })\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"batchId\": 0,\r\n        \"batchName\": \"{{batchName}}\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n       // \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{programId}},\r\n        \"programName\": \"{{programName}}\"\r\n        }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{createBatch}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{createBatch}}"
							]
						}
					},
					"response": [
						{
							"name": "New Request",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche",
									"protocol": "https",
									"host": [
										"lms-api-hackathon-june2023-930a8b0f895d",
										"herokuapp",
										"com"
									],
									"path": [
										"lms",
										"batche"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 23 Jun 2023 19:13:05 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
						}
					]
				},
				{
					"name": "Program_Batch_TC_045_Without_Program_Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.message,\" ProgramId field is needed; It should be a positive number \");\r",
									"    pm.expect(jsonResponse.success,\"false\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema)).to.be.false\r",
									" })\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"batchId\": 0,\r\n        \"batchName\": \"{{batchName}}\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        //\"programId\": {{programId}},\r\n        \"programName\": \"{{programName}}\"\r\n        }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{createBatch}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{createBatch}}"
							]
						}
					},
					"response": [
						{
							"name": "New Request",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche",
									"protocol": "https",
									"host": [
										"lms-api-hackathon-june2023-930a8b0f895d",
										"herokuapp",
										"com"
									],
									"path": [
										"lms",
										"batche"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 23 Jun 2023 19:13:05 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
						}
					]
				},
				{
					"name": "Program_Batch_TC_046_Without_Batch_No_Of_Classes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.message,\" No of Classes is needed; It should be a positive number \");\r",
									"    pm.expect(jsonResponse.success,\"false\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema)).to.be.false\r",
									" })\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"batchId\": 0,\r\n        \"batchName\": \"{{batchName}}\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n       // \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{programId}},\r\n        \"programName\": \"{{programName}}\"\r\n        }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{createBatch}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{createBatch}}"
							]
						}
					},
					"response": [
						{
							"name": "New Request",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche",
									"protocol": "https",
									"host": [
										"lms-api-hackathon-june2023-930a8b0f895d",
										"herokuapp",
										"com"
									],
									"path": [
										"lms",
										"batche"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 23 Jun 2023 19:13:05 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
						}
					]
				},
				{
					"name": "Program_Batch_TC_047_Negative_value_Batch_No_Of_Classes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.message,\" No of Classes is needed; It should be a positive number \");\r",
									"    pm.expect(jsonResponse.success,\"false\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema)).to.be.false\r",
									" })\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"batchId\": 0,\r\n        \"batchName\": \"{{batchName}}\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{NegbatchNoOfClasses}}\",\r\n        \"programId\": {{programId}},\r\n        \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{createBatch}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{createBatch}}"
							]
						}
					},
					"response": [
						{
							"name": "New Request",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche",
									"protocol": "https",
									"host": [
										"lms-api-hackathon-june2023-930a8b0f895d",
										"herokuapp",
										"com"
									],
									"path": [
										"lms",
										"batche"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 23 Jun 2023 19:13:05 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
						}
					]
				},
				{
					"name": "Program_Batch_TC_048_Batch_No_Of_Classes_as_zero",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.message,\" No of Classes is needed; It should be a positive number \");\r",
									"    pm.expect(jsonResponse.success,\"false\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema))\r",
									" })\r",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"batchId\": 0,\r\n        \"batchName\": \"{{batchName}}\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{zeroBatchNoOfClasses}}\",\r\n        \"programId\": {{programId}},\r\n        \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{createBatch}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{createBatch}}"
							]
						}
					},
					"response": [
						{
							"name": "New Request",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche",
									"protocol": "https",
									"host": [
										"lms-api-hackathon-june2023-930a8b0f895d",
										"herokuapp",
										"com"
									],
									"path": [
										"lms",
										"batche"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 23 Jun 2023 19:13:05 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
						}
					]
				},
				{
					"name": "Program_Batch_TC_049_Without_Batch_Description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"\r",
									"var id = jsonResponse.batchId;\r",
									"console.log(id);\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =  \r",
									" {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchDescription\",\r",
									"    \"batchStatus\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse[0],schema))\r",
									" })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-DA-1\",\r\n  //\"batchDescription\": \" \",\r\n  \"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\":10,\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{createBatch}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{createBatch}}"
							]
						}
					},
					"response": [
						{
							"name": "New Request",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche",
									"protocol": "https",
									"host": [
										"lms-api-hackathon-june2023-930a8b0f895d",
										"herokuapp",
										"com"
									],
									"path": [
										"lms",
										"batche"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 23 Jun 2023 19:13:05 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
						}
					]
				},
				{
					"name": "Program_Batch_TC_050_Program_Id_Invalid_negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.message,\"Program not found with Id : \" + pm.variables.get(\"programID\")+\" \");\r",
									"    pm.expect(jsonResponse.success,\"false\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema))\r",
									" })\r",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n        \"batchId\": 0,\r\n        \"batchName\": \"{{batchName}}\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{NegprogramId}},\r\n        \"programName\": \"{{programName}}\"\r\n        }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{createBatch}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{createBatch}}"
							]
						}
					},
					"response": [
						{
							"name": "Program_Batch_TC_050_Program_Id_Invalid_negative",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \r\n  \"batchName\": \"Jun23-PostWomenTechies1\",\r\n  \"batchDescription\": \"This batch is for Postman hackathon\",\r\n  \"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"programId\": -3168\r\n  \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{createBatch}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{createBatch}}"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Tue, 27 Jun 2023 06:46:22 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Program not found with Id : -3168 \",\n    \"success\": false\n}"
						}
					]
				},
				{
					"name": "Program_Batch_TC_051_Empty_Batch_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.status,400);\r",
									"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"     \r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
									" })\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"batchId\": 0,\r\n        \"batchName\": \"\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{programId}},\r\n        \"programName\": {{programName}}\r\n\r\n        \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{createBatch}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{createBatch}}"
							]
						}
					},
					"response": [
						{
							"name": "New Request",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche",
									"protocol": "https",
									"host": [
										"lms-api-hackathon-june2023-930a8b0f895d",
										"herokuapp",
										"com"
									],
									"path": [
										"lms",
										"batche"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 23 Jun 2023 19:13:05 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
						}
					]
				},
				{
					"name": "Program_Batch_TC_051_without_Batch_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.message,\" No of Classes is needed; It should be a positive number \");\r",
									"    pm.expect(jsonResponse.success,\"false\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
									" })\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"batchId\": 0,\r\n        \"batchName\": \"  \",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{programId}},\r\n        \"programName\": {{programName}}\r\n\r\n        \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{createBatch}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{createBatch}}"
							]
						}
					},
					"response": [
						{
							"name": "New Request",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche",
									"protocol": "https",
									"host": [
										"lms-api-hackathon-june2023-930a8b0f895d",
										"herokuapp",
										"com"
									],
									"path": [
										"lms",
										"batche"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 23 Jun 2023 19:13:05 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
						}
					]
				},
				{
					"name": "Program_Batch_TC_051_without_Program_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.message,\" No of Classes is needed; It should be a positive number \");\r",
									"    pm.expect(jsonResponse.success,\"false\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
									" })\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"batchId\": 0,\r\n        \"batchName\": \"3168  \",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{programId}},\r\n        \"programName\": \"{{programName}}\"\r\n\r\n        \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{createBatch}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{createBatch}}"
							]
						}
					},
					"response": [
						{
							"name": "New Request",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche",
									"protocol": "https",
									"host": [
										"lms-api-hackathon-june2023-930a8b0f895d",
										"herokuapp",
										"com"
									],
									"path": [
										"lms",
										"batche"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 23 Jun 2023 19:13:05 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
						}
					]
				},
				{
					"name": "Program_Batch_TC_052_Invalid_Batch_status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.status,400);\r",
									"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"     \r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
									" })\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"batchId\": 0,\r\n        \"batchName\": \"{{batchName}}\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{invalidbatchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{programId}},\r\n        \"programName\": {{programName}}\r\n\r\n        \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{createBatch}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{createBatch}}"
							]
						}
					},
					"response": [
						{
							"name": "New Request",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche",
									"protocol": "https",
									"host": [
										"lms-api-hackathon-june2023-930a8b0f895d",
										"herokuapp",
										"com"
									],
									"path": [
										"lms",
										"batche"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 23 Jun 2023 19:13:05 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
						}
					]
				},
				{
					"name": "Program_Batch_TC_053_Empty_Program_Id/Program Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.status,400);\r",
									"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"     \r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse[3],schema))\r",
									" })\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"batchId\": 0,\r\n        \"batchName\": \"{{batchName}}\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{emptyProgramId}},\r\n        \"programName\": {{programName}}\r\n\r\n        \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{createBatch}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{createBatch}}"
							]
						}
					},
					"response": [
						{
							"name": "New Request",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche",
									"protocol": "https",
									"host": [
										"lms-api-hackathon-june2023-930a8b0f895d",
										"herokuapp",
										"com"
									],
									"path": [
										"lms",
										"batche"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 23 Jun 2023 19:13:05 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
						}
					]
				},
				{
					"name": "Program_Batch_TC_055_Invalid_Json_format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.status,400);\r",
									"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"     \r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
									" })\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n    \r\n    \"batchNamee\": \"Jun23-PostWomenTechies-SDET-100-100\",\r\n    \"batchDescription\": \"This Batch is for Postman Hackathon\",\r\n    \"batchStatus\": \"Active\",\r\n    \"batchNoOfClasses\": 10,\r\n    \"programId\": 3168,\r\n    \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n  }\r\n  ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{createBatch}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{createBatch}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PUT Batch - Update Batch",
			"item": [
				{
					"name": "Program_Batch_TC_056_82_83_Update Batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"    \r",
									"//validate Response body\r",
									"    pm.test(\"Validate Response body\", function() {\r",
									"        console.log(jsonResponse.batchId);\r",
									"        console.log(jsonResponse.batchName);\r",
									"        console.log(jsonResponse.batchDescription);\r",
									"        pm.expect(jsonResponse.batchId).to.eql(4140);\r",
									"        pm.expect(jsonResponse.batchName).to.eql(\"Jun23-PostWomenTechies-SDET-100\");\r",
									"        pm.expect(jsonResponse.batchDescription).to.eql(\"This program is for participating in API Hackathon\");\r",
									"        pm.expect(jsonResponse.batchNoOfClasses).to.eql(10);\r",
									"        pm.expect(jsonResponse.programId).to.eql(3168);\r",
									"        pm.expect(jsonResponse.programName).to.eql(\"Jun26-PostWomenTechies-SDET-100\");     \r",
									"})\r",
									"\r",
									"\r",
									" //validate response json schema\r",
									"var schema =  \r",
									" {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchDescription\",\r",
									"    \"batchStatus\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validate Schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema))\r",
									" })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{updateBatch}}",
								"{{updateBatchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_057_Update Multiple Batches",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.status,400);\r",
									"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"     \r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
									" })\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n[{\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-10\",\r\n  \"batchDescription\": \"This batch is for Postman hackathon\",\r\n  \"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n},\r\n\r\n {\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-10\",\r\n  \"batchDescription\": \"This batch is for Postman hackathon\",\r\n  \"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"programId\": 4140,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{updateBatch}}",
								"{{updateBatchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Data_Driven_Testing_Valid_data_from_CSV_file",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"    \r",
									"//validate Response body\r",
									"    pm.test(\"Validate Response body\", function() {\r",
									"        console.log(jsonResponse.batchId);\r",
									"        console.log(jsonResponse.batchName);\r",
									"        console.log(jsonResponse.batchDescription);\r",
									"        pm.expect(jsonResponse.batchId).to.eql(4140);\r",
									"        pm.expect(jsonResponse.batchName).to.eqls(\"Jun23-PostWomenTechies-SDET-100\");\r",
									"        pm.expect(jsonResponse.batchDescription).to.include(\"This program is for participating in API Hackathon\");\r",
									"        pm.expect(jsonResponse.batchNoOfClasses).to.eql(10);\r",
									"        pm.expect(jsonResponse.programId).to.eql(3168);\r",
									"        pm.expect(jsonResponse.programName).to.eql(\"Jun26-PostWomenTechies-SDET-100\");     \r",
									"})\r",
									"\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =  \r",
									" {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchDescription\",\r",
									"    \"batchStatus\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validate Schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema))\r",
									" })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "/*{\r\n        \"batchId\": {{updateBatchID}},\r\n        \"batchName\": \"{{updateBatchName}}\",\r\n        \"batchDescription\": \"{{BatchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{updateProgramId}},\r\n        \"programName\": {{programName}}\r\n        \r\n}*/\r\n\r\n{\r\n                \"batchId\": 4141,\r\n                \"batchName\": \"Jun23-PostWomenTechies-SDET-1001\",\r\n                \"batchDescription\": \"{{BatchDescription}}\",\r\n                \"batchStatus\": \"{{batchStatus}}\",\r\n                \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n                \"programId\": 3167,\r\n                \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n                \r\n        }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{updateBatch}}",
								"{{updateBatchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_059_Update_Multiple_Batch_in_requestbody",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.status,400);\r",
									"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"     \r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
									" })\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "/*{\r\n        \"batchId\": {{updateBatchId}},\r\n        \"batchName\": \"{{batchName}}\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{programId}},\r\n        \"programName\": {{programName}}\r\n        \r\n}*/\r\n\r\n[\r\n{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n},\r\n{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}\r\n]\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{updateBatch}}",
								"{{updateBatchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_060_Invalid_Batch_Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.status,400);\r",
									"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"     \r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
									" })\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n  \"batchId\": \"U3130\",\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchDescription\": \"This batch is for Postman hackathon\",\r\n  \"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{updateBatch}}",
								"{{updateBatchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_061_Non-Existing_Batch_Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"//random batchName serial number generation\r",
									"\r",
									"var random = Math.random().toString(36).substring(2);\r",
									"//batchName = Jun23-EliteForce-SDET-SDET01-001\r",
									"//Jun23-TeamName-ProgramName-BatchName-serialnumber \r",
									"/*var batchDescription = \"This batch is for Postman hackathon update-\"+random;\r",
									"pm.environment.set(\"batchDescription\",batchDescription)*/\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"    \r",
									"//validate Response body\r",
									"    pm.test(\"Validate Response body\", function() {\r",
									"        console.log(jsonResponse.batchId);\r",
									"        console.log(jsonResponse.batchName);\r",
									"        console.log(jsonResponse.batchDescription);\r",
									"        pm.expect(jsonResponse.batchId).to.not.eql(123123);\r",
									"        pm.expect(jsonResponse.batchName).to.eql(\"Jun23-PostWomenTechies-SDET-100\");\r",
									"        pm.expect(jsonResponse.batchDescription).to.eql(\"This batch is for Postman hackathon\");\r",
									"        pm.expect(jsonResponse.batchNoOfClasses).to.eql(10);\r",
									"        pm.expect(jsonResponse.programId).to.eql(3168);\r",
									"        pm.expect(jsonResponse.programName).to.eql(\"Jun26-PostWomenTechies-SDET-100\");     \r",
									"})\r",
									"\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =  \r",
									" {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchDescription\",\r",
									"    \"batchStatus\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validate Schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema))\r",
									" })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n  \"batchId\": \"123123\",\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchDescription\": \"This batch is for Postman hackathon\",\r\n  \"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{updateBatch}}",
								"{{updateBatchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_062_Batch_Id_in_Special_characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.status,400);\r",
									"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"     \r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
									" })\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n  \"batchId\": \"3130#\",\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchDescription\": \"This batch is for Postman hackathon\",\r\n  \"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{updateBatch}}",
								"{{updateBatchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_063_Batch_Id_in_Alphanumeric",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.status,400);\r",
									"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"     \r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
									" })\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n  \"batchId\": \"U3130\",\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchDescription\": \"This batch is for Postman hackathon\",\r\n  \"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{updateBatch}}",
								"{{updateBatchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_064_Without_Endpoints",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.status,404);\r",
									"    pm.expect(jsonResponse.error,\"Not Found\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"     \r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
									" })\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_065_Invalid_Endpoints",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.status,404);\r",
									"    pm.expect(jsonResponse.error,\"Not Found\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"     \r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
									" })\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n {\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-10\",\r\n  \"batchDescription\": \"This batch is for Postman hackathon\",\r\n  \"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{invalidEndpointGetAllBatches}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{invalidEndpointGetAllBatches}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_066_Invalid_Request_PUT_GET_DELETE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Due to application error displays XML code, response body validation cannot be done\");\r",
									"console.log(\"JSONError: Unexpected token '<' at 1:1<!DOCTYPE html>^\");\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.expect(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n {\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-10\",\r\n  \"batchDescription\": \"This batch is for Postman hackathon\",\r\n  \"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{updateBatch}}/{{invalidDelRequestBatch_Id}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{updateBatch}}",
								"{{invalidDelRequestBatch_Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_066_Invalid_Request_GET_POST_DELETE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code \r",
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Method Not Allowed\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.status,405);\r",
									"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"     \r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
									" })"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n    \r\n    \"batchNamee\": \"Jun23-PostWomenTechies-SDET-100-100\",\r\n    \"batchDescription\": \"This Batch is for Postman Hackathon\",\r\n    \"batchStatus\": \"Active\",\r\n    \"batchNoOfClasses\": 10,\r\n    \"programId\": 3168,\r\n    \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{updateBatch}}",
								"{{updateBatchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_066_Invalid_Request_GET_POST_DELETE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code \r",
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Method Not Allowed\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.status,405);\r",
									"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"     \r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
									" })"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n    \r\n    \"batchNamee\": \"Jun23-PostWomenTechies-SDET-100-100\",\r\n    \"batchDescription\": \"This Batch is for Postman Hackathon\",\r\n    \"batchStatus\": \"Active\",\r\n    \"batchNoOfClasses\": 10,\r\n    \"programId\": 3168,\r\n    \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{updateBatch}}",
								"{{updateBatchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_067_Invalid_baseURL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Due to application error displays XML code, response body message validation cannot be done\");\r",
									"console.log(\"JSONError: Unexpected token '<' at 1:1<!DOCTYPE html>^\");\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.expect(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{invalidBaseUrl}}",
							"host": [
								"{{invalidBaseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_068_non_existing_Program_Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    var environmentVar = pm.variables.get(\"programId\");\r",
									"    \r",
									"   pm.expect(jsonResponse.message,'Program not found with Id :' + environmentVar);\r",
									"    pm.expect(jsonResponse.success,\"false\")\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
									" })\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-10000-002\",\r\n  \"batchDescription\": \"This batch is for Postman hackathon\",\r\n  \"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"programId\": 23568923,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{updateBatch}}/{{nonExistingProgramId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{updateBatch}}",
								"{{nonExistingProgramId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_069_Without_Request_body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 415\", function () {\r",
									"    pm.response.to.have.status(415);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Unsupported Media Type\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.status,415);\r",
									"    pm.expect(jsonResponse.error,\"Unsupported Media Type\");\r",
									"})\r",
									"var schema =   \r",
									" {\r",
									"     \r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema))\r",
									" })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{updateBatch}}",
								"{{updateBatchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_070_Without_Batch_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.message,\"Batch Name is mandatory\");\r",
									"    pm.expect(jsonResponse.success,\"false\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
									" })\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  //\"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n  \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{updateBatch}}",
								"{{updateBatchId}}"
							]
						}
					},
					"response": [
						{
							"name": "New Request",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche",
									"protocol": "https",
									"host": [
										"lms-api-hackathon-june2023-930a8b0f895d",
										"herokuapp",
										"com"
									],
									"path": [
										"lms",
										"batche"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 23 Jun 2023 19:13:05 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
						}
					]
				},
				{
					"name": "Program_Batch_TC_071_Without_Batch_Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.status,400);\r",
									"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"     \r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema)).to.be.false\r",
									" })\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  //\"batchStatus\": \"Active\",\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n  \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{updateBatch}}",
								"{{updateBatchId}}"
							]
						}
					},
					"response": [
						{
							"name": "New Request",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche",
									"protocol": "https",
									"host": [
										"lms-api-hackathon-june2023-930a8b0f895d",
										"herokuapp",
										"com"
									],
									"path": [
										"lms",
										"batche"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 23 Jun 2023 19:13:05 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
						}
					]
				},
				{
					"name": "Program_Batch_TC_072_Without_Batch_No_Of_Classes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.message,\" No of Classes is needed; It should be a positive number \");\r",
									"    pm.expect(jsonResponse.success,\"false\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
									" })\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  //\"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n  \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{updateBatch}}",
								"{{updateBatchId}}"
							]
						}
					},
					"response": [
						{
							"name": "New Request",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche",
									"protocol": "https",
									"host": [
										"lms-api-hackathon-june2023-930a8b0f895d",
										"herokuapp",
										"com"
									],
									"path": [
										"lms",
										"batche"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 23 Jun 2023 19:13:05 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
						}
					]
				},
				{
					"name": "Program_Batch_TC_073_Without_Program_Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.message,\" ProgramId field is needed; It should be a positive number \");\r",
									"    pm.expect(jsonResponse.success,\"false\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
									" })\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  //\"programId\": 3168\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{updateBatch}}",
								"{{updateBatchId}}"
							]
						}
					},
					"response": [
						{
							"name": "New Request",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche",
									"protocol": "https",
									"host": [
										"lms-api-hackathon-june2023-930a8b0f895d",
										"herokuapp",
										"com"
									],
									"path": [
										"lms",
										"batche"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 23 Jun 2023 19:13:05 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
						}
					]
				},
				{
					"name": "Program_Batch_TC_074_Batch_No_Of_Classes_as_zero",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.message,\"Program not found with Id : \" + pm.variables.get(\"programID\")+\" \");\r",
									"    pm.expect(jsonResponse.success,\"false\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema))\r",
									" })\r",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 0,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100-update\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{updateBatch}}",
								"{{updateBatchId}}"
							]
						}
					},
					"response": [
						{
							"name": "New Request",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche",
									"protocol": "https",
									"host": [
										"lms-api-hackathon-june2023-930a8b0f895d",
										"herokuapp",
										"com"
									],
									"path": [
										"lms",
										"batche"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 23 Jun 2023 19:13:05 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
						}
					]
				},
				{
					"name": "Program_Batch_TC_075_Negative_value_Batch_No_Of_Classes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{updateBatch}}",
								"{{updateBatchId}}"
							]
						}
					},
					"response": [
						{
							"name": "New Request",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche",
									"protocol": "https",
									"host": [
										"lms-api-hackathon-june2023-930a8b0f895d",
										"herokuapp",
										"com"
									],
									"path": [
										"lms",
										"batche"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 23 Jun 2023 19:13:05 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
						}
					]
				},
				{
					"name": "Program_Batch_TC_076_Without_Batch_Description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"    \r",
									"//validate Response body\r",
									"    pm.test(\"Validate Response body\", function() {\r",
									"        console.log(jsonResponse.batchId);\r",
									"        console.log(jsonResponse.batchName);\r",
									"        console.log(jsonResponse.batchDescription);\r",
									"        pm.expect(jsonResponse.batchId).to.eql(4140);\r",
									"        pm.expect(jsonResponse.batchName).to.eql(\"Jun23-PostWomenTechies-SDET-100\");\r",
									"        pm.expect(jsonResponse.batchDescription).to.eql(null);\r",
									"        pm.expect(jsonResponse.batchNoOfClasses).to.eql(10);\r",
									"        pm.expect(jsonResponse.programId).to.eql(3168);\r",
									"        //pm.expect(jsonResponse.programName).to.eql(\"Jun26-PostWomenTechies-SDET-100\");     \r",
									"})\r",
									"\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =  \r",
									" {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchDescription\",\r",
									"    \"batchStatus\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validate Schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema))\r",
									" })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  //\"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n  \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{updateBatch}}",
								"{{updateBatchId}}"
							]
						}
					},
					"response": [
						{
							"name": "Program_Batch_TC_076_Without_Batch_Description",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  //\"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n  \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{updateBatch}}",
										"{{updateBatchId}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Tue, 27 Jun 2023 13:39:14 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"batchId\": 3130,\n    \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\n    \"batchDescription\": null,\n    \"batchStatus\": \"Active\",\n    \"batchNoOfClasses\": 10,\n    \"programId\": 3168,\n    \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\n}"
						}
					]
				},
				{
					"name": "Program_Batch_TC_077_Program_Id_as_zero_negative_value_incorrectValue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.message,\"Program not found with Id : \" + pm.variables.get(\"programID\")+\" \");\r",
									"    pm.expect(jsonResponse.success,\"false\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema))\r",
									" })\r",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": -10,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100-update\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{updateBatch}}",
								"{{updateBatchId}}"
							]
						}
					},
					"response": [
						{
							"name": "Program_Batch_TC_077_Program_Id_as_zero_negative_value",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": -3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100-update\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{updateBatch}}",
										"{{updateBatchId}}"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Tue, 27 Jun 2023 14:04:07 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Program not found with Id : -3168 \",\n    \"success\": false\n}"
						}
					]
				},
				{
					"name": "Program_Batch_TC_78_Empty_Batch_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.message,\"Batch Name is mandatory\");\r",
									"    pm.expect(jsonResponse.success,\"false\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
									" })\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \" \",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 0,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100-update\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{updateBatch}}",
								"{{updateBatchId}}"
							]
						}
					},
					"response": [
						{
							"name": "New Request",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche",
									"protocol": "https",
									"host": [
										"lms-api-hackathon-june2023-930a8b0f895d",
										"herokuapp",
										"com"
									],
									"path": [
										"lms",
										"batche"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 23 Jun 2023 19:13:05 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
						}
					]
				},
				{
					"name": "Program_Batch_TC_079_Empty_Batch_status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.message,\"Batch Name is mandatory\");\r",
									"    pm.expect(jsonResponse.success,\"false\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
									" })\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \" \",\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{updateBatch}}",
								"{{updateBatchId}}"
							]
						}
					},
					"response": [
						{
							"name": "New Request",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche",
									"protocol": "https",
									"host": [
										"lms-api-hackathon-june2023-930a8b0f895d",
										"herokuapp",
										"com"
									],
									"path": [
										"lms",
										"batche"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 23 Jun 2023 19:13:05 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
						}
					]
				},
				{
					"name": "Program_Batch_TC_080_Empty_Batch_Description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.message,\"Batch status is needed\");\r",
									"    pm.expect(jsonResponse.success,\"false\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
									" })\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \" \",\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{updateBatch}}",
								"{{updateBatchId}}"
							]
						}
					},
					"response": [
						{
							"name": "New Request",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche",
									"protocol": "https",
									"host": [
										"lms-api-hackathon-june2023-930a8b0f895d",
										"herokuapp",
										"com"
									],
									"path": [
										"lms",
										"batche"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 23 Jun 2023 19:13:05 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
						}
					]
				},
				{
					"name": "Program_Batch_TC_081_Invalid_Json_format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.status,400);\r",
									"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"     \r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
									" })\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n    \r\n    \"batchNamee\": \"Jun23-PostWomenTechies-SDET-100-100\",\r\n    \"batchDescription\": \"This Batch is for Postman Hackathon\",\r\n    \"batchStatus\": \"Active\",\r\n    \"batchNoOfClasses\": 10,\r\n    \"programId\": 3168,\r\n    \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n  }\r\n  ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{updateBatch}}",
								"{{updateBatchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_084_Without_Program_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"    \r",
									"//validate Response body\r",
									"    pm.test(\"Validate Response body\", function() {\r",
									"        console.log(jsonResponse.batchId);\r",
									"        console.log(jsonResponse.batchName);\r",
									"        console.log(jsonResponse.batchDescription);\r",
									"        pm.expect(jsonResponse.batchId).to.eql(4140);\r",
									"        pm.expect(jsonResponse.batchName).to.eql(\"Jun23-PostWomenTechies-SDET-100\");\r",
									"        pm.expect(jsonResponse.batchDescription).to.eql(\"This program is for participating in API Hackathon\");\r",
									"        pm.expect(jsonResponse.batchNoOfClasses).to.eql(10);\r",
									"        pm.expect(jsonResponse.programId).to.eql(3168);\r",
									"        pm.expect(jsonResponse.programName).to.eql(\"Jun26-PostWomenTechies-SDET-100\").to.not.match;;     \r",
									"})\r",
									"\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =  \r",
									" {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchDescription\",\r",
									"    \"batchStatus\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validate Schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema))\r",
									" })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 3168\r\n  //\"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{updateBatch}}",
								"{{updateBatchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_085_Update_Program_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"    \r",
									"//validate Response body\r",
									"    pm.test(\"Validate Response body\", function() {\r",
									"        console.log(jsonResponse.batchId);\r",
									"        console.log(jsonResponse.batchName);\r",
									"        console.log(jsonResponse.batchDescription);\r",
									"        console.log(jsonResponse.programName);\r",
									"        pm.expect(jsonResponse.batchId).to.eql(4140);\r",
									"        pm.expect(jsonResponse.batchName).to.eql(\"Jun23-PostWomenTechies-SDET-100\");\r",
									"        pm.expect(jsonResponse.batchDescription).to.eql(\"This program is for participating in API Hackathon\");\r",
									"        pm.expect(jsonResponse.batchNoOfClasses).to.eql(10);\r",
									"        pm.expect(jsonResponse.programId).to.eql(3168);\r",
									"        console.log(jsonResponse.programId)\r",
									"        pm.expect(jsonResponse.programName,\"Jun26-PostWomenTechies-SDET-100-update\").to.not.match;\r",
									"})\r",
									"\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =  \r",
									" {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchDescription\",\r",
									"    \"batchStatus\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validate Schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema))\r",
									" })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100-update\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{updateBatch}}",
								"{{updateBatchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_081_Invalid_Json_format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.status,400);\r",
									"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"     \r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
									" })\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n    \r\n    \"batchNamee\": \"Jun23-PostWomenTechies-SDET-100-100\",\r\n    \"batchDescription\": \"This Batch is for Postman Hackathon\",\r\n    \"batchStatus\": \"Active\",\r\n    \"batchNoOfClasses\": 10,\r\n    \"programId\": 3168,\r\n    \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n  }\r\n  ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{updateBatch}}",
								"{{updateBatchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_073_Without_Program_Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.message,\" ProgramId field is needed; It should be a positive number \");\r",
									"    pm.expect(jsonResponse.success,\"false\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
									" })\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  //\"programId\": 3168\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{updateBatch}}",
								"{{updateBatchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_084_Without_Program_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"    \r",
									"//validate Response body\r",
									"    pm.test(\"Validate Response body\", function() {\r",
									"        console.log(jsonResponse.batchId);\r",
									"        console.log(jsonResponse.batchName);\r",
									"        console.log(jsonResponse.batchDescription);\r",
									"        pm.expect(jsonResponse.batchId).to.eql(4140);\r",
									"        pm.expect(jsonResponse.batchName).to.eql(\"Jun23-PostWomenTechies-SDET-100\");\r",
									"        pm.expect(jsonResponse.batchDescription).to.eql(\"This program is for participating in API Hackathon\");\r",
									"        pm.expect(jsonResponse.batchNoOfClasses).to.eql(10);\r",
									"        pm.expect(jsonResponse.programId).to.eql(3168);\r",
									"        pm.expect(jsonResponse.programName).to.eql(\"Jun26-PostWomenTechies-SDET-100\").to.not.match;;     \r",
									"})\r",
									"\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =  \r",
									" {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchDescription\",\r",
									"    \"batchStatus\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validate Schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema))\r",
									" })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 3168\r\n  //\"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{updateBatch}}",
								"{{updateBatchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_081_Invalid_Json_format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.status,400);\r",
									"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"     \r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
									" })\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n    \r\n    \"batchNamee\": \"Jun23-PostWomenTechies-SDET-100-100\",\r\n    \"batchDescription\": \"This Batch is for Postman Hackathon\",\r\n    \"batchStatus\": \"Active\",\r\n    \"batchNoOfClasses\": 10,\r\n    \"programId\": 3168,\r\n    \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n  }\r\n  ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{updateBatch}}",
								"{{updateBatchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_061_Non-Existing_Batch_Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"//random batchName serial number generation\r",
									"\r",
									"var random = Math.random().toString(36).substring(2);\r",
									"//batchName = Jun23-EliteForce-SDET-SDET01-001\r",
									"//Jun23-TeamName-ProgramName-BatchName-serialnumber \r",
									"/*var batchDescription = \"This batch is for Postman hackathon update-\"+random;\r",
									"pm.environment.set(\"batchDescription\",batchDescription)*/\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"    \r",
									"//validate Response body\r",
									"    pm.test(\"Validate Response body\", function() {\r",
									"        console.log(jsonResponse.batchId);\r",
									"        console.log(jsonResponse.batchName);\r",
									"        console.log(jsonResponse.batchDescription);\r",
									"        pm.expect(jsonResponse.batchId).to.not.eql(123123);\r",
									"        pm.expect(jsonResponse.batchName).to.eql(\"Jun23-PostWomenTechies-SDET-100\");\r",
									"        pm.expect(jsonResponse.batchDescription).to.eql(\"This batch is for Postman hackathon\");\r",
									"        pm.expect(jsonResponse.batchNoOfClasses).to.eql(10);\r",
									"        pm.expect(jsonResponse.programId).to.eql(3168);\r",
									"        pm.expect(jsonResponse.programName).to.eql(\"Jun26-PostWomenTechies-SDET-100\");     \r",
									"})\r",
									"\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =  \r",
									" {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchDescription\",\r",
									"    \"batchStatus\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validate Schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema))\r",
									" })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n  \"batchId\": \"123123\",\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchDescription\": \"This batch is for Postman hackathon\",\r\n  \"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{updateBatch}}",
								"{{updateBatchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_074_Batch_No_Of_Classes_as_zero",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.message,\"Program not found with Id : \" + pm.variables.get(\"programID\")+\" \");\r",
									"    pm.expect(jsonResponse.success,\"false\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema))\r",
									" })\r",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 0,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100-update\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{updateBatch}}",
								"{{updateBatchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_080_Empty_Batch_Description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.message,\"Batch status is needed\");\r",
									"    pm.expect(jsonResponse.success,\"false\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
									" })\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \" \",\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{updateBatch}}",
								"{{updateBatchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_075_Negative_value_Batch_No_Of_Classes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{updateBatch}}",
								"{{updateBatchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_78_Empty_Batch_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.message,\"Batch Name is mandatory\");\r",
									"    pm.expect(jsonResponse.success,\"false\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
									" })\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \" \",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 0,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100-update\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{updateBatch}}",
								"{{updateBatchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_069_Without_Request_body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 415\", function () {\r",
									"    pm.response.to.have.status(415);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Unsupported Media Type\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.status,415);\r",
									"    pm.expect(jsonResponse.error,\"Unsupported Media Type\");\r",
									"})\r",
									"var schema =   \r",
									" {\r",
									"     \r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema))\r",
									" })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{updateBatch}}",
								"{{updateBatchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_079_Empty_Batch_status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.message,\"Batch Name is mandatory\");\r",
									"    pm.expect(jsonResponse.success,\"false\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
									" })\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \" \",\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{updateBatch}}",
								"{{updateBatchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_064_Without_Endpoints",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.status,404);\r",
									"    pm.expect(jsonResponse.error,\"Not Found\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"     \r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
									" })\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_066_Invalid_Request_GET_POST_DELETE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code \r",
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Method Not Allowed\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.status,405);\r",
									"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"     \r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
									" })"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n    \r\n    \"batchNamee\": \"Jun23-PostWomenTechies-SDET-100-100\",\r\n    \"batchDescription\": \"This Batch is for Postman Hackathon\",\r\n    \"batchStatus\": \"Active\",\r\n    \"batchNoOfClasses\": 10,\r\n    \"programId\": 3168,\r\n    \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{updateBatch}}",
								"{{updateBatchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_081_Invalid_Json_format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.status,400);\r",
									"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"     \r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
									" })\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n    \r\n    \"batchNamee\": \"Jun23-PostWomenTechies-SDET-100-100\",\r\n    \"batchDescription\": \"This Batch is for Postman Hackathon\",\r\n    \"batchStatus\": \"Active\",\r\n    \"batchNoOfClasses\": 10,\r\n    \"programId\": 3168,\r\n    \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n  }\r\n  ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{updateBatch}}",
								"{{updateBatchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_085_Update_Program_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"    \r",
									"//validate Response body\r",
									"    pm.test(\"Validate Response body\", function() {\r",
									"        console.log(jsonResponse.batchId);\r",
									"        console.log(jsonResponse.batchName);\r",
									"        console.log(jsonResponse.batchDescription);\r",
									"        console.log(jsonResponse.programName);\r",
									"        pm.expect(jsonResponse.batchId).to.eql(4140);\r",
									"        pm.expect(jsonResponse.batchName).to.eql(\"Jun23-PostWomenTechies-SDET-100\");\r",
									"        pm.expect(jsonResponse.batchDescription).to.eql(\"This program is for participating in API Hackathon\");\r",
									"        pm.expect(jsonResponse.batchNoOfClasses).to.eql(10);\r",
									"        pm.expect(jsonResponse.programId).to.eql(3168);\r",
									"        console.log(jsonResponse.programId)\r",
									"        pm.expect(jsonResponse.programName,\"Jun26-PostWomenTechies-SDET-100-update\").to.not.match;\r",
									"})\r",
									"\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =  \r",
									" {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchDescription\",\r",
									"    \"batchStatus\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validate Schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema))\r",
									" })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100-update\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{updateBatch}}",
								"{{updateBatchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_076_Without_Batch_Description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"    \r",
									"//validate Response body\r",
									"    pm.test(\"Validate Response body\", function() {\r",
									"        console.log(jsonResponse.batchId);\r",
									"        console.log(jsonResponse.batchName);\r",
									"        console.log(jsonResponse.batchDescription);\r",
									"        pm.expect(jsonResponse.batchId).to.eql(4140);\r",
									"        pm.expect(jsonResponse.batchName).to.eql(\"Jun23-PostWomenTechies-SDET-100\");\r",
									"        pm.expect(jsonResponse.batchDescription).to.eql(null);\r",
									"        pm.expect(jsonResponse.batchNoOfClasses).to.eql(10);\r",
									"        pm.expect(jsonResponse.programId).to.eql(3168);\r",
									"        //pm.expect(jsonResponse.programName).to.eql(\"Jun26-PostWomenTechies-SDET-100\");     \r",
									"})\r",
									"\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =  \r",
									" {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchDescription\",\r",
									"    \"batchStatus\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validate Schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema))\r",
									" })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  //\"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n  \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{updateBatch}}",
								"{{updateBatchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_066_Invalid_Request_PUT_GET_DELETE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Due to application error displays XML code, response body validation cannot be done\");\r",
									"console.log(\"JSONError: Unexpected token '<' at 1:1<!DOCTYPE html>^\");\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.expect(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n {\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-10\",\r\n  \"batchDescription\": \"This batch is for Postman hackathon\",\r\n  \"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{updateBatch}}/{{invalidDelRequestBatch_Id}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{updateBatch}}",
								"{{invalidDelRequestBatch_Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_077_Program_Id_as_zero_negative_value_incorrectValue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.message,\"Program not found with Id : \" + pm.variables.get(\"programID\")+\" \");\r",
									"    pm.expect(jsonResponse.success,\"false\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema))\r",
									" })\r",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": -10,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100-update\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{updateBatch}}",
								"{{updateBatchId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DELETE Batch",
			"item": [
				{
					"name": "Program_Batch_TC_087_Delete Batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									" //validating the response body\r",
									"var jsonResponse = pm.response.json();\r",
									"pm.test(\"Validating the data of the response body\",() => {\r",
									"   // pm.expect(jsonData.message).to.eql(\"Batch with deleted successfully\");\r",
									"    pm.expect(jsonData.success).to.eql(true);\r",
									"    \r",
									"});\r",
									"\r",
									"\r",
									"//validating the JSON schema\r",
									"var jsonData = pm.response.json();\r",
									"var schema =\r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validating schema\", function() {\r",
									"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
									"});   \r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/{{delEndPoint}}/{{createdBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{delEndPoint}}",
								"{{createdBatchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_088_89_90_091_92_93_Non_Existing_Batch_Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Due to application error displays XML code, response body message validation cannot be done\");\r",
									"console.log(\"JSONError: Unexpected token '<' at 1:1<!DOCTYPE html>^\");\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.expect(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/{{delEndPoint1}}/{{alreadyDelBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{delEndPoint1}}",
								"{{alreadyDelBatchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_094_Batch_Id_in_Special_characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code \r",
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Method Not Allowed\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.status,405);\r",
									"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"     \r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
									" })"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/{{delEndPoint1}}/{{InvalidSpecialCharBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{delEndPoint1}}",
								"{{InvalidSpecialCharBatchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_095_Batch_Id_in_Alphanumeric",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.message,\"Batch Name is mandatory\");\r",
									"    pm.expect(jsonResponse.success,\"false\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema)).to.be.false\r",
									" })\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/{{delEndPoint1}}/{{InvalidAlphanumericBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{delEndPoint1}}",
								"{{InvalidAlphanumericBatchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_096_98_Without_Endpoints",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code \r",
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Method Not Allowed\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.status,405);\r",
									"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"     \r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema))\r",
									" })"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/{{delEndPoint1}}/",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{delEndPoint1}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_097_Invalid_Endpoints",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.status,404);\r",
									"    pm.expect(jsonResponse.error,\"Not Found\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"     \r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema))\r",
									" })\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/{{invalidEndpointGetAllBatches}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{invalidEndpointGetAllBatches}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_099_Invalid_Request_GET_POST_PUT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code \r",
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Method Not Allowed\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.status,405);\r",
									"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"     \r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
									" })"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/{{delEndPoint1}}/{{delBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{delEndPoint1}}",
								"{{delBatchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_094_095_099_Invalid_Request_GET_POST_PUT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code \r",
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Method Not Allowed\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.status,405);\r",
									"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"     \r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
									" })"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/{{delEndPoint1}}/{{delBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{delEndPoint1}}",
								"{{delBatchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_099_Invalid_Request_GET_POST_PUT Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code \r",
									"pm.test(\"Status code is 415\", function () {\r",
									"    pm.response.to.have.status(415);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Unsupported Media Type\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"//validate response body\r",
									"pm.test(\"Validate response body\", function(){\r",
									"    pm.expect(jsonResponse.status,415);\r",
									"    pm.expect(jsonResponse.error,\"Unsupported Media Type\");\r",
									"})\r",
									"\r",
									" //validate response json schema\r",
									"//Using json to json schema converter\r",
									"var schema =   \r",
									" {\r",
									"     \r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"//validate schema \r",
									"pm.test(\"Validate schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
									" })"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/{{delEndPoint1}}/{{delBatchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{delEndPoint1}}",
								"{{delBatchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program_Batch_TC_100_Invalid_baseURL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Due to application error displays XML code, response body validation cannot be done\");\r",
									"console.log(\"JSONError: Unexpected token '<' at 1:1<!DOCTYPE html>^\");\r",
									"\r",
									"//validate status code \r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"//validate status message\r",
									"pm.test(\"Status code name has string\", function() {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"//validate response header - Content-type\r",
									"pm.test(\"Content-type is application/json\",function(){\r",
									"     pm.expect(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{invalidBaseUrl}}",
							"host": [
								"{{invalidBaseUrl}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}