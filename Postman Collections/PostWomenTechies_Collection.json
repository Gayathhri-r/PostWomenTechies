{
	"info": {
		"_postman_id": "35867b11-1125-42b3-a0a2-f793ee689912",
		"name": "Team18-PostWomen-Techies-API-Hackathon-2023",
		"description": "<div class=\"postman-run-button\"\ndata-postman-action=\"collection/fork\"\ndata-postman-visibility=\"private\"\ndata-postman-var-1=\"28069049-35867b11-1125-42b3-a0a2-f793ee689912\"\ndata-postman-collection-url=\"entityId=28069049-35867b11-1125-42b3-a0a2-f793ee689912&entityType=collection&workspaceId=75bf3eff-9272-4023-8ada-ff5931da7a35\"></div>\n<script type=\"text/javascript\">\n  (function (p,o,s,t,m,a,n) {\n    !p[s] && (p[s] = function () { (p[t] || (p[t] = [])).push(arguments); });\n    !o.getElementById(s+t) && o.getElementsByTagName(\"head\")[0].appendChild((\n      (n = o.createElement(\"script\")),\n      (n.id = s+t), (n.async = 1), (n.src = m), n\n    ));\n  }(window, document, \"_pm\", \"PostmanRunObject\", \"https://run.pstmn.io/button.js\"));\n</script>",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Program Module",
			"item": [
				{
					"name": "Post Program",
					"item": [
						{
							"name": "Post Program-10_Program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e046177d-93de-449d-b914-90cd4d83bce3",
										"exec": [
											"//Valiate status Code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//Validate status message\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\")\r",
											"});\r",
											"\r",
											"//Validate response header - Content-Type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//Validate response body\r",
											"    pm.test(\"Validate response body\", function(){\r",
											"        //pm.expect(jsonResponse.programId,pm.environment.get(programId));\r",
											"        pm.expect(jsonResponse.programName,pm.environment.get(\"Jun23-PostWomenTechies-SDET-AP12\"));\r",
											"        pm.expect(jsonResponse.programDescription,pm.environment.get(\"selenium\"));\r",
											"        pm.expect(jsonResponse.programStatus,pm.environment.get(\"Active\"));\r",
											"       // pm.expect(jsonResponse.creationTime,pm.environment.get(creationTime));\r",
											"       // pm.expect(jsonResponse.lastModTime,pm.environment.get(lastModTime));\r",
											"    })\r",
											"\r",
											"//Validate response json Schema\r",
											"//using json to json Schema converter\r",
											"\r",
											"var schema=\r",
											"{\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"Type\":\"Object\",\r",
											"    \"properties\": {\r",
											"        //\"programId\": {\r",
											"           // \"type\": \"integer\"\r",
											"        //},\r",
											"        \"programName\": {\r",
											"            \"type\": \"string\"\r",
											"        },    \r",
											"        \"programDescription\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"programStatus\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        //\"creationTime\": {\r",
											"            //\"type\": \"integer\"\r",
											"        //},\r",
											"        //\"lastModTime\": {\r",
											"            //\"type\": \"integer\"\r",
											"        //}\r",
											"    },\r",
											"    \"required\" :[\r",
											"        //\"programId\",\r",
											"        \"programName\",\r",
											"        \"programDescription\",\r",
											"        \"programStatus\"\r",
											"        //\"creationTime\",\r",
											"        //\"lastModTime\"\r",
											"    ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"    //using tv4 validatroty library and validate method\r",
											"    pm.expect(tv4.validate(jsonResponse[0],schema)).to.be.true\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"    \r",
											"\r",
											"\r",
											"    \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c5b09c04-4b6a-4444-be1f-6b5fe59e864a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"Selenium\",\r\n  \"programName\": \"Jun23-PostWomenTechies-SDET-101-T-0.#10\",\r\n   \"programStatus\": \"InProgress\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/saveprogram",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"saveprogram"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Program_3rd_Program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e046177d-93de-449d-b914-90cd4d83bce3",
										"exec": [
											"//Valiate status Code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//Validate status message\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\")\r",
											"});\r",
											"\r",
											"//Validate response header - Content-Type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//Validate response body\r",
											"    pm.test(\"Validate response body\", function(){\r",
											"        //pm.expect(jsonResponse.programId,pm.environment.get(programId));\r",
											"        pm.expect(jsonResponse.programName,pm.environment.get(\"Jun23-PostWomenTechies-SDET-AP12\"));\r",
											"        pm.expect(jsonResponse.programDescription,pm.environment.get(\"selenium\"));\r",
											"        pm.expect(jsonResponse.programStatus,pm.environment.get(\"Active\"));\r",
											"       // pm.expect(jsonResponse.creationTime,pm.environment.get(creationTime));\r",
											"       // pm.expect(jsonResponse.lastModTime,pm.environment.get(lastModTime));\r",
											"    })\r",
											"\r",
											"//Validate response json Schema\r",
											"//using json to json Schema converter\r",
											"\r",
											"var schema=\r",
											"{\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"Type\":\"Object\",\r",
											"    \"properties\": {\r",
											"        //\"programId\": {\r",
											"           // \"type\": \"integer\"\r",
											"        //},\r",
											"        \"programName\": {\r",
											"            \"type\": \"string\"\r",
											"        },    \r",
											"        \"programDescription\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"programStatus\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        //\"creationTime\": {\r",
											"            //\"type\": \"integer\"\r",
											"        //},\r",
											"        //\"lastModTime\": {\r",
											"            //\"type\": \"integer\"\r",
											"        //}\r",
											"    },\r",
											"    \"required\" :[\r",
											"        //\"programId\",\r",
											"        \"programName\",\r",
											"        \"programDescription\",\r",
											"        \"programStatus\"\r",
											"        //\"creationTime\",\r",
											"        //\"lastModTime\"\r",
											"    ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"    //using tv4 validatroty library and validate method\r",
											"    pm.expect(tv4.validate(jsonResponse[0],schema)).to.be.true\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"    \r",
											"\r",
											"\r",
											"    \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "609861c2-fed1-4ef4-a3dc-74468f6d9c31",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"Selenium\",\r\n  \"programName\": \"Jun23-PostWomenTechies-SDET-101-T-0.#3\",\r\n  \"programStatus\": \"InProgress\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/saveprogram",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"saveprogram"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Program_4th_Program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e046177d-93de-449d-b914-90cd4d83bce3",
										"exec": [
											"//Valiate status Code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//Validate status message\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\")\r",
											"});\r",
											"\r",
											"//Validate response header - Content-Type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//Validate response body\r",
											"    pm.test(\"Validate response body\", function(){\r",
											"        //pm.expect(jsonResponse.programId,pm.environment.get(programId));\r",
											"        pm.expect(jsonResponse.programName,pm.environment.get(\"Jun23-PostWomenTechies-SDET-AP12\"));\r",
											"        pm.expect(jsonResponse.programDescription,pm.environment.get(\"selenium\"));\r",
											"        pm.expect(jsonResponse.programStatus,pm.environment.get(\"Active\"));\r",
											"       // pm.expect(jsonResponse.creationTime,pm.environment.get(creationTime));\r",
											"       // pm.expect(jsonResponse.lastModTime,pm.environment.get(lastModTime));\r",
											"    })\r",
											"\r",
											"//Validate response json Schema\r",
											"//using json to json Schema converter\r",
											"\r",
											"var schema=\r",
											"{\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"Type\":\"Object\",\r",
											"    \"properties\": {\r",
											"        //\"programId\": {\r",
											"           // \"type\": \"integer\"\r",
											"        //},\r",
											"        \"programName\": {\r",
											"            \"type\": \"string\"\r",
											"        },    \r",
											"        \"programDescription\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"programStatus\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        //\"creationTime\": {\r",
											"            //\"type\": \"integer\"\r",
											"        //},\r",
											"        //\"lastModTime\": {\r",
											"            //\"type\": \"integer\"\r",
											"        //}\r",
											"    },\r",
											"    \"required\" :[\r",
											"        //\"programId\",\r",
											"        \"programName\",\r",
											"        \"programDescription\",\r",
											"        \"programStatus\"\r",
											"        //\"creationTime\",\r",
											"        //\"lastModTime\"\r",
											"    ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"    //using tv4 validatroty library and validate method\r",
											"    pm.expect(tv4.validate(jsonResponse[0],schema)).to.be.true\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"    \r",
											"\r",
											"\r",
											"    \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "af5929a2-cc00-448a-b0a2-98ed2b1d61ab",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \r\n    \"programName\": \"Jun23-PostWomenTechies-SDET-101-T-0.#4\",\r\n    \"programDescription\": \"Selenium\",\r\n    \"programStatus\": \"InProgress\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/saveprogram",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"saveprogram"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Program_5th_Program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e046177d-93de-449d-b914-90cd4d83bce3",
										"exec": [
											"//Valiate status Code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//Validate status message\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\")\r",
											"});\r",
											"\r",
											"//Validate response header - Content-Type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//Validate response body\r",
											"    pm.test(\"Validate response body\", function(){\r",
											"        //pm.expect(jsonResponse.programId,pm.environment.get(programId));\r",
											"        pm.expect(jsonResponse.programName,pm.environment.get(\"Jun23-PostWomenTechies-SDET-AP12\"));\r",
											"        pm.expect(jsonResponse.programDescription,pm.environment.get(\"selenium\"));\r",
											"        pm.expect(jsonResponse.programStatus,pm.environment.get(\"Active\"));\r",
											"       // pm.expect(jsonResponse.creationTime,pm.environment.get(creationTime));\r",
											"       // pm.expect(jsonResponse.lastModTime,pm.environment.get(lastModTime));\r",
											"    })\r",
											"\r",
											"//Validate response json Schema\r",
											"//using json to json Schema converter\r",
											"\r",
											"var schema=\r",
											"{\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"Type\":\"Object\",\r",
											"    \"properties\": {\r",
											"        //\"programId\": {\r",
											"           // \"type\": \"integer\"\r",
											"        //},\r",
											"        \"programName\": {\r",
											"            \"type\": \"string\"\r",
											"        },    \r",
											"        \"programDescription\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"programStatus\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        //\"creationTime\": {\r",
											"            //\"type\": \"integer\"\r",
											"        //},\r",
											"        //\"lastModTime\": {\r",
											"            //\"type\": \"integer\"\r",
											"        //}\r",
											"    },\r",
											"    \"required\" :[\r",
											"        //\"programId\",\r",
											"        \"programName\",\r",
											"        \"programDescription\",\r",
											"        \"programStatus\"\r",
											"        //\"creationTime\",\r",
											"        //\"lastModTime\"\r",
											"    ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"    //using tv4 validatroty library and validate method\r",
											"    pm.expect(tv4.validate(jsonResponse[0],schema)).to.be.true\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"    \r",
											"\r",
											"\r",
											"    \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "94b1fc74-41ec-4800-9710-5dcc59e1725b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \r\n    \"programName\": \"Jun23-PostWomenTechies-SDET-101-T-0.#5\",\r\n    \"programDescription\": \"Selenium\",\r\n    \"programStatus\": \"InProgress\"\r\n    \r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/saveprogram",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"saveprogram"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Program_6th_Program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e046177d-93de-449d-b914-90cd4d83bce3",
										"exec": [
											"//Valiate status Code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//Validate status message\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\")\r",
											"});\r",
											"\r",
											"//Validate response header - Content-Type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//Validate response body\r",
											"    pm.test(\"Validate response body\", function(){\r",
											"        //pm.expect(jsonResponse.programId,pm.environment.get(programId));\r",
											"        pm.expect(jsonResponse.programName,pm.environment.get(\"Jun23-PostWomenTechies-SDET-AP12\"));\r",
											"        pm.expect(jsonResponse.programDescription,pm.environment.get(\"selenium\"));\r",
											"        pm.expect(jsonResponse.programStatus,pm.environment.get(\"Active\"));\r",
											"       // pm.expect(jsonResponse.creationTime,pm.environment.get(creationTime));\r",
											"       // pm.expect(jsonResponse.lastModTime,pm.environment.get(lastModTime));\r",
											"    })\r",
											"\r",
											"//Validate response json Schema\r",
											"//using json to json Schema converter\r",
											"\r",
											"var schema=\r",
											"{\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"Type\":\"Object\",\r",
											"    \"properties\": {\r",
											"        //\"programId\": {\r",
											"           // \"type\": \"integer\"\r",
											"        //},\r",
											"        \"programName\": {\r",
											"            \"type\": \"string\"\r",
											"        },    \r",
											"        \"programDescription\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"programStatus\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        //\"creationTime\": {\r",
											"            //\"type\": \"integer\"\r",
											"        //},\r",
											"        //\"lastModTime\": {\r",
											"            //\"type\": \"integer\"\r",
											"        //}\r",
											"    },\r",
											"    \"required\" :[\r",
											"        //\"programId\",\r",
											"        \"programName\",\r",
											"        \"programDescription\",\r",
											"        \"programStatus\"\r",
											"        //\"creationTime\",\r",
											"        //\"lastModTime\"\r",
											"    ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"    //using tv4 validatroty library and validate method\r",
											"    pm.expect(tv4.validate(jsonResponse[0],schema)).to.be.true\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"    \r",
											"\r",
											"\r",
											"    \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "09e579c8-ef59-447b-be64-8d83123f9195",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \r\n    \"programName\": \"Jun23-PostWomenTechies-SDET-101-T-0.#6\",\r\n    \"programDescription\": \"Selenium\",\r\n    \"programStatus\": \"InProgress\"\r\n}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/saveprogram",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"saveprogram"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Program_7th_Program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e046177d-93de-449d-b914-90cd4d83bce3",
										"exec": [
											"//Valiate status Code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//Validate status message\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\")\r",
											"});\r",
											"\r",
											"//Validate response header - Content-Type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//Validate response body\r",
											"    pm.test(\"Validate response body\", function(){\r",
											"        //pm.expect(jsonResponse.programId,pm.environment.get(programId));\r",
											"        pm.expect(jsonResponse.programName,pm.environment.get(\"Jun23-PostWomenTechies-SDET-AP12\"));\r",
											"        pm.expect(jsonResponse.programDescription,pm.environment.get(\"selenium\"));\r",
											"        pm.expect(jsonResponse.programStatus,pm.environment.get(\"Active\"));\r",
											"       // pm.expect(jsonResponse.creationTime,pm.environment.get(creationTime));\r",
											"       // pm.expect(jsonResponse.lastModTime,pm.environment.get(lastModTime));\r",
											"    })\r",
											"\r",
											"//Validate response json Schema\r",
											"//using json to json Schema converter\r",
											"\r",
											"var schema=\r",
											"{\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"Type\":\"Object\",\r",
											"    \"properties\": {\r",
											"        //\"programId\": {\r",
											"           // \"type\": \"integer\"\r",
											"        //},\r",
											"        \"programName\": {\r",
											"            \"type\": \"string\"\r",
											"        },    \r",
											"        \"programDescription\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"programStatus\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        //\"creationTime\": {\r",
											"            //\"type\": \"integer\"\r",
											"        //},\r",
											"        //\"lastModTime\": {\r",
											"            //\"type\": \"integer\"\r",
											"        //}\r",
											"    },\r",
											"    \"required\" :[\r",
											"        //\"programId\",\r",
											"        \"programName\",\r",
											"        \"programDescription\",\r",
											"        \"programStatus\"\r",
											"        //\"creationTime\",\r",
											"        //\"lastModTime\"\r",
											"    ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"    //using tv4 validatroty library and validate method\r",
											"    pm.expect(tv4.validate(jsonResponse[0],schema)).to.be.true\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"    \r",
											"\r",
											"\r",
											"    \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b253a4eb-c0d8-4223-b039-297503caeb49",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \r\n     \"programName\": \"Jun23-PostWomenTechies-SDET-101-T-0.#7\",\r\n    \"programDescription\": \"Selenium\",\r\n    \"programStatus\": \"InProgress\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/saveprogram",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"saveprogram"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Program_8_Program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e046177d-93de-449d-b914-90cd4d83bce3",
										"exec": [
											"//Valiate status Code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//Validate status message\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\")\r",
											"});\r",
											"\r",
											"//Validate response header - Content-Type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//Validate response body\r",
											"    pm.test(\"Validate response body\", function(){\r",
											"        //pm.expect(jsonResponse.programId,pm.environment.get(programId));\r",
											"        pm.expect(jsonResponse.programName,pm.environment.get(\"Jun23-PostWomenTechies-SDET-AP12\"));\r",
											"        pm.expect(jsonResponse.programDescription,pm.environment.get(\"selenium\"));\r",
											"        pm.expect(jsonResponse.programStatus,pm.environment.get(\"Active\"));\r",
											"       // pm.expect(jsonResponse.creationTime,pm.environment.get(creationTime));\r",
											"       // pm.expect(jsonResponse.lastModTime,pm.environment.get(lastModTime));\r",
											"    })\r",
											"\r",
											"//Validate response json Schema\r",
											"//using json to json Schema converter\r",
											"\r",
											"var schema=\r",
											"{\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"Type\":\"Object\",\r",
											"    \"properties\": {\r",
											"        //\"programId\": {\r",
											"           // \"type\": \"integer\"\r",
											"        //},\r",
											"        \"programName\": {\r",
											"            \"type\": \"string\"\r",
											"        },    \r",
											"        \"programDescription\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"programStatus\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        //\"creationTime\": {\r",
											"            //\"type\": \"integer\"\r",
											"        //},\r",
											"        //\"lastModTime\": {\r",
											"            //\"type\": \"integer\"\r",
											"        //}\r",
											"    },\r",
											"    \"required\" :[\r",
											"        //\"programId\",\r",
											"        \"programName\",\r",
											"        \"programDescription\",\r",
											"        \"programStatus\"\r",
											"        //\"creationTime\",\r",
											"        //\"lastModTime\"\r",
											"    ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"    //using tv4 validatroty library and validate method\r",
											"    pm.expect(tv4.validate(jsonResponse[0],schema)).to.be.true\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"    \r",
											"\r",
											"\r",
											"    \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "62038a24-cd9c-46e8-a589-55a5e6df963e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \r\n     \"programName\": \"Jun23-PostWomenTechies-SDET-101-T-0.#8\",\r\n    \"programDescription\": \"Selenium\",\r\n    \"programStatus\": \"InProgress\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/saveprogram",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"saveprogram"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Program_9_Program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e046177d-93de-449d-b914-90cd4d83bce3",
										"exec": [
											"//Valiate status Code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//Validate status message\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\")\r",
											"});\r",
											"\r",
											"//Validate response header - Content-Type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//Validate response body\r",
											"    pm.test(\"Validate response body\", function(){\r",
											"        //pm.expect(jsonResponse.programId,pm.environment.get(programId));\r",
											"        pm.expect(jsonResponse.programName,pm.environment.get(\"Jun23-PostWomenTechies-SDET-AP12\"));\r",
											"        pm.expect(jsonResponse.programDescription,pm.environment.get(\"selenium\"));\r",
											"        pm.expect(jsonResponse.programStatus,pm.environment.get(\"Active\"));\r",
											"       // pm.expect(jsonResponse.creationTime,pm.environment.get(creationTime));\r",
											"       // pm.expect(jsonResponse.lastModTime,pm.environment.get(lastModTime));\r",
											"    })\r",
											"\r",
											"//Validate response json Schema\r",
											"//using json to json Schema converter\r",
											"\r",
											"var schema=\r",
											"{\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"Type\":\"Object\",\r",
											"    \"properties\": {\r",
											"        //\"programId\": {\r",
											"           // \"type\": \"integer\"\r",
											"        //},\r",
											"        \"programName\": {\r",
											"            \"type\": \"string\"\r",
											"        },    \r",
											"        \"programDescription\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"programStatus\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        //\"creationTime\": {\r",
											"            //\"type\": \"integer\"\r",
											"        //},\r",
											"        //\"lastModTime\": {\r",
											"            //\"type\": \"integer\"\r",
											"        //}\r",
											"    },\r",
											"    \"required\" :[\r",
											"        //\"programId\",\r",
											"        \"programName\",\r",
											"        \"programDescription\",\r",
											"        \"programStatus\"\r",
											"        //\"creationTime\",\r",
											"        //\"lastModTime\"\r",
											"    ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"    //using tv4 validatroty library and validate method\r",
											"    pm.expect(tv4.validate(jsonResponse[0],schema)).to.be.true\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"    \r",
											"\r",
											"\r",
											"    \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f27908df-3b60-4bf5-845d-e70d01849bcc",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \r\n     \"programName\": \"Jun23-PostWomenTechies-SDET-101-T-0.#9\",\r\n    \"programDescription\": \"Selenium\",\r\n    \"programStatus\": \"InProgress\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/saveprogram",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"saveprogram"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Program-2nd program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e046177d-93de-449d-b914-90cd4d83bce3",
										"exec": [
											"//Valiate status Code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//Validate status message\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\")\r",
											"});\r",
											"\r",
											"//Validate response header - Content-Type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//Validate response body\r",
											"    pm.test(\"Validate response body\", function(){\r",
											"        //pm.expect(jsonResponse.programId,pm.environment.get(programId));\r",
											"        pm.expect(jsonResponse.programName,pm.environment.get(\"Jun23-PostWomenTechies-SDET-0102\"));\r",
											"        pm.expect(jsonResponse.programDescription,pm.environment.get(\"selenium\"));\r",
											"        pm.expect(jsonResponse.programStatus,pm.environment.get(\"Active\"));\r",
											"       // pm.expect(jsonResponse.creationTime,pm.environment.get(creationTime));\r",
											"       // pm.expect(jsonResponse.lastModTime,pm.environment.get(lastModTime));\r",
											"    })\r",
											"\r",
											"//Validate response json Schema\r",
											"//using json to json Schema converter\r",
											"\r",
											"var schema=\r",
											"{\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"Type\":\"Object\",\r",
											"    \"properties\": {\r",
											"        //\"programId\": {\r",
											"           // \"type\": \"integer\"\r",
											"        //},\r",
											"        \"programName\": {\r",
											"            \"type\": \"string\"\r",
											"        },    \r",
											"        \"programDescription\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"programStatus\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        //\"creationTime\": {\r",
											"            //\"type\": \"integer\"\r",
											"        //},\r",
											"        //\"lastModTime\": {\r",
											"            //\"type\": \"integer\"\r",
											"        //}\r",
											"    },\r",
											"    \"required\" :[\r",
											"        //\"programId\",\r",
											"        \"programName\",\r",
											"        \"programDescription\",\r",
											"        \"programStatus\"\r",
											"        //\"creationTime\",\r",
											"        //\"lastModTime\"\r",
											"    ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"    //using tv4 validatroty library and validate method\r",
											"    pm.expect(tv4.validate(jsonResponse[0],schema)).to.be.true\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"    \r",
											"\r",
											"\r",
											"    \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3a8184a4-2fa9-46b2-821c-f30f2af7c3bd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"selenium\",\r\n  \"programName\": \"Jun23-PostWomenTechies-SDET-101-T-0.#2\",\r\n   \"programStatus\": \"InProgress\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/saveprogram",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"saveprogram"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Program-Random Value for Program Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2306d6ba-1b8c-4358-a076-a685e0daf4a3",
										"exec": [
											"//Valiate status Code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//Validate status message\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\")\r",
											"});\r",
											"\r",
											"//Validate response header - Content-Type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//Validate response body\r",
											"    pm.test(\"Validate response body\", function(){\r",
											"       \r",
											"        pm.expect(jsonResponse.programName,pm.environment.get(\"Jun23-PostWomenTechies-AP19\"));\r",
											"        pm.expect(jsonResponse.programDescription,pm.environment.get(\"selenium\"));\r",
											"        pm.expect(jsonResponse.programStatus,pm.environment.get(\"12\"));\r",
											"       \r",
											"    })\r",
											"\r",
											"//Validate response json Schema\r",
											"//using json to json Schema converter\r",
											"\r",
											"var schema=\r",
											"{\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"Type\":\"Object\",\r",
											"    \"properties\": {\r",
											"        \r",
											"        \"programName\": {\r",
											"            \"type\": \"string\"\r",
											"        },    \r",
											"        \"programDescription\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"programStatus\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \r",
											"    },\r",
											"    \"required\" :[\r",
											"        //\"programId\",\r",
											"        \"programName\",\r",
											"        \"programDescription\",\r",
											"        \"programStatus\"\r",
											"        //\"creationTime\",\r",
											"        //\"lastModTime\"\r",
											"    ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"    //using tv4 validatroty library and validate method\r",
											"    pm.expect(tv4.validate(jsonResponse[0],schema)).to.be.true\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"    \r",
											"\r",
											"\r",
											"    \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2deeaa04-c660-4ab3-8ed7-d58f6f47dc2a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"selenium\",\r\n  \"programName\": \"Jun23-PostWomenTechies-SDET-101-T-0.#11\",\r\n  \"programStatus\": \"12\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/saveprogram",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"saveprogram"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Program-Already Existing Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "33e18ec2-c6c1-4fce-93d4-152788d9fd7e",
										"exec": [
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											" \r",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
											"  \"title\": \"Generated schema for Root\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ba35d715-f2d7-43fb-953b-8b4faa511888",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"programName\": \"Jun23-PostWomenTechies-SDET-101-T-0.#5\",\r\n    \"programDescription\": \"Selenium\",\r\n    \"programStatus\": \"InProgress\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/saveprogram",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"saveprogram"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Program-Without Program Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "45169673-d2c0-4d3d-b034-676929078e50",
										"exec": [
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Internal Server Error\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,500);\r",
											"    pm.expect(jsonResponse.error,\"Internal Server Error\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "46903888-4dee-4e61-9b7d-417446ae2230",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"selenium\",\r\n  \"programName\": \"Jun23-PostWomenTechies-101-T-0.#12\"\r\n\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/saveprogram",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"saveprogram"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Program-Without Program Description",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "99585ce8-7151-4f8e-bb18-0829415fe3dd",
										"exec": [
											"\r",
											"\r",
											"//Valiate status Code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//Validate status message\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\")\r",
											"});\r",
											"\r",
											"//Validate response header - Content-Type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//Validate response body\r",
											"    pm.test(\"Validate response body\", function(){\r",
											"        //pm.expect(jsonResponse.programId,pm.environment.get(programId));\r",
											"        pm.expect(jsonResponse.programName,pm.environment.get(\"Jun23-PostWomenTechies-SDET-0102\"));\r",
											"        pm.expect(jsonResponse.programDescription,pm.environment.get(\"selenium\"));\r",
											"        pm.expect(jsonResponse.programStatus,pm.environment.get(\"Active\"));\r",
											"       // pm.expect(jsonResponse.creationTime,pm.environment.get(creationTime));\r",
											"       // pm.expect(jsonResponse.lastModTime,pm.environment.get(lastModTime));\r",
											"    })\r",
											"\r",
											"//Validate response json Schema\r",
											"//using json to json Schema converter\r",
											"\r",
											"var schema=\r",
											"{\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"Type\":\"Object\",\r",
											"    \"properties\": {\r",
											"        //\"programId\": {\r",
											"           // \"type\": \"integer\"\r",
											"        //},\r",
											"        \"programName\": {\r",
											"            \"type\": \"string\"\r",
											"        },    \r",
											"        \"programDescription\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"programStatus\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        //\"creationTime\": {\r",
											"            //\"type\": \"integer\"\r",
											"        //},\r",
											"        //\"lastModTime\": {\r",
											"            //\"type\": \"integer\"\r",
											"        //}\r",
											"    },\r",
											"    \"required\" :[\r",
											"        //\"programId\",\r",
											"        \"programName\",\r",
											"        \"programDescription\",\r",
											"        \"programStatus\"\r",
											"        //\"creationTime\",\r",
											"        //\"lastModTime\"\r",
											"    ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"    //using tv4 validatroty library and validate method\r",
											"    pm.expect(tv4.validate(jsonResponse[0],schema)).to.be.true\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"    \r",
											"\r",
											"\r",
											"    \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a8cc1445-f810-4a04-acf4-5a72c1de1e60",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n  \"programName\": \"Jun23-PostWomenTechies-#101-T-0.#13\",\r\n   \"programStatus\": \"InProgress\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/saveprogram",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"saveprogram"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Program-Without Program Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "44adad33-b7ff-4550-b531-a0e9c49c7346",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Internal Server Error\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,500);\r",
											"    pm.expect(jsonResponse.error,\"Internal Server Error\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "89f0f753-26c3-4d26-9d0a-ded3dd11b42c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"selenium\",\r\n\r\n   \"programStatus\": \"InProgress\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/saveprogram",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"saveprogram"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Program-Empty Program Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4921c587-57dd-4d4e-9bd3-7dff08dd7242",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "875acaad-b3b3-44b7-8125-246003bb46d1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"selenium\",\r\n  \"programName\": \"\",\r\n   \"programStatus\": \"Active\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/saveprogram",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"saveprogram"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Program-Empty Program Description",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2bf15f7e-81cb-48af-9f9f-7bca3f40039a",
										"exec": [
											"\r",
											"//Valiate status Code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//Validate status message\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\")\r",
											"});\r",
											"\r",
											"//Validate response header - Content-Type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//Validate response body\r",
											"    pm.test(\"Validate response body\", function(){\r",
											"        //pm.expect(jsonResponse.programId,pm.environment.get(programId));\r",
											"        pm.expect(jsonResponse.programName,pm.environment.get(\"Jun23-PostWomenTechies-SDET-0102\"));\r",
											"        pm.expect(jsonResponse.programDescription,pm.environment.get(\"selenium\"));\r",
											"        pm.expect(jsonResponse.programStatus,pm.environment.get(\"Active\"));\r",
											"       // pm.expect(jsonResponse.creationTime,pm.environment.get(creationTime));\r",
											"       // pm.expect(jsonResponse.lastModTime,pm.environment.get(lastModTime));\r",
											"    })\r",
											"\r",
											"//Validate response json Schema\r",
											"//using json to json Schema converter\r",
											"\r",
											"var schema=\r",
											"{\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"Type\":\"Object\",\r",
											"    \"properties\": {\r",
											"        //\"programId\": {\r",
											"           // \"type\": \"integer\"\r",
											"        //},\r",
											"        \"programName\": {\r",
											"            \"type\": \"string\"\r",
											"        },    \r",
											"        \"programDescription\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"programStatus\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        //\"creationTime\": {\r",
											"            //\"type\": \"integer\"\r",
											"        //},\r",
											"        //\"lastModTime\": {\r",
											"            //\"type\": \"integer\"\r",
											"        //}\r",
											"    },\r",
											"    \"required\" :[\r",
											"        //\"programId\",\r",
											"        \"programName\",\r",
											"        \"programDescription\",\r",
											"        \"programStatus\"\r",
											"        //\"creationTime\",\r",
											"        //\"lastModTime\"\r",
											"    ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"    //using tv4 validatroty library and validate method\r",
											"    pm.expect(tv4.validate(jsonResponse[0],schema)).to.be.true\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"    \r",
											"\r",
											"\r",
											"    \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "8e114d92-92a4-4407-89c0-ddec34e8fd19",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\":\"\",\r\n  \"programName\": \"Jun23-PostWomenTechies-#101-T-0.#14\",\r\n   \"programStatus\": \"InProgress\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/saveprogram",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"saveprogram"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Program-Empty payload/request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ddb5d5e-4c9e-4ce9-8ac8-a10ce315a632",
										"exec": [
											"//Valiate status Code\r",
											"pm.test(\"Status code is 415\", function () {\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"//Validate status message\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unsupported Media Type\")\r",
											"});\r",
											"\r",
											"//Validate response header - Content-Type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//Validate response body\r",
											"    pm.test(\"Validate response body\", function(){\r",
											"       \r",
											"        pm.expect(jsonResponse.timestamp,pm.environment.get(\"2023-06-28T04:19:11.863+00:00\"));\r",
											"        pm.expect(jsonResponse.status,pm.environment.get(415));\r",
											"        pm.expect(jsonResponse.error,pm.environment.get(\"Unsupported Media Type\"));\r",
											"       \r",
											"    })\r",
											"\r",
											"//Validate response json Schema\r",
											"//using json to json Schema converter\r",
											"\r",
											"var schema=\r",
											"\r",
											"  {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2bf4beb7-bfae-4afb-9437-98566ceaa88c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/saveprogram",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"saveprogram"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Program-Invalid json Schema",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e904c980-3212-4fd5-9adc-3192f0a61591",
										"exec": [
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "791e90de-6b24-42f9-b492-cd39c3d368d5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"selenium\",\r\n  \"programNamee\": \"Jun23-PostWomenTechies-P20\",\r\n  \"programStatus\": \"Active\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/saveprogram",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"saveprogram"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Program-Invalid End Points",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81e9c4d4-bf41-4ce0-be36-9726ad3fd24e",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f34d52d3-abab-40f3-b1b2-2e91ead33d04",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"selenium\",\r\n  \"programName\": \"Jun23-PostWomenTechies-P2\",\r\n   \"programStatus\": \"Active\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/save-prograam",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"save-prograam"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Program-Invalid Base Url",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d21f27ef-c505-49da-9851-5768bed1f325",
										"exec": [
											"console.log(\"Due to application error displays XML code, response body validation cannot be done\");\r",
											"console.log(\"JSONError: Unexpected token '<' at 1:1<!DOCTYPE html>^\");\r",
											"\r",
											"//validate status code \r",
											"//pm.test(\"Status code is 404\", function () {\r",
											"   // pm.response.to.have.status(404);\r",
											"//});\r",
											"\r",
											"//validate status message\r",
											"//pm.test(\"Status code name has string\", function() {\r",
											"   // pm.response.to.have.status(\"Not Found\");\r",
											"//});\r",
											"\r",
											"//validate response header - Content-type\r",
											"//pm.test(\"Content-type is application/json\",function(){\r",
											"   //  pm.expect(\"Content-Type\",\"application/json\");\r",
											"//});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3d7f198f-2829-4628-bb66-53a44e48cbfb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"selenium\",\r\n  \"programName\": \"Jun23-PostWomenTechies-P2\",\r\n   \"programStatus\": \"Active\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/foo/lms/saveprogram",
									"protocol": "https",
									"host": [
										"lms-api-hackathon-june2023-930a8b0f895d",
										"herokuapp",
										"com"
									],
									"path": [
										"foo",
										"lms",
										"saveprogram"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Program-Invalid Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6b057780-6a1a-4bf3-ba41-19ecd3ee0ede",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Method Not Allowed\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"//validating the data type of the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.status).to.eql(405);\r",
											"    pm.expect(jsonData.error).to.eql(\"Method Not Allowed\");\r",
											"});\r",
											"//validating the JSON schema\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c0bf18c8-8a89-41f4-ab87-4faa18d117f1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"selenium\",\r\n  \"programName\": \"Jun23-PostWomenTechies-P2\",\r\n  \"programStatus\": \"Active\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/saveprogram",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"saveprogram"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "3c6d017f-f65f-4a15-8f84-47a9be280a8b"
				},
				{
					"name": "GET All Program",
					"item": [
						{
							"name": "Get All Programs-base url and Valid End Points",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3297a23e-346e-4c16-8956-34eb0df117d9",
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate Response body\r",
											"    pm.test(\"Validate Response body\", function() {\r",
											"         \r",
											"        pm.expect(jsonResponse.programId, pm.environment.get(\"programId\"));\r",
											"        pm.expect(jsonResponse. programName,pm.environment.get (\"programName\"));\r",
											"        pm.expect(jsonResponse.programDescription,pm.environment.get(\"programDescription\"));\r",
											"        pm.expect(jsonResponse.programStatus, pm.environment.get(\"programStatus\"));\r",
											"        pm.expect(jsonResponse.creationTime, pm.environment.get(\"creationTime\"));\r",
											"        pm.expect(jsonResponse.lastModTime, pm.environment.get(\"lastModTime\"));\r",
											"        \r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =  \r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
											"  \"title\": \"Generated schema for Root\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"programId\": {\r",
											"      \"type\": \"number\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"programDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"programStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"creationTime\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"lastModTime\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"programId\",\r",
											"    \"programName\",\r",
											"    \"programDescription\",\r",
											"    \"programStatus\",\r",
											"    \"creationTime\",\r",
											"    \"lastModTime\"\r",
											"  ]\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "053357a7-e535-4c42-b8a6-17d6d2e8e60d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{allPrograms}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{allPrograms}}"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Programs-Invalid End Points",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26303274-c217-488f-a471-21a746c00d8c",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "134126c3-dc68-47ea-b0cd-551b461e43c9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/allPrograams",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"allPrograams"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Programs-Invalid base url",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed6525e8-6293-47d2-be3c-c99233d2b091",
										"exec": [
											"console.log(\"Due to application error, response body validation cannot be done\")\r",
											"console.log(\"JSONError: Unexpected token '<' at 1:1<!DOCTYPE html>^\");\r",
											"\r",
											"//validate status code \r",
											"//pm.test(\"Status code is 404\", function () {\r",
											"   // pm.response.to.have.status(404);\r",
											"//});\r",
											"\r",
											"//validate status message\r",
											"//pm.test(\"Status code name has string\", function() {\r",
											"    //pm.response.to.have.status(\"Not Found\");\r",
											"//});\r",
											"\r",
											"//validate response header - Content-type\r",
											"//pm.test(\"Content-type is application/json\",function(){\r",
											"     //pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"//});\r",
											"\r",
											"//Get the response result\r",
											"//var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"//pm.test(\"Validate response body\", function(){\r",
											"   //pm.expect(jsonResponse.status,404);\r",
											"  //  pm.expect(jsonResponse.error,\"Not Found\");\r",
											"//})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"//var schema =   \r",
											"//{\r",
											"     \r",
											" // \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											" // \"type\": \"object\",\r",
											" // \"properties\": {\r",
											"    //\"timestamp\": {\r",
											"     // \"type\": \"string\"\r",
											"    //},\r",
											"   // \"status\": {\r",
											"      //\"type\": \"integer\"\r",
											"   // },\r",
											"   // \"error\": {\r",
											"     // \"type\": \"string\"\r",
											"   // },\r",
											"   // \"path\": {\r",
											"     // \"type\": \"string\"\r",
											"   // }\r",
											" // },\r",
											"  //\"required\": [\r",
											"   // \"timestamp\",\r",
											"   // \"status\",\r",
											"   // \"error\",\r",
											"    //\"path\"\r",
											" // ]\r",
											"//}\r",
											"//validate schema \r",
											"//pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" //pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" //})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f9301ab9-f129-4939-871c-fedbc910788d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/foolms/{{allPrograms}}",
									"protocol": "https",
									"host": [
										"lms-api-hackathon-june2023-930a8b0f895d",
										"herokuapp",
										"com"
									],
									"path": [
										"foolms",
										"{{allPrograms}}"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Programs-Invalid Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "97a70221-d34e-448f-a283-66dcd1c6c69d",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Method Not Allowed\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"//validating the data type of the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.status).to.eql(405);\r",
											"    pm.expect(jsonData.error).to.eql(\"Method Not Allowed\");\r",
											"});\r",
											"//validating the JSON schema\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "efd6d063-4379-440e-8aa3-27ed130683f6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{allPrograms}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{allPrograms}}"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "45292d52-6ceb-4c70-a734-d8363d139330"
				},
				{
					"name": "GET one ProgramID",
					"item": [
						{
							"name": "Get one ProgramID with valid end points",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a3f512f7-3ca8-4bc8-87fd-902fa9f63cea",
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate Response body\r",
											"    pm.test(\"Validate Response body\", function() {\r",
											"         \r",
											"        pm.expect(jsonResponse.programId, pm.environment.get(\"programId\"));\r",
											"        pm.expect(jsonResponse. programName,pm.environment.get (\"programName\"));\r",
											"        pm.expect(jsonResponse.programDescription,pm.environment.get(\"programDescription\"));\r",
											"        pm.expect(jsonResponse.programStatus, pm.environment.get(\"programStatus\"));\r",
											"        pm.expect(jsonResponse.creationTime, pm.environment.get(\"creationTime\"));\r",
											"        pm.expect(jsonResponse.lastModTime, pm.environment.get(\"lastModTime\"));\r",
											"        \r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =  \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"programId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"programDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"programStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"creationTime\": {\r",
											"      \"type\": \"null\"\r",
											"    },\r",
											"    \"lastModTime\": {\r",
											"      \"type\": \"null\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"programId\",\r",
											"    \"programName\",\r",
											"    \"programDescription\",\r",
											"    \"programStatus\",\r",
											"    \"creationTime\",\r",
											"    \"lastModTime\"\r",
											"  ]\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "bd8e68c7-9d84-4c74-b4e6-104301a381b6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{programs}}/738",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{programs}}",
										"738"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET one ProgramId-Invalid Base URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "58c366ca-c693-42a5-a885-0a804e075f74",
										"exec": [
											"console.log(\"Due to application error, response body validation cannot be done\")\r",
											"console.log(\"JSONError: Unexpected token '<' at 1:1<!DOCTYPE html>^\");\r",
											"\r",
											"//validate status code \r",
											"//*pm.test(\"Status code is 404\", function () {\r",
											"   // pm.response.to.have.status(404);\r",
											"//});\r",
											"\r",
											"//validate status message\r",
											"//pm.test(\"Status code name has string\", function() {\r",
											"    //pm.response.to.have.status(\"Not Found\");\r",
											"//});\r",
											"\r",
											"//validate response header - Content-type\r",
											"//pm.test(\"Content-type is application/json\",function(){\r",
											"    // pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"//});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"//var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"//pm.test(\"Validate response body\", function(){\r",
											"    //pm.expect(jsonResponse.status,404);\r",
											"    //pm.expect(jsonResponse.error,\"Not Found\");\r",
											"//})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"//var schema =   \r",
											" //{\r",
											"     \r",
											"  //\"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  //\"type\": \"object\",\r",
											"  //\"properties\": {\r",
											"   // \"timestamp\": {\r",
											"     // \"type\": \"string\"\r",
											"   // },\r",
											"    //\"status\": {\r",
											"    //},\r",
											"    //\"path\": {\r",
											"     // \"type\": \"string\"\r",
											"   // }\r",
											"  //},\r",
											"  //\"required\": [\r",
											"    //\"timestamp\",\r",
											"    //\"status\",\r",
											"    //\"error\",\r",
											"   // \"path\"\r",
											"  //]\r",
											"//}\r",
											"//validate schema \r",
											"//pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											"// pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" //})*/\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "9a226dcb-f00a-497f-9319-a6384f667190",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/foolms/{{programs}}/02",
									"protocol": "https",
									"host": [
										"lms-api-hackathon-june2023-930a8b0f895d",
										"herokuapp",
										"com"
									],
									"path": [
										"foolms",
										"{{programs}}",
										"02"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET one ProgramId-Non Existing Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4aff30d1-de9c-480b-b56a-8f87ba0a0fbf",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c9b9a908-0946-4823-8b19-3e3cdc67204b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/programs/;",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"programs",
										";"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET one ProgramId-without End Points",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79cf4b5c-1659-4eec-9d5b-d1f0487bb3ec",
										"exec": [
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f9ad1d74-a512-47ae-8d56-a4282dec9ba1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{programs}}/",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{programs}}",
										""
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET one ProgramId-Invalid Program ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "39bb58c7-4e70-43a4-be46-5db514fce437",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "657e1831-f7d9-4fa9-a363-66940ef0b0c2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{programs}}/null",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{programs}}",
										"null"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET one ProgramId-Invalid Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5d73d70e-ca00-45b6-bfb2-37f3d5ebc86e",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,405);\r",
											"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "fdb88d0d-985c-4a88-b63e-8ae7dc82f3c3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{programs}}/02",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{programs}}",
										"02"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "5e7c524d-ee5d-40ec-8b39-c86b949fc1bc"
				},
				{
					"name": "PUT Program(update by ProgramName)",
					"item": [
						{
							"name": "PUT Program(UpdateByProgramName)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ada6c9f-ef37-46b8-b585-64ec2ed15acd",
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate Response body\r",
											"    pm.test(\"Validate Response body\", function() {\r",
											"         \r",
											"        pm.expect(jsonResponse.programId, pm.environment.get(\"programId\"));\r",
											"        pm.expect(jsonResponse. programName,pm.environment.get (\"programName\"));\r",
											"        pm.expect(jsonResponse.programDescription,pm.environment.get(\"programDescription\"));\r",
											"        pm.expect(jsonResponse.programStatus, pm.environment.get(\"programStatus\"));\r",
											"        pm.expect(jsonResponse.creationTime, pm.environment.get(\"creationTime\"));\r",
											"        pm.expect(jsonResponse.lastModTime, pm.environment.get(\"lastModTime\"));\r",
											"        \r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =  \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"programId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"programDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"programStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"creationTime\": {\r",
											"      \"type\": \"null\"\r",
											"    },\r",
											"    \"lastModTime\": {\r",
											"      \"type\": \"null\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"programId\",\r",
											"    \"programName\",\r",
											"    \"programDescription\",\r",
											"    \"programStatus\",\r",
											"    \"creationTime\",\r",
											"    \"lastModTime\"\r",
											"  ]\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ca48cc0f-40c5-4788-99f0-ad13d05b509e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n    \"programName\": \"Jun23-PostWomenTechies-SDET-101-AS-0.#1\",\r\n    \"programDescription\": \"Selenium_Java\",\r\n    \"programStatus\": \"InProgress\"\r\n\t\r\n}\r\n\r\n\r\n   \r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{program}}/Jun23-PostWomenTechies-SDET-101-A-0.#1",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{program}}",
										"Jun23-PostWomenTechies-SDET-101-A-0."
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-102",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									],
									"hash": "1"
								}
							},
							"response": []
						},
						{
							"name": "PUT Program(UpdateByProgramName)-Non Valid Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5d9bad0b-cc7c-4b7f-8003-b7e014b3c96d",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "372ba042-0c31-4a96-94dc-acecd37fe66a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"Selenium_Java\",\r\n  \"programName\": \"Jun23-PostWomenTechies-SDET-101-9-0\",\r\n  \"programStatus\": \"InProgress\"\r\n}\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{program}}/;",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{program}}",
										";"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-102",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT Program(UpdateByProgramName)-Without Request Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "44e41c01-99d5-4151-9bf4-3f6426ab1889",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f1284b7b-8bc5-41d5-b5f0-16a0540e7b06",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{program}}/Jun23-PostWomenTechies-SDET-0002",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{program}}",
										"Jun23-PostWomenTechies-SDET-0002"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-102",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT Program(UpdateByProgramName)-ProgramName Null",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "80d8267b-6476-4420-b73a-cb6992be9c19",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "9d5d6656-de8d-4169-b648-18089e3cf6cd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"Selenium\",\r\n  \"programName\": null,\r\n  \"programStatus\": \"Active\"\r\n}\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{program}}/Jun23-PostWomenTechies-SDET-0001",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{program}}",
										"Jun23-PostWomenTechies-SDET-0001"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-102",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT Program(UpdateByProgramName)-null  Program Desription",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d6c14d3f-b150-496c-a3be-678bcc55a5e5",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e95dfa0f-2194-4626-b320-aa9cef34622e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\":null,\r\n  \"programName\": \"Jun23-PostWomenTechies-SDET-101-8\",\r\n  \"programStatus\": \"Active\"\r\n}\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{program}}/Jun23-PostWomenTechies-SDET-101-8",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{program}}",
										"Jun23-PostWomenTechies-SDET-101-8"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-102",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT Program(UpdateByProgramName)-Program Status Null",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "835300d2-1b1d-4aa4-bf7f-cff7275d5f59",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f6032e0f-570a-44b6-911f-b740c6fb2ca6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"Selenium\",\r\n  \"programName\": \"Jun23-PostWomenTechies-SDET-0002\",\r\n  \"programStatus\": null\r\n}\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{program}}/Jun23-PostWomenTechies-SDET-0001",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{program}}",
										"Jun23-PostWomenTechies-SDET-0001"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-102",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT Program(UpdateByProgramName)-json Schema",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d96e7e2-2522-4248-9210-1bd234279e52",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "35da0e46-59ce-4361-b9cc-df4d53ba27cd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"Selenium\",\r\n  \"programNamee\": \"Jun23-PostWomenTechies-SDET-0002\",\r\n  \"programStatus\": \"Active\"\r\n}\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{program}}/Jun23-PostWomenTechies-SDET-0001",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{program}}",
										"Jun23-PostWomenTechies-SDET-0001"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-102",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "e9d9a11c-3545-4139-a341-d4b31a789a25"
				},
				{
					"name": "PUT Program(Update by ProgramID)",
					"item": [
						{
							"name": "PUT Program(UpdateByProgramId)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2aa15af0-6a19-40ae-9ac0-3909f053284a",
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate Response body\r",
											"    pm.test(\"Validate Response body\", function() {\r",
											"         \r",
											"        pm.expect(jsonResponse.programId, pm.environment.get(\"programId\"));\r",
											"        pm.expect(jsonResponse. programName,pm.environment.get (\"programName\"));\r",
											"        pm.expect(jsonResponse.programDescription,pm.environment.get(\"programDescription\"));\r",
											"        pm.expect(jsonResponse.programStatus, pm.environment.get(\"programStatus\"));\r",
											"        pm.expect(jsonResponse.creationTime, pm.environment.get(\"creationTime\"));\r",
											"        pm.expect(jsonResponse.lastModTime, pm.environment.get(\"lastModTime\"));\r",
											"        \r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =  \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"programId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"programDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"programStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"creationTime\": {\r",
											"      \"type\": \"null\"\r",
											"    },\r",
											"    \"lastModTime\": {\r",
											"      \"type\": \"null\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"programId\",\r",
											"    \"programName\",\r",
											"    \"programDescription\",\r",
											"    \"programStatus\",\r",
											"    \"creationTime\",\r",
											"    \"lastModTime\"\r",
											"  ]\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7b495df4-c994-4dad-8eec-f138dff84efd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"Selenium\",\r\n  \"programId\": \"6588\",\r\n  \"programName\": \"Jun23-PostWomenTechies-SDET-AP19\",\r\n  \"programStatus\": \"12\"\r\n}\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{putprogram}}/6588",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{putprogram}}",
										"6588"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT Program(UpdateByProgramId)-Without Request Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3f3a3a5c-4c54-4b66-afad-7ba0bbf05516",
										"exec": [
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 415\", function () {\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Unsupported Media Type\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,415);\r",
											"    pm.expect(jsonResponse.error,\"Unsupported Media Type\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ff6a16b3-86e0-479d-92a1-779a3d091b27",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{putprogram}}/2299",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{putprogram}}",
										"2299"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT Program(UpdateByProgramId)-Program Name Null",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bd7fc01e-e18d-42f0-a8f7-3eda7885cd8c",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "221029bd-a305-481b-ae8f-70446860a70a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"Selenium\",\r\n  \"programId\": 2299,\r\n  \"programName\": null,\r\n  \"programStatus\": \"Active\"\r\n}\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/putprogram/2298",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"putprogram",
										"2298"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT Program(UpdateByProgramId)-Non Existing Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3118e0c1-294f-4224-bedb-afbcf0b9fa27",
										"exec": [
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e21e64cf-cf1f-4386-a7f1-95b0497bf57f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"Selenium\",\r\n  \"programId\": 6588,\r\n  \"programName\": @#,\r\n  \"programStatus\": \"12\"\r\n}\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{putprogram}}/2298",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{putprogram}}",
										"2298"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT Program(UpdateByProgramId)-Existing Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "48ce0ad1-3acd-4895-8c53-16a77db60b60",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "425511a7-bfa1-4bfd-8528-37591c8158f5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"Selenium_Java\",\r\n  \"programId\": \"6588\",\r\n  \"programName\": \"Jun23-PostWomenTechies-SDET-AP19\",\r\n  \"programStatus\": \"12\"\r\n}\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}{{putprogram}}/6588",
									"host": [
										"{{baseURL}}{{putprogram}}"
									],
									"path": [
										"6588"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT Program(UpdateByProgramId)-Invalid json Schema",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9bbffc1d-9a14-4164-b65e-cda1fa44cd80",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c2054128-bfee-491d-9633-7323a7d0d9d5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"Selenium\",\r\n  \"programId\": 2299,\r\n  \"programNamee\": \"Jun23-PostWomenTechies-SDET-0001\",\r\n  \"programStatus\": \"Active\"\r\n}\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{putprogram}}/2298",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{putprogram}}",
										"2298"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT Program(UpdateByProgramId)-Status Null",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f0ebb75-e25c-4cf6-b690-4a6715dae579",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Internal Server Error\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,500);\r",
											"    pm.expect(jsonResponse.error,\"Internal Server Error\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e20a3705-6dba-45fe-8bd6-1d47ad8d045d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programName\": \"Jun23-PostWomenTechies-SDET-0101_13\",\r\n    \"programDescription\": \"Selenium_Java\",\r\n    \"programStatus\": null,\r\n    \"programId\": \"6624\"\r\n\r\n\r\n}\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{putprogram}}/6608",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{putprogram}}",
										"6608"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT Program(UpdateByProgramId)-Description Null",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "348f05b7-5d95-4641-b24a-39a7853cbc91",
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate Response body\r",
											"    pm.test(\"Validate Response body\", function() {\r",
											"         \r",
											"        pm.expect(jsonResponse.programId, pm.environment.get(\"programId\"));\r",
											"        pm.expect(jsonResponse. programName,pm.environment.get (\"programName\"));\r",
											"        pm.expect(jsonResponse.programDescription,pm.environment.get(\"programDescription\"));\r",
											"        pm.expect(jsonResponse.programStatus, pm.environment.get(\"programStatus\"));\r",
											"        pm.expect(jsonResponse.creationTime, pm.environment.get(\"creationTime\"));\r",
											"        pm.expect(jsonResponse.lastModTime, pm.environment.get(\"lastModTime\"));\r",
											"        \r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =  \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"programId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"programDescription\": {\r",
											"      \"type\": \"null\"\r",
											"    },\r",
											"    \"programStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"creationTime\": {\r",
											"      \"type\": \"null\"\r",
											"    },\r",
											"    \"lastModTime\": {\r",
											"      \"type\": \"null\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"programId\",\r",
											"    \"programName\",\r",
											"    \"programDescription\",\r",
											"    \"programStatus\",\r",
											"    \"creationTime\",\r",
											"    \"lastModTime\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"    \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ef42797e-1fac-4a0e-aee4-0a116c41f08d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"programName\": \"Jun23-PostWomenTechies-SDET-AP19\",\r\n    \"programDescription\": null,\r\n    \"programStatus\": \"12\",\r\n    \"programId\": \"6588\"\r\n\r\n\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{putprogram}}/6588",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{putprogram}}",
										"6588"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "483b31a6-e1bb-4bd7-a232-4cf5e41e9d8d"
				},
				{
					"name": "DELETE by ProgramID",
					"item": [
						{
							"name": "DELETE by Valid End points",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e98b988f-98f3-49fa-bbfc-3e9e7d542afb",
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate Response body\r",
											"    pm.test(\"Validate Response body\", function() {\r",
											"         \r",
											"        pm.expect(jsonResponse.programId, pm.environment.get(\"programId\"));\r",
											"        pm.expect(jsonResponse. programName,pm.environment.get (\"programName\"));\r",
											"        pm.expect(jsonResponse.programDescription,pm.environment.get(\"programDescription\"));\r",
											"        pm.expect(jsonResponse.programStatus, pm.environment.get(\"programStatus\"));\r",
											"        pm.expect(jsonResponse.creationTime, pm.environment.get(\"creationTime\"));\r",
											"        pm.expect(jsonResponse.lastModTime, pm.environment.get(\"lastModTime\"));\r",
											"        \r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =  \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"   \r",
											"    \"programId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"programDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"programStatus\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"creationTime\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"lastModTime\": {\r",
											"      \"type\":  \"integer\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"     \"programId\",\r",
											"     \"programName\",\r",
											"     \"programDescription\",\r",
											"     \"programStatus\",\r",
											"     \"creationTime\",\r",
											"     \"lastModTime\",\r",
											"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"    \r",
											"\r",
											"\r",
											"    \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "df0c6767-5ecf-4c46-b8a9-fbdcb008c26b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{deletebyprogid}}/8827",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{deletebyprogid}}",
										"8827"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE by ProgramId-Non Existing program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "91ef25a1-b5c0-4b2c-a2ab-0ad41cc0c2d1",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "491937da-1607-41cb-a19d-604a78bda24d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n    \"programId\": 2307,\r\n    \"programName\": \"Jun23-PostWomenTechies-SDET-0002\",\r\n    \"programDescription\": \"selenium\",\r\n    \"programStatus\": \"Active\",\r\n    \"creationTime\": \"2023-06-25T07:14:26.017+00:00\",\r\n    \"lastModTime\": \"2023-06-25T07:14:26.017+00:00\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{deletebyprogid}}/000",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{deletebyprogid}}",
										"000"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE by ProgramId-Already deleted program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a740d3e4-1d9e-45b6-9e60-5676c9260a6c",
										"exec": [
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7bb26180-3df6-44de-873f-1bacc1f4088f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{deletebyprogid}}/6590",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{deletebyprogid}}",
										"6590"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE by ProgramId-Without Program ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9c30772d-bcb7-45a5-84ca-97ba616bd212",
										"exec": [
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
											"  \"title\": \"Generated schema for Root\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"number\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7dc52323-ba1f-41f5-bfca-5747a2c3bcae",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{deletebyprogid}}/",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{deletebyprogid}}",
										""
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE by ProgramId-Invalid Program ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2f72a567-188f-48ce-ab78-672c745a35de",
										"exec": [
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"\r",
											"        \r",
											"        \"programName\": {\r",
											"            \"type\": \"string\"\r",
											"        },    \r",
											"        \"programDescription\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"programStatus\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"       \r",
											"    },\r",
											"    \"required\" :[\r",
											"        \r",
											"        \"programName\",\r",
											"        \"programDescription\",\r",
											"        \"programStatus\",\r",
											"       \r",
											"    ]\r",
											"}\r",
											"\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"    //using tv4 validatroty library and validate method\r",
											"    pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											"})\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2a28ea99-f61d-4701-bc69-aa18a11fd4d1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}} /{{deletebyprogid}}/#",
									"host": [
										"{{baseURL}} "
									],
									"path": [
										"{{deletebyprogid}}",
										""
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									],
									"hash": ""
								}
							},
							"response": []
						},
						{
							"name": "DELETE by ProgramId-DataDrivenTesting",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9089987f-721c-4155-b736-f77c9d710ede",
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate Response body\r",
											"    pm.test(\"Validate Response body\", function() {\r",
											"         \r",
											"        pm.expect(jsonResponse.programId, pm.environment.get(\"programId\"));\r",
											"        pm.expect(jsonResponse. programName,pm.environment.get (\"programName\"));\r",
											"        pm.expect(jsonResponse.programDescription,pm.environment.get(\"programDescription\"));\r",
											"        pm.expect(jsonResponse.programStatus, pm.environment.get(\"programStatus\"));\r",
											"        pm.expect(jsonResponse.creationTime, pm.environment.get(\"creationTime\"));\r",
											"        pm.expect(jsonResponse.lastModTime, pm.environment.get(\"lastModTime\"));\r",
											"        \r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =  \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"   \r",
											"    \"programId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"programDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"programStatus\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"creationTime\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"lastModTime\": {\r",
											"      \"type\":  \"integer\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"     \"programId\",\r",
											"     \"programName\",\r",
											"     \"programDescription\",\r",
											"     \"programStatus\",\r",
											"     \"creationTime\",\r",
											"     \"lastModTime\",\r",
											"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"    \r",
											"\r",
											"\r",
											"    \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "53bce845-5877-4fa4-9b8a-c851531f3efb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"programId\": \"{{6703}}\"\r\n    \r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}} /{{deletebyprogid}}/{programId}",
									"host": [
										"{{baseURL}} "
									],
									"path": [
										"{{deletebyprogid}}",
										"{programId}"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE by ProgramId-Invalid Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1a4f89fe-cef2-48c4-b1b7-db219e35b230",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Method Not Allowed\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"//validating the data type of the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.status).to.eql(405);\r",
											"    pm.expect(jsonData.error).to.eql(\"Method Not Allowed\");\r",
											"});\r",
											"//validating the JSON schema\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f633cda3-e7d9-4310-b3e1-1d7e006de03a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{deletebyprogid}}/1122",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{deletebyprogid}}",
										"1122"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE by ProgramId-Invalid End point",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03275308-0ab5-4875-ab07-e5121a483861",
										"exec": [
											"console.log(\"Due to application error displays XML code, response body validation cannot be done\");\r",
											"console.log(\"JSONError: Unexpected token '<' at 1:1<!DOCTYPE html>^\");\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.expect(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c051f0c1-2254-4b8f-86e8-68f500d623f3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}} /deletebypro0gid/{programId}",
									"host": [
										"{{baseURL}} "
									],
									"path": [
										"deletebypro0gid",
										"{programId}"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE by ProgramId-Invalid Base Url",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dcb115f0-8bf1-43e1-9aef-f4b46bcf6c1c",
										"exec": [
											"console.log(\"Due to application error displays XML code, response body validation cannot be done\");\r",
											"console.log(\"JSONError: Unexpected token '<' at 1:1<!DOCTYPE html>^\");\r",
											"\r",
											"//validate status code \r",
											"//pm.test(\"Status code is 404\", function () {\r",
											"    //pm.response.to.have.status(404);\r",
											"//});\r",
											"\r",
											"//validate status message\r",
											"//pm.test(\"Status code name has string\", function() {\r",
											"    //pm.response.to.have.status(\"Not Found\");\r",
											"//});\r",
											"\r",
											"//validate response header - Content-type\r",
											"//pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.expect(\"Content-Type\",\"application/json\");\r",
											"//});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "33af7f6c-581d-4eea-b29c-e2f9d2754b67",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/foo lms/ /{{deletebyprogid}}/1122",
									"protocol": "https",
									"host": [
										"lms-api-hackathon-june2023-930a8b0f895d",
										"herokuapp",
										"com"
									],
									"path": [
										"foo lms",
										" ",
										"{{deletebyprogid}}",
										"1122"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "872fff57-11c6-42cd-8f66-23952fa9b82c"
				},
				{
					"name": "DELETE by ProgramName",
					"item": [
						{
							"name": "DELETE by ProgramName",
							"id": "5241058a-1610-429d-b155-86455320754e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/deletebyprogname/Jun23-PostWomenTechies-SDET-101-A-0.#1",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"deletebyprogname",
										"Jun23-PostWomenTechies-SDET-101-A-0."
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										},
										{
											"key": "programName",
											"value": "Jun23-PostWomenTechies-SDET-0102",
											"disabled": true
										}
									],
									"hash": "1"
								}
							},
							"response": []
						},
						{
							"name": "DELETE by ProgramName_Non Existing Program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "402c04bf-0573-438a-a7a2-b8a0b26322f0",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" \r",
											"     \r",
											"  {\r",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
											"  \"title\": \"Generated schema for Root\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"number\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "839e1dd0-551a-458c-8506-17188fde5feb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}} /deletebyprogname/#",
									"host": [
										"{{baseURL}} "
									],
									"path": [
										"deletebyprogname",
										""
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									],
									"hash": ""
								}
							},
							"response": []
						},
						{
							"name": "DELETE by ProgramName_Already deleted progam",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "93ec2fa9-58fa-4ea1-b7ab-cd4c95237c74",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
											"  \"title\": \"Generated schema for Root\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "96b179fb-cbe9-4961-946c-d3d9dd196da0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/deletebyprogname/Jun23-PostWomenTechies-SDET-101-1",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"deletebyprogname",
										"Jun23-PostWomenTechies-SDET-101-1"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE by ProgramName_wothout program name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "657bffb7-c670-4eca-9203-eefb99beeaa1",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
											"  \"title\": \"Generated schema for Root\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2ddc255b-0c6f-49b0-96c4-333b5c015cd1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/deletebyprogname/",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"deletebyprogname",
										""
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE by ProgramName_Invalid Program name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "479914d3-bf96-4dc4-abc9-c72868623c57",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
											"  \"title\": \"Generated schema for Root\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2652738e-3302-4198-9a37-2ca5872b1e20",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/deletebyprogname/$",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"deletebyprogname",
										"$"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE by ProgramName_DataDriven_file",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d046179e-24ea-4326-8685-35a06a34ece1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ff225c1d-1805-4290-b0a2-cf55d22b4e41",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"programName\": \"{{Jun23-PostWomenTechies-SDET-101-A-0.#2}}\",\r\n}"
								},
								"url": {
									"raw": "{{baseURL}}/deletebyprogname/{programName}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"deletebyprogname",
										"{programName}"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										},
										{
											"key": "programName",
											"value": "Jun23-PostWomenTechies-SDET-0101",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE by ProgramName_Invalid endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "58f779d8-0217-4e29-a7e6-f21706123be3",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
											"  \"title\": \"Generated schema for Root\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"number\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "1a079962-2ad6-4b0a-b9fa-23ff53108927",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/deletebyprognamee/{programName}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"deletebyprognamee",
										"{programName}"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										},
										{
											"key": "programName",
											"value": "Jun23-PostWomenTechies-SDET-0101",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE by ProgramName_invalid BaseUrl",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "08dad21e-90a3-486d-95a6-73829934b149",
										"exec": [
											"console.log(\"Due to application error displays XML code, response body validation cannot be done\");\r",
											"console.log(\"JSONError: Unexpected token '<' at 1:1<!DOCTYPE html>^\");\r",
											"\r",
											"//validate status code \r",
											"//pm.test(\"Status code is 404\", function () {\r",
											"   // pm.response.to.have.status(404);\r",
											"//});\r",
											"\r",
											"//validate status message\r",
											"//pm.test(\"Status code name has string\", function() {\r",
											"    //pm.response.to.have.status(\"Not Found\");\r",
											"//});\r",
											"\r",
											"//validate response header - Content-type\r",
											"//pm.test(\"Content-type is application/json\",function(){\r",
											"    // pm.expect(\"Content-Type\",\"application/json\");\r",
											"//});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "cf1c7d8d-316d-428f-a542-4954768f7bf3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/foolms/deletebyprogname/{programName}",
									"protocol": "https",
									"host": [
										"lms-api-hackathon-june2023-930a8b0f895d",
										"herokuapp",
										"com"
									],
									"path": [
										"foolms",
										"deletebyprogname",
										"{programName}"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										},
										{
											"key": "programName",
											"value": "Jun23-PostWomenTechies-SDET-0101",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE by Program Name_Invalid Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bbefa5f9-5780-4009-a327-cb5d3c5551eb",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Method Not Allowed\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"//validating the data type of the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.status).to.eql(405);\r",
											"    pm.expect(jsonData.error).to.eql(\"Method Not Allowed\");\r",
											"});\r",
											"//validating the JSON schema\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c8d922eb-2be8-4397-8f53-a28c13d3979d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n    \"programId\": ,\r\n    \"programName\": \"Jun23-PostWomenTechies-SDET0002\",\r\n    \"programDescription\": \"selenium\",\r\n    \"programStatus\": \"Active\",\r\n    \"creationTime\": \"2023-06-25T07:14:26.017+00:00\",\r\n    \"lastModTime\": \"2023-06-25T07:14:26.017+00:00\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/deletebyprogname/{programName}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"deletebyprogname",
										"{programName}"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "477c7f8b-23b8-4f76-97c1-f81dfb383546"
				}
			],
			"id": "9f0d88c2-1094-400b-9b0a-14e0155ebeec"
		},
		{
			"name": "Program_Batch_Module",
			"item": [
				{
					"name": "GET Batch",
					"item": [
						{
							"name": "GET ALL Batches",
							"item": [
								{
									"name": "Program_Batch_TC_001_Valid_Endpoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5db72dad-9395-4a43-8a16-e534a5e8ebf8",
												"exec": [
													"//validate status code\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate Response body\r",
													"    pm.test(\"Validate Response body\", function() {\r",
													"         \r",
													"        pm.expect(jsonResponse.batchId, pm.environment.get(\"batchId\"));\r",
													"        pm.expect(jsonResponse.batchName,pm.environment.get(\"batchName\"));\r",
													"        pm.expect(jsonResponse.batchStatus,pm.environment.get(\"batchStatus\"));\r",
													"        pm.expect(jsonResponse.batchDescription, pm.environment.get(\"batchDescription\"));\r",
													"        pm.expect(jsonResponse.batchNoOfClasses, pm.environment.get(\"batchNoOfClasses\"));\r",
													"        pm.expect(jsonResponse.programId, pm.environment.get(\"programId\"));\r",
													"        pm.expect(jsonResponse.programName,pm.environment.get(\"programName\"));\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =  \r",
													" {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"batchId\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"batchName\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"batchDescription\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"batchStatus\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"batchNoOfClasses\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"programId\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"programName\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"batchId\",\r",
													"    \"batchName\",\r",
													"    \"batchDescription\",\r",
													"    \"batchStatus\",\r",
													"    \"batchNoOfClasses\",\r",
													"    \"programId\",\r",
													"    \"programName\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse[0],schema)).to.be.true\r",
													" })\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "53be0da1-5255-42bb-b833-579199de5efd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/{{getAllBatches}}"
									},
									"response": [
										{
											"id": "21c3ed0c-e4a1-4a5e-af27-2cc43f94bb5e",
											"name": "Program_Batch_TC_001_Valid_Endpoint",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseURL}}/{{getAllBatches}}"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Sun, 25 Jun 2023 11:23:40 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "[\n    {\n        \"batchId\": 128,\n        \"batchName\": \"1\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"string\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 53,\n        \"batchName\": \"101\",\n        \"batchDescription\": \"SQL BATCH 198\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 87,\n        \"batchName\": \"105\",\n        \"batchDescription\": \"SQL BATCH 199\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 138,\n        \"batchName\": \"108\",\n        \"batchDescription\": \"SQL\\ufffdBATCH\\ufffd199\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 139,\n        \"batchName\": \"109\",\n        \"batchDescription\": \"SQL\\ufffdBATCH\\ufffd200\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 140,\n        \"batchName\": \"110\",\n        \"batchDescription\": \"Selenium Batch 100\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 141,\n        \"batchName\": \"111\",\n        \"batchDescription\": \"SQL\\ufffdBATCH\\ufffd199\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 142,\n        \"batchName\": \"112\",\n        \"batchDescription\": \"SQL\\ufffdBATCH\\ufffd200\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 143,\n        \"batchName\": \"113\",\n        \"batchDescription\": \"Selenium Batch 100\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 146,\n        \"batchName\": \"114\",\n        \"batchDescription\": \"SQL\\ufffdBATCH\\ufffd199\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 147,\n        \"batchName\": \"115\",\n        \"batchDescription\": \"SQL\\ufffdBATCH\\ufffd200\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 148,\n        \"batchName\": \"116\",\n        \"batchDescription\": \"Selenium Batch 100\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 480,\n        \"batchName\": \"123\",\n        \"batchDescription\": \"Test Batch description\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 24,\n        \"programName\": \"APITesting7\"\n    },\n    {\n        \"batchId\": 772,\n        \"batchName\": \"125\",\n        \"batchDescription\": \"DA Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 1035,\n        \"programName\": \"Jun23-API Warriers-DA-Team9\"\n    },\n    {\n        \"batchId\": 330,\n        \"batchName\": \"4\",\n        \"batchDescription\": \"Test001\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 1367,\n        \"programName\": \"something003\"\n    },\n    {\n        \"batchId\": 149,\n        \"batchName\": \"52\",\n        \"batchDescription\": \"Selenium\",\n        \"batchStatus\": \"Not Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 661,\n        \"programName\": \"Sdet2\"\n    },\n    {\n        \"batchId\": 355,\n        \"batchName\": \"7\",\n        \"batchDescription\": \"Test001\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 1566,\n        \"programName\": \"something004\"\n    },\n    {\n        \"batchId\": 303,\n        \"batchName\": \"--750\",\n        \"batchDescription\": \"Batch SDET01 under program\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 1350,\n        \"programName\": \"UpdatedJun23-PostmanAcers-SDET-750\"\n    },\n    {\n        \"batchId\": 119,\n        \"batchName\": \"999\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"999\",\n        \"batchNoOfClasses\": 9,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 869,\n        \"batchName\": \"Adolph\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 842,\n        \"batchName\": \"Alia\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 843,\n        \"batchName\": \"Amaya\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 845,\n        \"batchName\": \"Andrew\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 206,\n        \"batchName\": \"API Hackathon\",\n        \"batchDescription\": null,\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 204,\n        \"batchName\": \"API Hackathon\",\n        \"batchDescription\": null,\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 205,\n        \"batchName\": \"API Hackathon\",\n        \"batchDescription\": null,\n        \"batchStatus\": \"string\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 209,\n        \"batchName\": \"API Hackathon1\",\n        \"batchDescription\": null,\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 38,\n        \"batchName\": \"API HACKATHON 2024\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"PASS\",\n        \"batchNoOfClasses\": 15,\n        \"programId\": 101,\n        \"programName\": \"Jun23-Hackers@API-Postman-05\"\n    },\n    {\n        \"batchId\": 99,\n        \"batchName\": \"API HACKATHON 2025\",\n        \"batchDescription\": \"API testing\",\n        \"batchStatus\": \"PASS\",\n        \"batchNoOfClasses\": 15,\n        \"programId\": 101,\n        \"programName\": \"Jun23-Hackers@API-Postman-05\"\n    },\n    {\n        \"batchId\": 197,\n        \"batchName\": \"asd \",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"string\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 49,\n        \"batchName\": \"batch-*****\",\n        \"batchDescription\": \"batch-*****\",\n        \"batchStatus\": \"batch-status2\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 54,\n        \"batchName\": \"Batch01\",\n        \"batchDescription\": \"API01\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 23,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 56,\n        \"batchName\": \"Batch02\",\n        \"batchDescription\": \"API1\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 223,\n        \"programName\": \" Jun23-PostmanPioneers-SDET-055 \"\n    },\n    {\n        \"batchId\": 55,\n        \"batchName\": \"Batch02\",\n        \"batchDescription\": \"API1\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 22,\n        \"programName\": \"Jun23-Postman Ninjas-SDET-NaN\"\n    },\n    {\n        \"batchId\": 353,\n        \"batchName\": \"batch1\",\n        \"batchDescription\": \"senior\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 100,\n        \"batchName\": \"{{BatchName}}\",\n        \"batchDescription\": \"fourth_batch\",\n        \"batchStatus\": \"pass\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 507,\n        \"batchName\": \"{{batchNameFormatted}}\",\n        \"batchDescription\": \"Selenium ,java,postman\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 527,\n        \"programId\": 1782,\n        \"programName\": \"Jun23-Postman Poineers-SDET-813\"\n    },\n    {\n        \"batchId\": 482,\n        \"batchName\": \"{{batchNameFormatted}}\",\n        \"batchDescription\": \"Selenium ,java,postman\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 337,\n        \"programId\": 1765,\n        \"programName\": \"Jun23-Postman Poineers-SDET-950\"\n    },\n    {\n        \"batchId\": 493,\n        \"batchName\": \"{{batchNameFormatted}}\",\n        \"batchDescription\": \"Selenium ,java,postman\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 302,\n        \"programId\": 1781,\n        \"programName\": \"Jun23-Postman Poineers-SDET-837\"\n    },\n    {\n        \"batchId\": 475,\n        \"batchName\": \"{{batchNameFormatted}}\",\n        \"batchDescription\": \"Selenium ,java,postman\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 70,\n        \"programId\": 1743,\n        \"programName\": \"Jun23-Postman Poineers-SDET-824\"\n    },\n    {\n        \"batchId\": 490,\n        \"batchName\": \"{{batchNameFormatted}}\",\n        \"batchDescription\": \"Selenium ,java,postman\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 174,\n        \"programId\": 1780,\n        \"programName\": \"Jun23-Postman Poineers-SDET-683\"\n    },\n    {\n        \"batchId\": 489,\n        \"batchName\": \"{{batchNameFormatted}}\",\n        \"batchDescription\": \"Selenium ,java,postman\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 76,\n        \"programId\": 1779,\n        \"programName\": \"Jun23-Postman Poineers-SDET-891\"\n    },\n    {\n        \"batchId\": 461,\n        \"batchName\": \"{{batchNameFormatted}}\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"string\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 1728,\n        \"programName\": \"Jun23-Postman Poineers-SDET-280\"\n    },\n    {\n        \"batchId\": 464,\n        \"batchName\": \"{{batchNameFormatted}}\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"string\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1735,\n        \"programName\": \"Jun23-Postman Poineers-SDET-388\"\n    },\n    {\n        \"batchId\": 50,\n        \"batchName\": \"batchNew\",\n        \"batchDescription\": \"batchNew\",\n        \"batchStatus\": \"batch-status2\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 52,\n        \"batchName\": \"batchNew2\",\n        \"batchDescription\": \"batchNew\",\n        \"batchStatus\": \"batch-status2\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 57,\n        \"batchName\": \"batchNewest\",\n        \"batchDescription\": \"batchNewest\",\n        \"batchStatus\": \"batch-status2\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 200,\n        \"programName\": \"Learn API\"\n    },\n    {\n        \"batchId\": 102,\n        \"batchName\": \"Batchupdate\",\n        \"batchDescription\": \"API4\",\n        \"batchStatus\": \"Active state\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 223,\n        \"programName\": \" Jun23-PostmanPioneers-SDET-055 \"\n    },\n    {\n        \"batchId\": 856,\n        \"batchName\": \"Bradley\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 850,\n        \"batchName\": \"Cara\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 221,\n        \"batchName\": \"CHECKING\",\n        \"batchDescription\": \"API-41\",\n        \"batchStatus\": \"ACTIVE\",\n        \"batchNoOfClasses\": 67,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 617,\n        \"batchName\": \"Clotilde\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 286,\n        \"batchName\": \"da\",\n        \"batchDescription\": \"nothing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 13,\n        \"programId\": 888,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-123\"\n    },\n    {\n        \"batchId\": 289,\n        \"batchName\": \"da\",\n        \"batchDescription\": \"nothing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 13,\n        \"programId\": 644,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-94197978\"\n    },\n    {\n        \"batchId\": 226,\n        \"batchName\": \"DA\",\n        \"batchDescription\": \"Data Analyst\",\n        \"batchStatus\": \"Running\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 284,\n        \"batchName\": \"DA\",\n        \"batchDescription\": \"DA Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 327,\n        \"batchName\": \"Ds\",\n        \"batchDescription\": \"Data Scientist\",\n        \"batchStatus\": \"Running\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 329,\n        \"batchName\": \"DS\",\n        \"batchDescription\": \"Data Science\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 22,\n        \"programId\": 111,\n        \"programName\": \"Jun23-Hackers@API-Postman-102\"\n    },\n    {\n        \"batchId\": 870,\n        \"batchName\": \"Haley\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 391,\n        \"batchName\": \"HugsForBugs\",\n        \"batchDescription\": \"BATCH19\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 846,\n        \"batchName\": \"Jon\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 744,\n        \"batchName\": \"Jun23-\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 311,\n        \"batchName\": \"Jun23-APIc Scripters-DA-25-006\",\n        \"batchDescription\": \"Learn Analysis\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 23,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 314,\n        \"batchName\": \"Jun23-APIc Scripters-DA-27-008\",\n        \"batchDescription\": \"Learn Analysis\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 1362,\n        \"programName\": \"Jun23-APIc Scripters-SDET5DA1-388\"\n    },\n    {\n        \"batchId\": 324,\n        \"batchName\": \"Jun23-APIc Scripters-DA-29-010\",\n        \"batchDescription\": \"Learn Analysis\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 1362,\n        \"programName\": \"Jun23-APIc Scripters-SDET5DA1-388\"\n    },\n    {\n        \"batchId\": 310,\n        \"batchName\": \"Jun23-APIc Scripters-SDET-24-005\",\n        \"batchDescription\": \"Learn Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 313,\n        \"batchName\": \"Jun23-APIc Scripters-SDET-26-007\",\n        \"batchDescription\": \"Learn Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 1362,\n        \"programName\": \"Jun23-APIc Scripters-SDET5DA1-388\"\n    },\n    {\n        \"batchId\": 323,\n        \"batchName\": \"Jun23-APIc Scripters-SDET-28-009\",\n        \"batchDescription\": \"Learn Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 1362,\n        \"programName\": \"Jun23-APIc Scripters-SDET5DA1-388\"\n    },\n    {\n        \"batchId\": 328,\n        \"batchName\": \"Jun23-APIc Scripters-SDET-30-011\",\n        \"batchDescription\": \"Learn Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 1362,\n        \"programName\": \"Jun23-APIc Scripters-SDET5DA1-388\"\n    },\n    {\n        \"batchId\": 616,\n        \"batchName\": \"Jun23-ApiExpliorers-SDET-205\",\n        \"batchDescription\": \"PostmanApi\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 22,\n        \"programName\": \"Jun23-Postman Ninjas-SDET-NaN\"\n    },\n    {\n        \"batchId\": 626,\n        \"batchName\": \"Jun23-ApiExplorers-SDET-205\",\n        \"batchDescription\": \"PostmanApi\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 8,\n        \"programId\": 23,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 619,\n        \"batchName\": \"Jun23-ApiExplorers-SDET-205\",\n        \"batchDescription\": \"PostmanApi\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 22,\n        \"programName\": \"Jun23-Postman Ninjas-SDET-NaN\"\n    },\n    {\n        \"batchId\": 383,\n        \"batchName\": \"Jun23-Api Explorers-sdetpostman-01\",\n        \"batchDescription\": \"Api Testing using Postman\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 243,\n        \"programId\": 101,\n        \"programName\": \"Jun23-Hackers@API-Postman-05\"\n    },\n    {\n        \"batchId\": 384,\n        \"batchName\": \"Jun23-Api Explorers-sdetpostman-01\",\n        \"batchDescription\": \"Api Testing using Postman\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 243,\n        \"programId\": 103,\n        \"programName\": \"Jun23-Hackers@API-Postman-07\"\n    },\n    {\n        \"batchId\": 756,\n        \"batchName\": \"Jun23-API-hackathon-SDET103-207\",\n        \"batchDescription\": \"Giving Marvelous SDET training at Numpy\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 2173,\n        \"programName\": \"Jun23-API Tracker-SDET-805\"\n    },\n    {\n        \"batchId\": 732,\n        \"batchName\": \"Jun23-API-hackathon-SDET103-497\",\n        \"batchDescription\": \"Giving Marvelous SDET traing at Numpy\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 2173,\n        \"programName\": \"Jun23-API Tracker-SDET-805\"\n    },\n    {\n        \"batchId\": 733,\n        \"batchName\": \"Jun23-API-hackathon-SDET103-618\",\n        \"batchDescription\": \"Giving Marvelous SDET traing at Numpy\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 2173,\n        \"programName\": \"Jun23-API Tracker-SDET-805\"\n    },\n    {\n        \"batchId\": 743,\n        \"batchName\": \"Jun23-API-hackathon-SDET103-806\",\n        \"batchDescription\": \"Giving Marvelous SDET traing at Numpy\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 2173,\n        \"programName\": \"Jun23-API Tracker-SDET-805\"\n    },\n    {\n        \"batchId\": 242,\n        \"batchName\": \"Jun23-API Hackers-DA-Team07-00762544\",\n        \"batchDescription\": \"Tableau62544\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 8,\n        \"programId\": 29,\n        \"programName\": \"{{programName}}\"\n    },\n    {\n        \"batchId\": 245,\n        \"batchName\": \"Jun23-API Hackers-DA-Team07-00762789\",\n        \"batchDescription\": \"Tableau62789\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 8,\n        \"programId\": 29,\n        \"programName\": \"{{programName}}\"\n    },\n    {\n        \"batchId\": 386,\n        \"batchName\": \"Jun23-API Hackers-DA-Team07-00769309\",\n        \"batchDescription\": \"Tableau69309\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 8,\n        \"programId\": 29,\n        \"programName\": \"{{programName}}\"\n    },\n    {\n        \"batchId\": 253,\n        \"batchName\": \"Jun23-API Hackers-DA-Team07-00784548\",\n        \"batchDescription\": \"Tableau84548\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 8,\n        \"programId\": 29,\n        \"programName\": \"{{programName}}\"\n    },\n    {\n        \"batchId\": 792,\n        \"batchName\": \"Jun23-API Hackers-DA-Team07-007-PUT update490\",\n        \"batchDescription\": \"Tableau-PUT update\",\n        \"batchStatus\": \"4\",\n        \"batchNoOfClasses\": 8,\n        \"programId\": 29,\n        \"programName\": \"{{programName}}\"\n    },\n    {\n        \"batchId\": 784,\n        \"batchName\": \"Jun23-API Hackers-DA-Team07-007-PUT update9698\",\n        \"batchDescription\": \"Tableau-PUT update\",\n        \"batchStatus\": \"4\",\n        \"batchNoOfClasses\": 8,\n        \"programId\": 29,\n        \"programName\": \"{{programName}}\"\n    },\n    {\n        \"batchId\": 241,\n        \"batchName\": \"Jun23-API Hackers-SDET-Team07-00711864\",\n        \"batchDescription\": \"java programming11864\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 717,\n        \"programName\": \"{{programName}}\"\n    },\n    {\n        \"batchId\": 252,\n        \"batchName\": \"Jun23-API Hackers-SDET-Team07-00713063\",\n        \"batchDescription\": \"java programming13063\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 717,\n        \"programName\": \"{{programName}}\"\n    },\n    {\n        \"batchId\": 385,\n        \"batchName\": \"Jun23-API Hackers-SDET-Team07-00714364\",\n        \"batchDescription\": \"java programming14364\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 717,\n        \"programName\": \"{{programName}}\"\n    },\n    {\n        \"batchId\": 244,\n        \"batchName\": \"Jun23-API Hackers-SDET-Team07-00722659\",\n        \"batchDescription\": \"java programming22659\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 717,\n        \"programName\": \"{{programName}}\"\n    },\n    {\n        \"batchId\": 240,\n        \"batchName\": \"Jun23-API Hackers-SDET-Team07-00725879\",\n        \"batchDescription\": \"java programming25879\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 717,\n        \"programName\": \"{{programName}}\"\n    },\n    {\n        \"batchId\": 239,\n        \"batchName\": \"Jun23-API Hackers-SDET-Team07-00783952\",\n        \"batchDescription\": \"java programming83952\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 717,\n        \"programName\": \"{{programName}}\"\n    },\n    {\n        \"batchId\": 782,\n        \"batchName\": \"Jun23-API Hackers-SDET-Team07-007-PUT update4332\",\n        \"batchDescription\": \"java programming-PUT update\",\n        \"batchStatus\": \"4\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 717,\n        \"programName\": \"{{programName}}\"\n    },\n    {\n        \"batchId\": 790,\n        \"batchName\": \"Jun23-API Hackers-SDET-Team07-007-PUT update7607\",\n        \"batchDescription\": \"java programming-PUT update\",\n        \"batchStatus\": \"4\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 717,\n        \"programName\": \"{{programName}}\"\n    },\n    {\n        \"batchId\": 387,\n        \"batchName\": \"Jun23-API Hackers-SF-Team07-0073054\",\n        \"batchDescription\": \"Salesforce3054\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 738,\n        \"programName\": \"Jun23-PostmanNinjas-SDET-511\"\n    },\n    {\n        \"batchId\": 243,\n        \"batchName\": \"Jun23-API Hackers-SF-Team07-00793384\",\n        \"batchDescription\": \"Salesforce93384\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 738,\n        \"programName\": \"Jun23-PostmanNinjas-SDET-511\"\n    },\n    {\n        \"batchId\": 786,\n        \"batchName\": \"Jun23-API Hackers-SF-Team07-007-PUT update132\",\n        \"batchDescription\": \"Salesforce-PUT update\",\n        \"batchStatus\": \"4\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 738,\n        \"programName\": \"Jun23-PostmanNinjas-SDET-511\"\n    },\n    {\n        \"batchId\": 794,\n        \"batchName\": \"Jun23-API Hackers-SF-Team07-007-PUT update3708\",\n        \"batchDescription\": \"Salesforce-PUT update\",\n        \"batchStatus\": \"4\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 738,\n        \"programName\": \"Jun23-PostmanNinjas-SDET-511\"\n    },\n    {\n        \"batchId\": 295,\n        \"batchName\": \"Jun23-ApiPixies--SDET-001\",\n        \"batchDescription\": \"Automation Testing Batch\",\n        \"batchStatus\": \"Ongoing\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 296,\n        \"batchName\": \"Jun23-ApiPixies-SDET-001\",\n        \"batchDescription\": \"Automation Testing Batch\",\n        \"batchStatus\": \"Ongoing\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 307,\n        \"batchName\": \"Jun23-ApiPixies-SDET-002\",\n        \"batchDescription\": \"Automation Testing Batch\",\n        \"batchStatus\": \"Ongoing\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 30,\n        \"batchName\": \"Jun23-API_PIXIES-SDET-SDET94-002\",\n        \"batchDescription\": \"batchstringg\",\n        \"batchStatus\": \"string\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 835,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-158\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 834,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-168\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 233,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-269\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 828,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-282\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 837,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-303\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 853,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-440\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 833,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-489\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 836,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-496\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 838,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-53\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 232,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-619\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 831,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-662\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 234,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-723\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 830,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-791\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 855,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-906\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 829,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-961\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 854,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-98\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 840,\n        \"batchName\": \"Jun23-ApiSloggers-sql1-149\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 523,\n        \"batchName\": \"Jun23-API Warriers-DA-DA001-605\",\n        \"batchDescription\": \"DA Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 1035,\n        \"programName\": \"Jun23-API Warriers-DA-Team9\"\n    },\n    {\n        \"batchId\": 518,\n        \"batchName\": \"Jun23-API Warriers-DA-DA01-226\",\n        \"batchDescription\": \"DA classes New Batches\",\n        \"batchStatus\": \"Inactive\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1035,\n        \"programName\": \"Jun23-API Warriers-DA-Team9\"\n    },\n    {\n        \"batchId\": 530,\n        \"batchName\": \"Jun23-API Warriers-ManualTesting-MT001-846\",\n        \"batchDescription\": \"Manual Testing Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 25,\n        \"programId\": 1042,\n        \"programName\": \"Jun23-API Warriers-Manual Testing-Team9\"\n    },\n    {\n        \"batchId\": 531,\n        \"batchName\": \"Jun23-API Warriers-ManualTesting-MT001-914\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 18,\n        \"programId\": 1037,\n        \"programName\": \"Jun23-API Warriers-SMPO-Team9\"\n    },\n    {\n        \"batchId\": 529,\n        \"batchName\": \"Jun23-API Warriers-SA-SA001-280\",\n        \"batchDescription\": \"Salesforce Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 30,\n        \"programId\": 1036,\n        \"programName\": \"Jun23-API Warriers-SalesForce-Team9\"\n    },\n    {\n        \"batchId\": 528,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET001-14\",\n        \"batchDescription\": \"SDET Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 15,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 409,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-114\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1035,\n        \"programName\": \"Jun23-API Warriers-DA-Team9\"\n    },\n    {\n        \"batchId\": 491,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-129\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 471,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-148\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 503,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-181\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1037,\n        \"programName\": \"Jun23-API Warriers-SMPO-Team9\"\n    },\n    {\n        \"batchId\": 504,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-196\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 509,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-216\",\n        \"batchDescription\": \"Salesforce Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1036,\n        \"programName\": \"Jun23-API Warriers-SalesForce-Team9\"\n    },\n    {\n        \"batchId\": 512,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-26\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 492,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-27\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 468,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-270\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 419,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-276\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1035,\n        \"programName\": \"Jun23-API Warriers-DA-Team9\"\n    },\n    {\n        \"batchId\": 470,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-386\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 455,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-402\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 438,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-467\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 469,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-487\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 405,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-516\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1037,\n        \"programName\": \"Jun23-API Warriers-SMPO-Team9\"\n    },\n    {\n        \"batchId\": 426,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-529\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1036,\n        \"programName\": \"Jun23-API Warriers-SalesForce-Team9\"\n    },\n    {\n        \"batchId\": 408,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-575\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1037,\n        \"programName\": \"Jun23-API Warriers-SMPO-Team9\"\n    },\n    {\n        \"batchId\": 505,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-615\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1037,\n        \"programName\": \"Jun23-API Warriers-SMPO-Team9\"\n    },\n    {\n        \"batchId\": 513,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-633\",\n        \"batchDescription\": \"DA Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1035,\n        \"programName\": \"Jun23-API Warriers-DA-Team9\"\n    },\n    {\n        \"batchId\": 511,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-640\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1066,\n        \"programName\": \"Jun23-SparkPlugs-SDET-362 \"\n    },\n    {\n        \"batchId\": 497,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-649\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 510,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-665\",\n        \"batchDescription\": \"Manual Testing Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1042,\n        \"programName\": \"Jun23-API Warriers-Manual Testing-Team9\"\n    },\n    {\n        \"batchId\": 334,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-69\",\n        \"batchDescription\": \"sdet classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 394,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-746\",\n        \"batchDescription\": \"Not SDET\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1037,\n        \"programName\": \"Jun23-API Warriers-SMPO-Team9\"\n    },\n    {\n        \"batchId\": 460,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-770\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 494,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-815\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 454,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-825\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 448,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-827\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 433,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-874\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 335,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-909\",\n        \"batchDescription\": \"sdet classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 457,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-912\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 447,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-928\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 508,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-971\",\n        \"batchDescription\": \"SDET Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 406,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-993\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1037,\n        \"programName\": \"Jun23-API Warriers-SMPO-Team9\"\n    },\n    {\n        \"batchId\": 627,\n        \"batchName\": \"Jun23-API Warriers-SMPO-SMPO001-174\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 18,\n        \"programId\": 1037,\n        \"programName\": \"Jun23-API Warriers-SMPO-Team9\"\n    },\n    {\n        \"batchId\": 532,\n        \"batchName\": \"Jun23-API Warriers-SMPO-SMPO001-181\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 18,\n        \"programId\": 1037,\n        \"programName\": \"Jun23-API Warriers-SMPO-Team9\"\n    },\n    {\n        \"batchId\": 809,\n        \"batchName\": \"Jun23-API Warriers-SMPO-SMPO001-46\",\n        \"batchDescription\": \" \",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 1035,\n        \"programName\": \"Jun23-API Warriers-DA-Team9\"\n    },\n    {\n        \"batchId\": 648,\n        \"batchName\": \"Jun23-API Warriers-SMPO-SMPO001-468\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 18,\n        \"programId\": 1037,\n        \"programName\": \"Jun23-API Warriers-SMPO-Team9\"\n    },\n    {\n        \"batchId\": 687,\n        \"batchName\": \"Jun23-API Warriers-SMPO-SMPO001-542\",\n        \"batchDescription\": \"SDET Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 15,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 630,\n        \"batchName\": \"Jun23-API Warriers-SMPO-SMPO001-64\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 18,\n        \"programId\": 1037,\n        \"programName\": \"Jun23-API Warriers-SMPO-Team9\"\n    },\n    {\n        \"batchId\": 727,\n        \"batchName\": \"Jun23-API Warriers-SMPO-SMPO001-662\",\n        \"batchDescription\": \"DA Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 1035,\n        \"programName\": \"Jun23-API Warriers-DA-Team9\"\n    },\n    {\n        \"batchId\": 789,\n        \"batchName\": \"Jun23-API Warriers-SMPO-SMPO001-750\",\n        \"batchDescription\": \"DA Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 67,\n        \"programId\": 1035,\n        \"programName\": \"Jun23-API Warriers-DA-Team9\"\n    },\n    {\n        \"batchId\": 538,\n        \"batchName\": \"Jun23-API Warriers-SMPO-SMPO001-751\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 18,\n        \"programId\": 1037,\n        \"programName\": \"Jun23-API Warriers-SMPO-Team9\"\n    },\n    {\n        \"batchId\": 773,\n        \"batchName\": \"Jun23-API Warriers-SMPO-SMPO001-800\",\n        \"batchDescription\": \"DA Classes\",\n        \"batchStatus\": \"123\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 1035,\n        \"programName\": \"Jun23-API Warriers-DA-Team9\"\n    },\n    {\n        \"batchId\": 632,\n        \"batchName\": \"Jun23-API Warriers-SMPO-SMPO001-838\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 18,\n        \"programId\": 1037,\n        \"programName\": \"Jun23-API Warriers-SMPO-Team9\"\n    },\n    {\n        \"batchId\": 633,\n        \"batchName\": \"Jun23-API Warriers-SMPO-SMPO001-942\",\n        \"batchDescription\": \"SDET Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 15,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 799,\n        \"batchName\": \"Jun23-API Warriers-SMPO-SMPO001-949\",\n        \"batchDescription\": null,\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 1035,\n        \"programName\": \"Jun23-API Warriers-DA-Team9\"\n    },\n    {\n        \"batchId\": 297,\n        \"batchName\": \"Jun23-EliteForce-DA-DA\",\n        \"batchDescription\": \"DA Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 1237,\n        \"programName\": \"Jun23-EliteForce-DA-001\"\n    },\n    {\n        \"batchId\": 304,\n        \"batchName\": \"Jun23-EliteForce-SDET-SDET\",\n        \"batchDescription\": \"SDET Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1352,\n        \"programName\": \"Jun23-EliteForce-SDET-001\"\n    },\n    {\n        \"batchId\": 565,\n        \"batchName\": \"Jun23-EliteForce-SDET-SDET655-655\",\n        \"batchDescription\": \"9zm3n2novy\",\n        \"batchStatus\": \"Ongoing\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 736,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-{{$}}\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 735,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-{{$random}}\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 734,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-{{$randomint}}\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 346,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-{{$randomint}}\",\n        \"batchDescription\": \"Sam\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 555,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-104\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 533,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-111\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 520,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-140\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 719,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-145\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 584,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-150\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 649,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-153\",\n        \"batchDescription\": \"Manual Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 868,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-28075770\"\n    },\n    {\n        \"batchId\": 699,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-167\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 825,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-187\",\n        \"batchDescription\": null,\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 752,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-190\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 527,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-196\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 688,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-197\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 677,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-199\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 600,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-2\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 536,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-206\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 681,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-21\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 625,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-212\",\n        \"batchDescription\": \"Manual Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 868,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-28075770\"\n    },\n    {\n        \"batchId\": 624,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-223\",\n        \"batchDescription\": \"Manual Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 868,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-28075770\"\n    },\n    {\n        \"batchId\": 613,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-228\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 748,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-231\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 541,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-233\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 594,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-235\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 602,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-24\",\n        \"batchDescription\": \"Junit testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 8,\n        \"programId\": 866,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 755,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-240\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 680,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-248\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 581,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-250\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 693,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-273\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 757,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-293\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"1\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 611,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-294\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 658,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-302\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 868,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-28075770\"\n    },\n    {\n        \"batchId\": 745,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-303\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 506,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-313\",\n        \"batchDescription\": \"\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 668,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-323\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 672,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-33\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 678,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-332\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 603,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-337\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 711,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-341\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 689,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-353\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 707,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-355\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 598,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-358\",\n        \"batchDescription\": \"Junit testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 8,\n        \"programId\": 866,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 599,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-367\",\n        \"batchDescription\": \"Soap UI testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 9,\n        \"programId\": 867,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-48299936\"\n    },\n    {\n        \"batchId\": 724,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-370\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 701,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-371\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 682,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-385\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 709,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-392\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 522,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-394\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 535,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-4\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 621,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-410\",\n        \"batchDescription\": \"Soap UI testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 9,\n        \"programId\": 867,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-48299936\"\n    },\n    {\n        \"batchId\": 545,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-416\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 706,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-417\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 501,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-424\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 614,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-43\",\n        \"batchDescription\": \"Soap UI testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 9,\n        \"programId\": 867,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-48299936\"\n    },\n    {\n        \"batchId\": 728,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-430\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 690,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-431\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 606,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-436\",\n        \"batchDescription\": \"Junit testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 8,\n        \"programId\": 866,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 499,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-444\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 578,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-445\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 746,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-445\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 657,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-467\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 868,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-28075770\"\n    },\n    {\n        \"batchId\": 749,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-473\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 675,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-479\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 601,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-486\",\n        \"batchDescription\": \"Manual Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 868,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-28075770\"\n    },\n    {\n        \"batchId\": 670,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-491\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 673,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-497\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 550,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-498\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 716,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-499\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 685,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-503\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 694,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-508\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 659,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-509\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 702,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-510\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 710,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-511\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 661,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-518\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 713,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-52\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 695,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-53\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 622,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-533\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 722,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-540\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 597,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-551\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 636,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-551\",\n        \"batchDescription\": \"Manual Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 868,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-28075770\"\n    },\n    {\n        \"batchId\": 666,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-553\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 546,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-561\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 663,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-571\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 496,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-577\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 679,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-582\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 676,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-583\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 595,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-588\",\n        \"batchDescription\": \"Junit testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 8,\n        \"programId\": 866,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 623,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-591\",\n        \"batchDescription\": \"Junit testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 8,\n        \"programId\": 866,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 686,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-593\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 660,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-606\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 747,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-608\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 592,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-610\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 867,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-48299936\"\n    },\n    {\n        \"batchId\": 726,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-616\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 750,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-628\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 586,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-629\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 721,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-648\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 495,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-651\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 604,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-652\",\n        \"batchDescription\": \"Soap UI testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 9,\n        \"programId\": 867,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-48299936\"\n    },\n    {\n        \"batchId\": 654,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-653\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 868,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-28075770\"\n    },\n    {\n        \"batchId\": 717,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-655\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 665,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-656\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 767,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-659\",\n        \"batchDescription\": \"\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 700,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-660\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 544,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-675\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 348,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-68\",\n        \"batchDescription\": \"Sam\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 534,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-681\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 669,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-684\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 583,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-690\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 514,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-693\",\n        \"batchDescription\": \"\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 615,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-698\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 588,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-716\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 753,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-72\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 667,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-736\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 524,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-746\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 696,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-76\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 715,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-760\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 664,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-768\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 662,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-779\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 684,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-784\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 612,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-786\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 543,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-787\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 607,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-79\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 723,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-797\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 585,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-799\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 683,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-80\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 653,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-802\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 868,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-28075770\"\n    },\n    {\n        \"batchId\": 620,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-803\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 609,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-814\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 714,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-825\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 519,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-825\",\n        \"batchDescription\": \"\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 692,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-830\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 498,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-830\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 771,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-831\",\n        \"batchDescription\": null,\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 718,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-835\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 596,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-854\",\n        \"batchDescription\": \"Junit testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 8,\n        \"programId\": 866,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 655,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-861\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 868,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-28075770\"\n    },\n    {\n        \"batchId\": 751,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-862\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 712,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-873\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 608,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-876\",\n        \"batchDescription\": \"Soap UI testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 9,\n        \"programId\": 867,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-48299936\"\n    },\n    {\n        \"batchId\": 708,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-883\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 656,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-887\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 868,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-28075770\"\n    },\n    {\n        \"batchId\": 766,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-89\",\n        \"batchDescription\": null,\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 691,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-890\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 593,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-894\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 866,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 725,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-895\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 671,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-913\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 754,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-919\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 540,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-924\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 589,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-931\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 868,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-28075770\"\n    },\n    {\n        \"batchId\": 548,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-94\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 634,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-942\",\n        \"batchDescription\": \"Manual Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 868,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-28075770\"\n    },\n    {\n        \"batchId\": 605,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-953\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 582,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-969\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 587,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-97\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 610,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-974\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 580,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-982\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 720,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-984\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 537,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-985\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 674,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-999\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 98,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET02-\",\n        \"batchDescription\": \"second_batch\",\n        \"batchStatus\": \"inactive\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 371,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-113\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 104,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-120\",\n        \"batchDescription\": \"six_batch\",\n        \"batchStatus\": \"failed\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 372,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-138\",\n        \"batchDescription\": \"six_batch\",\n        \"batchStatus\": \"failed\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 404,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-167\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 442,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-175\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1681,\n        \"programName\": \"Jun23-HugsForBugs-SDET-788\"\n    },\n    {\n        \"batchId\": 443,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-175\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 437,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-239\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 393,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-245\",\n        \"batchDescription\": \"six_batch\",\n        \"batchStatus\": \"failed\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 397,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-324\",\n        \"batchDescription\": \"six_batch\",\n        \"batchStatus\": \"failed\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 103,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-334\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 551,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-516\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1865,\n        \"programName\": \"Jun23-HugsForBugs-SDET-489\"\n    },\n    {\n        \"batchId\": 413,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-620\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 424,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-663\",\n        \"batchDescription\": \"six_batch\",\n        \"batchStatus\": \"failed\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 392,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-67\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 396,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-673\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 398,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-683\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 430,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-715\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 425,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-756\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 120,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-769\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 399,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-811\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 445,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-888\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1682,\n        \"programName\": \"Jun23-HugsForBugs-SDET-833\"\n    },\n    {\n        \"batchId\": 423,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-961\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 13,\n        \"batchName\": \"Jun23-LightningAPIHackers-SDET102-13\",\n        \"batchDescription\": \"bDesc2\",\n        \"batchStatus\": \"bSt2\",\n        \"batchNoOfClasses\": 13,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 16,\n        \"batchName\": \"Jun23-LightningAPIHackers-SDET102-16\",\n        \"batchDescription\": \"bDesc3\",\n        \"batchStatus\": \"bSt3\",\n        \"batchNoOfClasses\": 16,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 17,\n        \"batchName\": \"Jun23-LightningAPIHackers-SDET102-17\",\n        \"batchDescription\": \"bDesc3\",\n        \"batchStatus\": \"bSt3\",\n        \"batchNoOfClasses\": 17,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 19,\n        \"batchName\": \"Jun23-LightningAPIHackers-SDET102-19\",\n        \"batchDescription\": \"bDesc1\",\n        \"batchStatus\": \"bSt1\",\n        \"batchNoOfClasses\": 19,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 572,\n        \"batchName\": \"Jun23-LightningAPIHackers-SDET102-7\",\n        \"batchDescription\": \"Evening\",\n        \"batchStatus\": \"In progress\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 357,\n        \"programName\": \"Jun23-LightningAPIHackers-SDET-003\"\n    },\n    {\n        \"batchId\": 8,\n        \"batchName\": \"Jun23-LightningAPIHackers-SDET102-8\",\n        \"batchDescription\": \"Weekend\",\n        \"batchStatus\": \"Lighening Speed\",\n        \"batchNoOfClasses\": 8,\n        \"programId\": 1111,\n        \"programName\": \"Jun23-Postman Poineers-SDET-397\"\n    },\n    {\n        \"batchId\": 465,\n        \"batchName\": \"Jun23-LightningAPIHackers-SDET102-{{counter}}\",\n        \"batchDescription\": \"Evening\",\n        \"batchStatus\": \"In progress\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 357,\n        \"programName\": \"Jun23-LightningAPIHackers-SDET-003\"\n    },\n    {\n        \"batchId\": 542,\n        \"batchName\": \"Jun23-LightningAPIHackers-SDET102-UpdatedName\",\n        \"batchDescription\": \"changed batch description\",\n        \"batchStatus\": \"changed batch status\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 662,\n        \"programName\": \"Jun23-Lightning API Hackers-SDET-null\"\n    },\n    {\n        \"batchId\": 9,\n        \"batchName\": \"Jun23-LightningAPIHackers-SDET-9\",\n        \"batchDescription\": \"trialBatch\",\n        \"batchStatus\": \"batch-status2\",\n        \"batchNoOfClasses\": 9,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 651,\n        \"batchName\": \"Jun23-NinjaGeeks-SDET-POSTMAN-12\",\n        \"batchDescription\": \"POSTMAN Learning 479\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 621,\n        \"programId\": 1485,\n        \"programName\": \"Jun23-API Trackers-SDET-698\"\n    },\n    {\n        \"batchId\": 650,\n        \"batchName\": \"Jun23-NinjaGeeks-SDET-POSTMAN-491\",\n        \"batchDescription\": \"POSTMAN Learning 959\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 437,\n        \"programId\": 1485,\n        \"programName\": \"Jun23-API Trackers-SDET-698\"\n    },\n    {\n        \"batchId\": 762,\n        \"batchName\": \"Jun23-PostmanAcers-DA-012-SDET01-001\",\n        \"batchDescription\": \"DA Batch DA01\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 2206,\n        \"programName\": \"Jun23-PostmanAcers-DA-012\"\n    },\n    {\n        \"batchId\": 305,\n        \"batchName\": \"Jun23-PostmanAcers-DA-100--001\",\n        \"batchDescription\": \"SDET Second Batch SDET02\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 1350,\n        \"programName\": \"UpdatedJun23-PostmanAcers-SDET-750\"\n    },\n    {\n        \"batchId\": 84,\n        \"batchName\": \"Jun23-PostmanAcers-DA-100-SDET01-\",\n        \"batchDescription\": \"SDET Second Batch SDET02\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 301,\n        \"programName\": \"Jun23-PostmanAcers-SDET-300\"\n    },\n    {\n        \"batchId\": 61,\n        \"batchName\": \"Jun23-PostmanAcers-DA-DA01-200\",\n        \"batchDescription\": \"DA First Batch DA01\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 261,\n        \"programName\": \"Jun23-PostmanAcers-DA-200\"\n    },\n    {\n        \"batchId\": 73,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-100-SDET01-\",\n        \"batchDescription\": \"SDET First Batch SDET01\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 315,\n        \"programName\": \"Updated_Jun23-PostmanAcers-SDET-500\"\n    },\n    {\n        \"batchId\": 89,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-100-SDET01-001\",\n        \"batchDescription\": \"SDET First Batch SDET01\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 315,\n        \"programName\": \"Updated_Jun23-PostmanAcers-SDET-500\"\n    },\n    {\n        \"batchId\": 82,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-100-SDET01-serialNumber\",\n        \"batchDescription\": \"SDET First Batch SDET01\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 315,\n        \"programName\": \"Updated_Jun23-PostmanAcers-SDET-500\"\n    },\n    {\n        \"batchId\": 74,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-100-SDET01-serialNumber\",\n        \"batchDescription\": \"SDET First Batch SDET01\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 315,\n        \"programName\": \"Updated_Jun23-PostmanAcers-SDET-500\"\n    },\n    {\n        \"batchId\": 83,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-100-SDET01-{serialNumber}\",\n        \"batchDescription\": \"SDET First Batch SDET01\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 315,\n        \"programName\": \"Updated_Jun23-PostmanAcers-SDET-500\"\n    },\n    {\n        \"batchId\": 320,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-750--001\",\n        \"batchDescription\": \"SDET Second Batch SDET02\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 1350,\n        \"programName\": \"UpdatedJun23-PostmanAcers-SDET-750\"\n    },\n    {\n        \"batchId\": 322,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-750-SDET01-001\",\n        \"batchDescription\": \"SDET Second Batch SDET02\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 1350,\n        \"programName\": \"UpdatedJun23-PostmanAcers-SDET-750\"\n    },\n    {\n        \"batchId\": 113,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-SDET01-001\",\n        \"batchDescription\": \"Batch SDET\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 498,\n        \"programName\": \"Jun23-PostmanAcers-SDET-001\"\n    },\n    {\n        \"batchId\": 131,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-SDET01--002\",\n        \"batchDescription\": \"Batch DA\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 554,\n        \"programName\": \"Jun23-PostmanAcers-SDET-002\"\n    },\n    {\n        \"batchId\": 130,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-SDET01-002\",\n        \"batchDescription\": \"Batch SDET\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 498,\n        \"programName\": \"Jun23-PostmanAcers-SDET-001\"\n    },\n    {\n        \"batchId\": 216,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-SDET01--007\",\n        \"batchDescription\": \"Batch SDET01 under program 007\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 946,\n        \"programName\": \"Jun23-PostmanAcers-SDET-007\"\n    },\n    {\n        \"batchId\": 217,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-SDET01-007\",\n        \"batchDescription\": \"Batch SDET01 under program 007\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 946,\n        \"programName\": \"Jun23-PostmanAcers-SDET-007\"\n    },\n    {\n        \"batchId\": 220,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-SDET01-008\",\n        \"batchDescription\": \"Batch SDET01 under program 008\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 947,\n        \"programName\": \"Jun23-PostmanAcers-SDET-008\"\n    },\n    {\n        \"batchId\": 60,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-SDET01-200\",\n        \"batchDescription\": \"SDET First Batch SDET01\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 257,\n        \"programName\": \"Jun23-PostmanAcers-SDET-200\"\n    },\n    {\n        \"batchId\": 64,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-SDET01-300\",\n        \"batchDescription\": \"SDET First Batch SDET01\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 301,\n        \"programName\": \"Jun23-PostmanAcers-SDET-300\"\n    },\n    {\n        \"batchId\": 66,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-SDET02-300\",\n        \"batchDescription\": \"SDET Second Batch SDET02\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 301,\n        \"programName\": \"Jun23-PostmanAcers-SDET-300\"\n    },\n    {\n        \"batchId\": 868,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-170\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 839,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-219\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 774,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-228\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 863,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-301\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 860,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-406\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 826,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-478\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 827,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-492\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 862,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-616\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 861,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-62\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 851,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-630\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 859,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-637\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 866,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-677\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 864,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-684\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 832,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-685\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 865,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-718\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 852,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-745\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 652,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-748\",\n        \"batchDescription\": \"API07\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 13,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 153,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-75\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 824,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-784\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 867,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-86\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 2,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-914\",\n        \"batchDescription\": \"API07\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 13,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 525,\n        \"batchName\": \"Jun23-Postman Poineers-SDET-SDET01-36\",\n        \"batchDescription\": \"Selenium ,java,postman\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 830,\n        \"programId\": 1808,\n        \"programName\": \"Jun23-Postman Poineers-SDET-134\"\n    },\n    {\n        \"batchId\": 539,\n        \"batchName\": \"Jun23-Postman Poineers-SDET-SDET01-65\",\n        \"batchDescription\": \"Selenium ,java,postman\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 372,\n        \"programId\": 1855,\n        \"programName\": \"Jun23-Postman Poineers-SDET-256\"\n    },\n    {\n        \"batchId\": 526,\n        \"batchName\": \"Jun23-Postman Poineers-SDET-SDET01-846\",\n        \"batchDescription\": \"Selenium ,java,postman\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 122,\n        \"programId\": 1812,\n        \"programName\": \"Jun23-Postman Poineers-SDET-211\"\n    },\n    {\n        \"batchId\": 26,\n        \"batchName\": \"Jun23-sparkplugs-SDET-001\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 212,\n        \"batchName\": \"Jun23-sparkplugs-SDET-0010\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 95,\n        \"batchName\": \"Jun23-sparkplugs-SDET-002\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 275,\n        \"batchName\": \"Jun23-sparkplugs-SDET-002\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 28,\n        \"batchName\": \"Jun23-sparkplugs-SDET-003\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 29,\n        \"batchName\": \"Jun23-sparkplugs-SDET-004\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 210,\n        \"batchName\": \"Jun23-sparkplugs-SDET-005\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 208,\n        \"batchName\": \"Jun23-sparkplugs-SDET-005\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 211,\n        \"batchName\": \"Jun23-sparkplugs-SDET-006\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 213,\n        \"batchName\": \"Jun23-sparkplugs-SDET-011\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 97,\n        \"batchName\": \"Jun23-sparkplugs-SDET-100\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 96,\n        \"batchName\": \"Jun23-sparkplugs-SDET-100\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 271,\n        \"batchName\": \"Jun23-sparkplugs-SDET-110\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 15,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 250,\n        \"batchName\": \"Jun23-sparkplugs-SDET1735\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 432,\n        \"batchName\": \"Jun23-sparkplugs-SDET-200\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 15,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 247,\n        \"batchName\": \"Jun23-sparkplugs-SDET2344\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 219,\n        \"batchName\": \"Jun23-sparkplugs-SDET-52\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 218,\n        \"batchName\": \"Jun23-sparkplugs-SDET-55\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 248,\n        \"batchName\": \"Jun23-sparkplugs-SDET683\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 249,\n        \"batchName\": \"Jun23-sparkplugs-SDET940\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 358,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET01-1041\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 361,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET01-1395\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 449,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET01-1448\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 22,\n        \"programName\": \"Jun23-Postman Ninjas-SDET-NaN\"\n    },\n    {\n        \"batchId\": 367,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET01-186\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 65,\n        \"programName\": \"Hackton4\"\n    },\n    {\n        \"batchId\": 416,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET01-1892\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 24,\n        \"programName\": \"APITesting7\"\n    },\n    {\n        \"batchId\": 338,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET01-2383\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 274,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET01-2595\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 458,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET01-2647\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 71,\n        \"programName\": \"Jun23-postman-pioneer-SDET104\"\n    },\n    {\n        \"batchId\": 277,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET01-278\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 336,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET01-2940\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 291,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET01-3357\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 365,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET01-3741\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 628,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET01-{{SerialNo}}\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 366,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET02-1458\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 451,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET02-1462\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 59,\n        \"programName\": \"history\"\n    },\n    {\n        \"batchId\": 418,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET02-1841\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 87,\n        \"programName\": \"Jun23-Testing-SDET-012\"\n    },\n    {\n        \"batchId\": 276,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET02-21\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 359,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET02-238\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 407,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET02-2459\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 93,\n        \"programName\": \"Jun23-Testing-SDET-016\"\n    },\n    {\n        \"batchId\": 278,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET02-250\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 368,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET02-2580\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 49,\n        \"programName\": \"Jun23-apiexplorer-updated2byid-sdet-103\"\n    },\n    {\n        \"batchId\": 450,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET02-2661\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 65,\n        \"programName\": \"Hackton4\"\n    },\n    {\n        \"batchId\": 362,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET02-2805\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 337,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET02-3476\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 292,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET02-3915\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 339,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET02-646\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 629,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET02-{{SerialNo}}\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 214,\n        \"batchName\": \"Jun23-sparkplugs-SDET-xx\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 215,\n        \"batchName\": \"Jun23-sparkplugs-SDET-xy\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 196,\n        \"batchName\": \"Jun23-Status200-SDET-SDET108-001\",\n        \"batchDescription\": \"Learn Postman newman and api testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 344,\n        \"programName\": \"Apiforhackathon\"\n    },\n    {\n        \"batchId\": 317,\n        \"batchName\": \"June23_APIDagger_SDET_SDET01_001598\",\n        \"batchDescription\": \"APIDagger_SDET\",\n        \"batchStatus\": \"Started\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 316,\n        \"batchName\": \"June23_APIDagger_SDET_SDET01_001634\",\n        \"batchDescription\": \"APIDagger_SDET\",\n        \"batchStatus\": \"Started\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 318,\n        \"batchName\": \"June23_APIDagger_SDET_SDET01_001693\",\n        \"batchDescription\": \"APIDagger_SDET\",\n        \"batchStatus\": \"Started\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 321,\n        \"batchName\": \"June23_APIDagger_SDET_SDET01_001757\",\n        \"batchDescription\": \"APIDagger_SDET\",\n        \"batchStatus\": \"Started\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 319,\n        \"batchName\": \"June23_APIDagger_SDET_SDET01_001903\",\n        \"batchDescription\": \"APIDagger_SDET\",\n        \"batchStatus\": \"Started\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 848,\n        \"batchName\": \"June23_APIDagger_SDET_SDET01_001995\",\n        \"batchDescription\": \"APIDagger_SDET\",\n        \"batchStatus\": \"Started\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 287,\n        \"batchName\": \"June23-APIExplorers-SDET-100\",\n        \"batchDescription\": \"String\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 101,\n        \"programName\": \"Jun23-Hackers@API-Postman-05\"\n    },\n    {\n        \"batchId\": 431,\n        \"batchName\": \"June23-APIExplorers-SDET-100\",\n        \"batchDescription\": \"String\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 102,\n        \"programName\": \"Jun23-Hackers@API-Postman-06\"\n    },\n    {\n        \"batchId\": 301,\n        \"batchName\": \"June23-APIExplorers-SDET-100\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"pass\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 66,\n        \"programName\": \"Api1\"\n    },\n    {\n        \"batchId\": 123,\n        \"batchName\": \"June23-APIExplorers-SDET-100\",\n        \"batchDescription\": \"String\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 5,\n        \"batchName\": \"June23-APIExplorers-SDET-114\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 349,\n        \"batchName\": \"June23-APIExplorers-SDET-114\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"strinActive\",\n        \"batchNoOfClasses\": 25,\n        \"programId\": 167,\n        \"programName\": \"Jun23-HugsForBugs-SDET-793\"\n    },\n    {\n        \"batchId\": 326,\n        \"batchName\": \"June23-APIExplorers-SDET-114\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 25,\n        \"programId\": 67,\n        \"programName\": \"SeleniuminJavabyvijaybharathi\"\n    },\n    {\n        \"batchId\": 101,\n        \"batchName\": \"June23-DebugSquad-SDET-SDET106-001\",\n        \"batchDescription\": \"Software Testing\",\n        \"batchStatus\": \"PASS\",\n        \"batchNoOfClasses\": 15,\n        \"programId\": 453,\n        \"programName\": \"Jun23-DebugSquad-SDET-001\"\n    },\n    {\n        \"batchId\": 462,\n        \"batchName\": \"June23-DebugSquad-SDET-SDET106-555\",\n        \"batchDescription\": \"Software Testing\",\n        \"batchStatus\": \"PASS\",\n        \"batchNoOfClasses\": 25,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 871,\n        \"batchName\": \"Kendra\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 872,\n        \"batchName\": \"Ladarius\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 579,\n        \"batchName\": \"Madge\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 847,\n        \"batchName\": \"Novella\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 382,\n        \"batchName\": \"null\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 459,\n        \"batchName\": \"P1B1\",\n        \"batchDescription\": \"API-collectors-Batch1\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 1725,\n        \"programName\": \"API-Phase1\"\n    },\n    {\n        \"batchId\": 463,\n        \"batchName\": \"P1B1\",\n        \"batchDescription\": \"API-collectors-Batch1\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 1734,\n        \"programName\": \"API-Phase1-P1\"\n    },\n    {\n        \"batchId\": 105,\n        \"batchName\": \"Post_batch\",\n        \"batchDescription\": \"Create_Batch\",\n        \"batchStatus\": \"Pass\",\n        \"batchNoOfClasses\": 51,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 222,\n        \"batchName\": \"QA\",\n        \"batchDescription\": \"Newcomers\",\n        \"batchStatus\": \"Comleted\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 841,\n        \"batchName\": \"Quinton\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 858,\n        \"batchName\": \"Ramiro\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 849,\n        \"batchName\": \"Rhianna\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 618,\n        \"batchName\": \"Rowan\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 844,\n        \"batchName\": \"Ruthie\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 228,\n        \"batchName\": \"SalesForce\",\n        \"batchDescription\": \"SMPO\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 990,\n        \"programName\": \"Sales Force\"\n    },\n    {\n        \"batchId\": 283,\n        \"batchName\": \"Salseforce\",\n        \"batchDescription\": \"Salseforce Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 25,\n        \"batchName\": \"SDET\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 299,\n        \"batchName\": \"-SDET01-001\",\n        \"batchDescription\": \"SDET Second Batch SDET02\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 1052,\n        \"programName\": \"UpdatedJun23-PostmanAcers-SDET-004\"\n    },\n    {\n        \"batchId\": 341,\n        \"batchName\": \"SDET 230\",\n        \"batchDescription\": \"SDET BATCH-937\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 356,\n        \"programId\": 1485,\n        \"programName\": \"Jun23-API Trackers-SDET-698\"\n    },\n    {\n        \"batchId\": 343,\n        \"batchName\": \"SDET 241\",\n        \"batchDescription\": \"SDET BATCH-723\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 948,\n        \"programId\": 1485,\n        \"programName\": \"Jun23-API Trackers-SDET-698\"\n    },\n    {\n        \"batchId\": 635,\n        \"batchName\": \"SDET 329\",\n        \"batchDescription\": \"SDET BATCH-207\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 36,\n        \"programId\": 1485,\n        \"programName\": \"Jun23-API Trackers-SDET-698\"\n    },\n    {\n        \"batchId\": 344,\n        \"batchName\": \"SDET 353\",\n        \"batchDescription\": \"SDET BATCH-687\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 496,\n        \"programId\": 1485,\n        \"programName\": \"Jun23-API Trackers-SDET-698\"\n    },\n    {\n        \"batchId\": 340,\n        \"batchName\": \"SDET 488\",\n        \"batchDescription\": \"SDET BATCH-968\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 328,\n        \"programId\": 1485,\n        \"programName\": \"Jun23-API Trackers-SDET-698\"\n    },\n    {\n        \"batchId\": 637,\n        \"batchName\": \"SDET 637\",\n        \"batchDescription\": \"SDET BATCH-590\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 838,\n        \"programId\": 1485,\n        \"programName\": \"Jun23-API Trackers-SDET-698\"\n    },\n    {\n        \"batchId\": 360,\n        \"batchName\": \"SDET 677\",\n        \"batchDescription\": \"SDET BATCH-437\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 924,\n        \"programId\": 1485,\n        \"programName\": \"Jun23-API Trackers-SDET-698\"\n    },\n    {\n        \"batchId\": 342,\n        \"batchName\": \"SDET 686\",\n        \"batchDescription\": \"SDET BATCH-88\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 128,\n        \"programId\": 1485,\n        \"programName\": \"Jun23-API Trackers-SDET-698\"\n    },\n    {\n        \"batchId\": 638,\n        \"batchName\": \"SDET 771\",\n        \"batchDescription\": \"SDET BATCH-980\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 243,\n        \"programId\": 1485,\n        \"programName\": \"Jun23-API Trackers-SDET-698\"\n    },\n    {\n        \"batchId\": 345,\n        \"batchName\": \"SDET 84\",\n        \"batchDescription\": \"SDET BATCH-735\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 267,\n        \"programId\": 1485,\n        \"programName\": \"Jun23-API Trackers-SDET-698\"\n    },\n    {\n        \"batchId\": 133,\n        \"batchName\": \"SDET API HACKATHON1 2023\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"PASS\",\n        \"batchNoOfClasses\": 15,\n        \"programId\": 101,\n        \"programName\": \"Jun23-Hackers@API-Postman-05\"\n    },\n    {\n        \"batchId\": 39,\n        \"batchName\": \"SDET API HACKATHON 2022\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"PASS\",\n        \"batchNoOfClasses\": 15,\n        \"programId\": 101,\n        \"programName\": \"Jun23-Hackers@API-Postman-05\"\n    },\n    {\n        \"batchId\": 58,\n        \"batchName\": \"SDET API Hackathon 2023\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"pass\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 220,\n        \"programName\": \"Saleforce\"\n    },\n    {\n        \"batchId\": 34,\n        \"batchName\": \"SDET API HACKATHON 2023\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"PASS\",\n        \"batchNoOfClasses\": 15,\n        \"programId\": 101,\n        \"programName\": \"Jun23-Hackers@API-Postman-05\"\n    },\n    {\n        \"batchId\": 41,\n        \"batchName\": \"SDET API HACKATHON 2023\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"FAIL\",\n        \"batchNoOfClasses\": 15,\n        \"programId\": 100,\n        \"programName\": \"Jun1-postman-pioneer-SDET104\"\n    },\n    {\n        \"batchId\": 40,\n        \"batchName\": \"SDET API HACKATHON 2025\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"PASS\",\n        \"batchNoOfClasses\": 15,\n        \"programId\": 101,\n        \"programName\": \"Jun23-Hackers@API-Postman-05\"\n    },\n    {\n        \"batchId\": 198,\n        \"batchName\": \"sdf\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"string\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 199,\n        \"batchName\": \"sdfdsf\",\n        \"batchDescription\": \"sdf\",\n        \"batchStatus\": \"string\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 200,\n        \"batchName\": \"sdfdsfrt\",\n        \"batchDescription\": \"sdf\",\n        \"batchStatus\": \"string\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 37,\n        \"batchName\": \"selenium\",\n        \"batchDescription\": \"summer weekday Batch\",\n        \"batchStatus\": \"string\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 24,\n        \"programName\": \"APITesting7\"\n    },\n    {\n        \"batchId\": 202,\n        \"batchName\": \"selenium hackathon\",\n        \"batchDescription\": \"summer weekday Batch\",\n        \"batchStatus\": \"string\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 24,\n        \"programName\": \"APITesting7\"\n    },\n    {\n        \"batchId\": 115,\n        \"batchName\": \"selenium hackathon updated the description1\",\n        \"batchDescription\": null,\n        \"batchStatus\": \"InnActive\",\n        \"batchNoOfClasses\": 101,\n        \"programId\": 24,\n        \"programName\": \"APITesting7\"\n    },\n    {\n        \"batchId\": 332,\n        \"batchName\": \"Smart\",\n        \"batchDescription\": \"Good To Learn\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 1,\n        \"batchName\": \"sparkplugs\",\n        \"batchDescription\": \"batch-decs1\",\n        \"batchStatus\": \"batch-status4\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 23,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 500,\n        \"batchName\": \"sparkplugs\",\n        \"batchDescription\": \"batch-decs1\",\n        \"batchStatus\": \"batch-status4\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 23,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 106,\n        \"batchName\": \"sparkplugs\",\n        \"batchDescription\": \"batch-decs1\",\n        \"batchStatus\": \"batch-status4\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 23,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 45,\n        \"batchName\": \"sparkplugs\",\n        \"batchDescription\": \"batch-decs1\",\n        \"batchStatus\": \"batch-status4\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 23,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 151,\n        \"batchName\": \"Spring ACT June Batch\",\n        \"batchDescription\": \"WeekDay June Medicine Batch \",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 55,\n        \"programName\": \"ACT\"\n    },\n    {\n        \"batchId\": 10,\n        \"batchName\": \"Spring SAT Batch\",\n        \"batchDescription\": \"Weekend June Batch \",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 54,\n        \"programName\": \"SAT\"\n    },\n    {\n        \"batchId\": 294,\n        \"batchName\": \"string\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 318,\n        \"programName\": \"Jun23-PostmanAcers-DA-100\"\n    },\n    {\n        \"batchId\": 137,\n        \"batchName\": \"string\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"string\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 69,\n        \"batchName\": \"string\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 317,\n        \"programName\": \"Learn Java\"\n    },\n    {\n        \"batchId\": 112,\n        \"batchName\": \"string\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"string\",\n        \"batchNoOfClasses\": 9,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 117,\n        \"batchName\": \"string2\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"string\",\n        \"batchNoOfClasses\": 9,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 118,\n        \"batchName\": \"string3\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"string\",\n        \"batchNoOfClasses\": 9,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 227,\n        \"batchName\": \"string567\",\n        \"batchDescription\": \"string 678\",\n        \"batchStatus\": \"string345\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 229,\n        \"batchName\": \"string5678\",\n        \"batchDescription\": \"string 678\",\n        \"batchStatus\": \"string345\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 231,\n        \"batchName\": \"string567890\",\n        \"batchDescription\": \"string 6789\",\n        \"batchStatus\": \"string345\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 309,\n        \"batchName\": \"string89\",\n        \"batchDescription\": \"nmj\",\n        \"batchStatus\": \"stringmn\",\n        \"batchNoOfClasses\": 9,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 363,\n        \"batchName\": \"S/w\",\n        \"batchDescription\": \"Software Learning\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 364,\n        \"batchName\": \"SW\",\n        \"batchDescription\": \"Software Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 517,\n        \"batchName\": \"SW1\",\n        \"batchDescription\": \"Software Testing\",\n        \"batchStatus\": \"Not Active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 109,\n        \"batchName\": \"team\",\n        \"batchDescription\": \"hackathon\",\n        \"batchStatus\": \"pass\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 132,\n        \"batchName\": \"test\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"pass\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 220,\n        \"programName\": \"Saleforce\"\n    },\n    {\n        \"batchId\": 285,\n        \"batchName\": \"test\",\n        \"batchDescription\": \"something\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 999,\n        \"programName\": \"Updated by ID by Path-Jun23-Lightning API Hackers-DA-14\"\n    },\n    {\n        \"batchId\": 281,\n        \"batchName\": \"test\",\n        \"batchDescription\": \"something\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 156,\n        \"programName\": \"June 8euejx39m6g postman_pioneer_sdet104\"\n    },\n    {\n        \"batchId\": 280,\n        \"batchName\": \"test\",\n        \"batchDescription\": \"something\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 155,\n        \"programName\": \"Jun23-SparkPlugs-SDET-004\"\n    },\n    {\n        \"batchId\": 91,\n        \"batchName\": \"test\",\n        \"batchDescription\": \"something\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 355,\n        \"programName\": \"something\"\n    },\n    {\n        \"batchId\": 126,\n        \"batchName\": \"test\",\n        \"batchDescription\": \"something\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 230,\n        \"programName\": \"string\"\n    },\n    {\n        \"batchId\": 127,\n        \"batchName\": \"test\",\n        \"batchDescription\": \"something\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 450,\n        \"programName\": \"SDET-Sel\"\n    },\n    {\n        \"batchId\": 194,\n        \"batchName\": \"test\",\n        \"batchDescription\": \"something\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 150,\n        \"programName\": \"June xlqi29zumt postman_pioneer_sdet104\"\n    },\n    {\n        \"batchId\": 567,\n        \"batchName\": \"test\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 288,\n        \"batchName\": \"test\",\n        \"batchDescription\": \"something\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 599,\n        \"programName\": \"Jun23-spark plugs-SDET-278\"\n    },\n    {\n        \"batchId\": 93,\n        \"batchName\": \"test\",\n        \"batchDescription\": \"something\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 356,\n        \"programName\": \"Jun23-PostWomenTechies-S5\"\n    },\n    {\n        \"batchId\": 162,\n        \"batchName\": \"test\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"pass\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 66,\n        \"programName\": \"Api1\"\n    },\n    {\n        \"batchId\": 356,\n        \"batchName\": \"Test001\",\n        \"batchDescription\": \"Test001\",\n        \"batchStatus\": \"3\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 1566,\n        \"programName\": \"something004\"\n    },\n    {\n        \"batchId\": 347,\n        \"batchName\": \"Test001\",\n        \"batchDescription\": \"Test001\",\n        \"batchStatus\": \"3\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 1367,\n        \"programName\": \"something003\"\n    },\n    {\n        \"batchId\": 282,\n        \"batchName\": \"test5\",\n        \"batchDescription\": \"nothing\",\n        \"batchStatus\": \"train\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 49,\n        \"programName\": \"Jun23-apiexplorer-updated2byid-sdet-103\"\n    },\n    {\n        \"batchId\": 195,\n        \"batchName\": \"test5\",\n        \"batchDescription\": \"nothing\",\n        \"batchStatus\": \"train\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 410,\n        \"programName\": \"Jun23-Postmanpioneer-SDET-104\"\n    },\n    {\n        \"batchId\": 94,\n        \"batchName\": \"test5\",\n        \"batchDescription\": \"nothing\",\n        \"batchStatus\": \"train\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 92,\n        \"batchName\": \"test5\",\n        \"batchDescription\": \"nothing\",\n        \"batchStatus\": \"train\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 467,\n        \"batchName\": \"Test Batch description update\",\n        \"batchDescription\": \"Test Batch description update\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 24,\n        \"programName\": \"APITesting7\"\n    },\n    {\n        \"batchId\": 483,\n        \"batchName\": \"Test Batch Name1\",\n        \"batchDescription\": \"Test Batch description\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 24,\n        \"programName\": \"APITesting7\"\n    },\n    {\n        \"batchId\": 238,\n        \"batchName\": \"Testname\",\n        \"batchDescription\": \"BatchAPI6\",\n        \"batchStatus\": \"pass\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 568,\n        \"batchName\": \"testP\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 156,\n        \"batchName\": \"TestTesting1\",\n        \"batchDescription\": \"Test001\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 688,\n        \"programName\": \"something002\"\n    },\n    {\n        \"batchId\": 129,\n        \"batchName\": \"TestTesting1\",\n        \"batchDescription\": \"Test001\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 570,\n        \"programName\": \"something001\"\n    },\n    {\n        \"batchId\": 857,\n        \"batchName\": \"Thaddeus\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 577,\n        \"batchName\": \"Tremaine\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 18,\n        \"batchName\": \"updatedbatchs\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    }\n]"
										}
									]
								},
								{
									"name": "Program_Batch_TC_002_Invalid_Endpoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3a025fa-7591-4442-a35b-a6fb8685649e",
												"exec": [
													"//validate status code \r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,404);\r",
													"    pm.expect(jsonResponse.error,\"Not Found\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d1c90b9e-112b-43f2-951a-a6ffffa9c4cf",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/{{invalidEndpointGetAllBatches}}"
									},
									"response": [
										{
											"id": "5ec0fb22-194b-4f78-926b-385295e5dbcb",
											"name": "Program_Batch_TC_002_Invalid_Endpoint",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseURL}}/{{invalidEndpointGetAllBatches}}"
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Sun, 25 Jun 2023 11:23:11 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-25T11:23:11.149+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batch\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_003_Without_Endpoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a2a494d-3bd2-41b0-8a25-e113b9a79ef4",
												"exec": [
													"//validate status code \r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,404);\r",
													"    pm.expect(jsonResponse.error,\"Not Found\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f33e06d4-9c06-456b-b896-2ab78ec92e47",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/"
									},
									"response": [
										{
											"id": "c9ca8223-0db8-4e11-9ce0-bd4f761f5b80",
											"name": "Program_Batch_TC_003_Without_Endpoint",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseURL}}/"
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Sun, 25 Jun 2023 11:28:08 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-25T11:28:08.441+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_004_Invalid_Request_POST",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e04d7133-63da-4509-acfb-938892daf50d",
												"exec": [
													"//validate status code \r",
													"pm.test(\"Status code is 415\", function () {\r",
													"    pm.response.to.have.status(415);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Unsupported Media Type\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,415);\r",
													"    pm.expect(jsonResponse.error,\"Unsupported Media Type\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d524d87a-c468-420c-8dd6-322c46d51ce6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"url": "{{baseURL}}/{{getAllBatches}}"
									},
									"response": [
										{
											"id": "e8d12296-5196-439b-bffa-20fcba609620",
											"name": "Program_Batch_TC_004_Invalid_Request_POST",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": "{{baseURL}}/{{getAllBatches}}"
											},
											"status": "Unsupported Media Type",
											"code": 415,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Accept",
													"value": "application/json"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Sun, 25 Jun 2023 11:29:20 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-25T11:29:20.348+00:00\",\n    \"status\": 415,\n    \"error\": \"Unsupported Media Type\",\n    \"path\": \"/lms/batches\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_004_Invalid_Request_PUT_DELETE",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e04d7133-63da-4509-acfb-938892daf50d",
												"exec": [
													"//validate status code \r",
													"pm.test(\"Status code is 405\", function () {\r",
													"    pm.response.to.have.status(405);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Method Not Allowed\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,405);\r",
													"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "5d428e87-7a76-4c4c-8a35-9c02c039181b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"url": "{{baseURL}}/{{getAllBatches}}"
									},
									"response": [
										{
											"id": "5eef2fce-03d9-4474-a86a-1ba726776a39",
											"name": "Program_Batch_TC_004_Invalid_Request_POST",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": "{{baseURL}}/{{getAllBatches}}"
											},
											"status": "Unsupported Media Type",
											"code": 415,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Accept",
													"value": "application/json"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Sun, 25 Jun 2023 11:29:20 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-25T11:29:20.348+00:00\",\n    \"status\": 415,\n    \"error\": \"Unsupported Media Type\",\n    \"path\": \"/lms/batches\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_005_Invalid_Request_PUT_DELETE",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b8ea0f87-27c3-4004-81f4-0c0810551bd0",
												"exec": [
													"//validate status code \r",
													"pm.test(\"Status code is 405\", function () {\r",
													"    pm.response.to.have.status(405);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Method Not Allowed\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,405);\r",
													"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ce90791a-6f95-4ecd-ae86-de14e8240dbc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"url": "{{baseURL}}/{{getAllBatches}}"
									},
									"response": [
										{
											"id": "e81bdfea-fea8-4278-9332-8a4ba340e17a",
											"name": "Program_Batch_TC_005_Invalid_Request_GET_DELETE",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": "{{baseURL}}/{{getAllBatches}}"
											},
											"status": "Method Not Allowed",
											"code": 405,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Allow",
													"value": "GET, POST"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Sun, 25 Jun 2023 11:32:15 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-25T11:32:15.395+00:00\",\n    \"status\": 405,\n    \"error\": \"Method Not Allowed\",\n    \"path\": \"/lms/batches\"\n}"
										},
										{
											"id": "85577ed7-08b5-4fc9-9b63-f5a0258ddf26",
											"name": "Program_Batch_TC_005_Invalid_Request_GET_DELETE",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": "{{baseURL}}/{{getAllBatches}}"
											},
											"status": "Method Not Allowed",
											"code": 405,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Allow",
													"value": "GET, POST"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Sun, 25 Jun 2023 11:33:06 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-25T11:33:06.896+00:00\",\n    \"status\": 405,\n    \"error\": \"Method Not Allowed\",\n    \"path\": \"/lms/batches\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_006_Invalid_Base_URL",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
												"exec": [
													"console.log(\"Due to application error displays XML code, response body validation cannot be done\");\r",
													"console.log(\"JSONError: Unexpected token '<' at 1:1<!DOCTYPE html>^\");\r",
													"\r",
													"//validate status code \r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.expect(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "5467f4c3-c116-4eba-b689-a71b970de011",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{invalidBaseUrl}}"
									},
									"response": [
										{
											"id": "1347c923-7c18-4a26-9d93-bb4ebfbefc4e",
											"name": "New Request",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Fri, 23 Jun 2023 19:13:05 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
										}
									]
								}
							],
							"id": "7df68981-4d3e-49bd-ae9f-0450b4cffaba"
						},
						{
							"name": "GET Batch By ID",
							"item": [
								{
									"name": "Program_Batch_TC_007_Valid_Batch_ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3ccc7565-6778-4447-909d-b0c23660724e",
												"exec": [
													"//validate status code\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"    \r",
													"//validate Response body\r",
													"    pm.test(\"Validate Response body\", function() {\r",
													"         \r",
													"        pm.expect(jsonResponse.batchId, pm.environment.get(\"batchId\"));\r",
													"        pm.expect(jsonResponse.batchName,pm.environment.get(\"batchName\"));\r",
													"        pm.expect(jsonResponse.batchStatus,pm.environment.get(\"batchStatus\"));\r",
													"        pm.expect(jsonResponse.batchDescription, pm.environment.get(\"batchDescription\"));;\r",
													"        pm.expect(jsonResponse.batchNoOfClasses, pm.environment.get(\"batchNoOfClasses\"));;\r",
													"        pm.expect(jsonResponse.programId, pm.environment.get(\"programId\"));;\r",
													"        pm.expect(jsonResponse.programName,pm.environment.get(\"programName\"));;\r",
													"})\r",
													"\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =  \r",
													" {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"batchId\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"batchName\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"batchDescription\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"batchStatus\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"batchNoOfClasses\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"programId\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"programName\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"batchId\",\r",
													"    \"batchName\",\r",
													"    \"batchDescription\",\r",
													"    \"batchStatus\",\r",
													"    \"batchNoOfClasses\",\r",
													"    \"programId\",\r",
													"    \"programName\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate Schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema))\r",
													" })\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "5a247bfa-e36b-4eaa-abe6-0dc51e80457c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/{{getBatchById}}/{{batchId}}"
									},
									"response": [
										{
											"id": "d442bdb9-d01e-42da-82f6-486b6fa5f4c2",
											"name": "Program_Batch_TC_007_Valid_Batch_ID",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseURL}}/{{getBatchById}}/{{batchId}}"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Mon, 26 Jun 2023 05:20:56 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"batchId\": 1504,\n    \"batchName\": \"Jun23-PostWomenTechies-SDET-100-001\",\n    \"batchDescription\": \"This batch is for Postman hackathon\",\n    \"batchStatus\": \"Active\",\n    \"batchNoOfClasses\": 10,\n    \"programId\": 3168,\n    \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_008_Without_Endpoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3a025fa-7591-4442-a35b-a6fb8685649e",
												"exec": [
													"//validate status code \r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,404);\r",
													"    pm.expect(jsonResponse.error,\"Not Found\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "bd8df851-e114-46c9-b9e1-358da61ea492",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/"
									},
									"response": []
								},
								{
									"name": "Program_Batch_TC_009_Invalid_Request_POST_PUT_DELETE",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e04d7133-63da-4509-acfb-938892daf50d",
												"exec": [
													"//validate status code \r",
													"pm.test(\"Status code is 405\", function () {\r",
													"    pm.response.to.have.status(405);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Method Not Allowed\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,405);\r",
													"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "387e4d25-f180-44b7-98e4-8f644e4e2cdb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"url": "{{baseURL}}/{{getBatchById}}/1504"
									},
									"response": [
										{
											"id": "df8356a0-9e30-485d-9dcd-0af818fcfd1c",
											"name": "Program_Batch_TC_004_Invalid_Request_POST",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": "{{baseURL}}/{{getAllBatches}}"
											},
											"status": "Unsupported Media Type",
											"code": 415,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Accept",
													"value": "application/json"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Sun, 25 Jun 2023 11:29:20 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-25T11:29:20.348+00:00\",\n    \"status\": 415,\n    \"error\": \"Unsupported Media Type\",\n    \"path\": \"/lms/batches\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_009_Invalid_Request_POST_PUT_DELETE",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e04d7133-63da-4509-acfb-938892daf50d",
												"exec": [
													"//validate status code \r",
													"pm.test(\"Status code is 405\", function () {\r",
													"    pm.response.to.have.status(405);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Method Not Allowed\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,405);\r",
													"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "854c900d-77da-4687-81e6-efb17af297ee",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"url": "{{baseURL}}/{{getBatchById}}/1504"
									},
									"response": [
										{
											"id": "d72b5ec0-d6c5-4b86-b7c7-e73810abb8d2",
											"name": "Program_Batch_TC_004_Invalid_Request_POST",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": "{{baseURL}}/{{getAllBatches}}"
											},
											"status": "Unsupported Media Type",
											"code": 415,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Accept",
													"value": "application/json"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Sun, 25 Jun 2023 11:29:20 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-25T11:29:20.348+00:00\",\n    \"status\": 415,\n    \"error\": \"Unsupported Media Type\",\n    \"path\": \"/lms/batches\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_009_Invalid_Request_POST_PUT_DELETE",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e04d7133-63da-4509-acfb-938892daf50d",
												"exec": [
													"//validate status code \r",
													"pm.test(\"Status code is 405\", function () {\r",
													"    pm.response.to.have.status(405);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Method Not Allowed\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,405);\r",
													"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "5fe90a7e-8159-47c1-bd46-d0ebe92d00d5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"url": "{{baseURL}}/{{getBatchById}}/1504"
									},
									"response": [
										{
											"id": "ad3cdc70-7631-4d9a-a62a-9bf508cbad34",
											"name": "Program_Batch_TC_009_Invalid_Request_POST_GET_DELETE",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": "{{baseURL}}/{{getBatchById}}/1504"
											},
											"status": "Method Not Allowed",
											"code": 405,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Allow",
													"value": "GET"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Mon, 26 Jun 2023 07:15:23 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-26T07:15:23.393+00:00\",\n    \"status\": 405,\n    \"error\": \"Method Not Allowed\",\n    \"path\": \"/lms/batches/batchId/1504\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_010_Non numeric_Batch_ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
												"exec": [
													"\r",
													"\r",
													"//validate status code \r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,400);\r",
													"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "9ed67982-e9c1-464f-ab86-829b685ff8c7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/{{getBatchById}}/{{Program_Batch_TC_010}}"
									},
									"response": []
								},
								{
									"name": "Program_Batch_TC_011_Special_Characters_Batch_ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
												"exec": [
													"\r",
													"\r",
													"//validate status code \r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,400);\r",
													"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "4d04caf6-ff2f-49e3-9682-f2b772b8aada",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/{{getBatchById}}/{{InvalidSpecialCharId}}"
									},
									"response": [
										{
											"id": "1646389e-8312-4763-952a-92169ab26715",
											"name": "Program_Batch_TC_011_Special_Characters_Batch_ID",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseURL}}/{{getBatchById}}/{{Program_Batch_TC_011}}"
											},
											"status": "Method Not Allowed",
											"code": 405,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Allow",
													"value": "DELETE, PUT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Mon, 26 Jun 2023 07:58:35 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-26T07:58:35.958+00:00\",\n    \"status\": 405,\n    \"error\": \"Method Not Allowed\",\n    \"path\": \"/lms/batches/batchId/\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_012_Alphanumeric_Batch_ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
												"exec": [
													"\r",
													"\r",
													"//validate status code \r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,400);\r",
													"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "bd4f343f-f847-4cd8-a67e-7127b65de3b6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/{{getBatchById}}/{{InvalidAlphanumericBatchId}}"
									},
									"response": [
										{
											"id": "c8b26b2f-32c7-498f-acc1-b24a630fb4d6",
											"name": "Program_Batch_TC_011_Special_Characters_Batch_ID",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseURL}}/{{getBatchById}}/{{Program_Batch_TC_011}}"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Mon, 26 Jun 2023 07:48:11 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-26T07:48:11.002+00:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"path\": \"/lms/batches/batchId/PostWomenTechies\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_013_Non_Existing_Batch_ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
												"exec": [
													"\r",
													"\r",
													"//validate status code \r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    var environmentVar = pm.environment.get(\"Program_Batch_TC_013\");\r",
													"    //pm.expect(jsonResponse.message,\"Batch not found with Id :  \" +environmentVar+ \" \").to.be.true;\r",
													"    pm.expect(jsonResponse.message,'Batch not found with Id : 12345678 ');\r",
													"    pm.expect(jsonResponse.success,\"false\")\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"message\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"success\": {\r",
													"      \"type\": \"boolean\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"message\",\r",
													"    \"success\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "3c787473-fec7-42ca-bf1e-c32a05c9c532",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/{{getBatchById}}/{{Program_Batch_TC_013}}"
									},
									"response": [
										{
											"id": "99204741-d664-4663-87fd-44b74be1faac",
											"name": "Program_Batch_TC_011_Special_Characters_Batch_ID",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseURL}}/{{getBatchById}}/{{Program_Batch_TC_011}}"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Mon, 26 Jun 2023 07:48:11 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-26T07:48:11.002+00:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"path\": \"/lms/batches/batchId/PostWomenTechies\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_014_Invalid_Endpoints",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
												"exec": [
													"\r",
													"\r",
													"//validate status code \r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,404);\r",
													"    pm.expect(jsonResponse.error,\"Not Found\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "a9791175-f79b-4dc0-a763-19b0c1dc6d3d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/{{Program_Batch_TC_014}}}/{{batchID}}"
									},
									"response": [
										{
											"id": "85f73e3e-85ca-473e-88c9-907719eabbd4",
											"name": "Program_Batch_TC_011_Special_Characters_Batch_ID",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseURL}}/{{getBatchById}}/{{Program_Batch_TC_011}}"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Mon, 26 Jun 2023 07:48:11 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-26T07:48:11.002+00:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"path\": \"/lms/batches/batchId/PostWomenTechies\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_015_Invalid_Base_URL",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
												"exec": [
													"console.log(\"Due to application error displays XML code, response body validation cannot be done\");\r",
													"console.log(\"JSONError: Unexpected token '<' at 1:1<!DOCTYPE html>^\");\r",
													"\r",
													"//validate status code \r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.expect(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f861688a-6597-42a2-bf1a-a3b2211e3389",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{invalidBaseUrl}}"
									},
									"response": [
										{
											"id": "38f35ad9-1878-4c49-ac69-3dc1db3f4f23",
											"name": "New Request",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Fri, 23 Jun 2023 19:13:05 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
										}
									]
								}
							],
							"id": "3eb01b29-69d3-4ef2-810f-b40b9960bb1c"
						},
						{
							"name": "GET Batch By Name",
							"item": [
								{
									"name": "Program_Batch_TC_016_Valid_Batch_Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3ccc7565-6778-4447-909d-b0c23660724e",
												"exec": [
													"//validate status code\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =  \r",
													" {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"batchId\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"batchName\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"batchDescription\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"batchStatus\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"batchNoOfClasses\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"programId\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"programName\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"batchId\",\r",
													"    \"batchName\",\r",
													"    \"batchDescription\",\r",
													"    \"batchStatus\",\r",
													"    \"batchNoOfClasses\",\r",
													"    \"programId\",\r",
													"    \"programName\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema))\r",
													" })\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "e63f933e-af21-4076-9eb2-f467c1d6c870",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/{{getBatchByName}}/{{batchName}}"
									},
									"response": [
										{
											"id": "4d3e3ad4-748e-4f77-b0fb-95a12a12b5d1",
											"name": "Program_Batch_TC_007_Valid_Batch_ID",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseURL}}/{{getBatchById}}/{{batchId}}"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Mon, 26 Jun 2023 05:20:56 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"batchId\": 1504,\n    \"batchName\": \"Jun23-PostWomenTechies-SDET-100-001\",\n    \"batchDescription\": \"This batch is for Postman hackathon\",\n    \"batchStatus\": \"Active\",\n    \"batchNoOfClasses\": 10,\n    \"programId\": 3168,\n    \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_017_Without_Endpoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3a025fa-7591-4442-a35b-a6fb8685649e",
												"exec": [
													"//validate status code \r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,404);\r",
													"    pm.expect(jsonResponse.error,\"Not Found\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "71101661-c015-4be3-a3b2-5cb8d741b918",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/"
									},
									"response": []
								},
								{
									"name": "Program_Batch_TC_018_Invalid_Endpoint_Alphanumeric_Batch_Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
												"exec": [
													"\r",
													"\r",
													"//validate status code \r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"pm.test(\"Validate response body\", function(){\r",
													"\r",
													"    //pm.expect(jsonResponse.message,\"programBatch with \"+ getbatchName+\"not found \").to.be.true\r",
													"    pm.expect(jsonResponse.message).to.include(\"programBatch\");\r",
													"    pm.expect(jsonResponse.success,\"false\")\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"message\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"success\": {\r",
													"      \"type\": \"boolean\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"message\",\r",
													"    \"success\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "54e1316d-2da6-4ef0-a4ac-9bf0ce30c16a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/{{getBatchByName}}/{{InvalidAlphanumericBatchId}}"
									},
									"response": [
										{
											"id": "2c2acd0d-b8c1-47e3-b7fc-9d878380605f",
											"name": "Program_Batch_TC_011_Special_Characters_Batch_ID",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseURL}}/{{getBatchById}}/{{Program_Batch_TC_011}}"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Mon, 26 Jun 2023 07:48:11 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-26T07:48:11.002+00:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"path\": \"/lms/batches/batchId/PostWomenTechies\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_019_Invalid_Endpoint_Non_Existing_Batch_ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
												"exec": [
													"\r",
													"\r",
													"//validate status code \r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.message).to.include(\"programBatch\");\r",
													"    //pm.expect(jsonResponse.message,\"programBatch with \"+ batchName+\"not found \").to.be.true\r",
													"    pm.expect(jsonResponse.success,\"false\")\r",
													"})\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"message\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"success\": {\r",
													"      \"type\": \"boolean\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"message\",\r",
													"    \"success\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "37a56632-2ad9-4afb-9bbb-b1e826c741eb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/{{getBatchByName}}/{{invalidbatchName}}"
									},
									"response": [
										{
											"id": "7fd80cfe-c57f-43a1-8f4f-ad2fb4ae074f",
											"name": "Program_Batch_TC_011_Special_Characters_Batch_ID",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseURL}}/{{getBatchById}}/{{Program_Batch_TC_011}}"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Mon, 26 Jun 2023 07:48:11 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-26T07:48:11.002+00:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"path\": \"/lms/batches/batchId/PostWomenTechies\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_020_Invalid_Endpoints",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
												"exec": [
													"\r",
													"\r",
													"//validate status code \r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,404);\r",
													"    pm.expect(jsonResponse.error,\"Not Found\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "4b9b0dd5-be93-443b-85cf-6b5226ebe3b9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/{{Program_Batch_TC_014}}}/{{batchName}}"
									},
									"response": [
										{
											"id": "f4f2b6bc-4a42-4619-a776-7f77555dbd60",
											"name": "Program_Batch_TC_011_Special_Characters_Batch_ID",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseURL}}/{{getBatchById}}/{{Program_Batch_TC_011}}"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Mon, 26 Jun 2023 07:48:11 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-26T07:48:11.002+00:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"path\": \"/lms/batches/batchId/PostWomenTechies\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_021_Invalid_Request_POST_PUT_DELETE",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e04d7133-63da-4509-acfb-938892daf50d",
												"exec": [
													"//validate status code \r",
													"pm.test(\"Status code is 405\", function () {\r",
													"    pm.response.to.have.status(405);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Method Not Allowed\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,405);\r",
													"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "b065cd62-187b-4319-a869-2ba78564e772",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"url": "{{baseURL}}/{{getBatchByName}}/{{batchName}}"
									},
									"response": [
										{
											"id": "d895b89f-1838-459d-b465-cfd2523ae757",
											"name": "Program_Batch_TC_004_Invalid_Request_POST",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": "{{baseURL}}/{{getAllBatches}}"
											},
											"status": "Unsupported Media Type",
											"code": 415,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Accept",
													"value": "application/json"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Sun, 25 Jun 2023 11:29:20 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-25T11:29:20.348+00:00\",\n    \"status\": 415,\n    \"error\": \"Unsupported Media Type\",\n    \"path\": \"/lms/batches\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_021_Invalid_Request_POST_PUT_DELETE",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e04d7133-63da-4509-acfb-938892daf50d",
												"exec": [
													"//validate status code \r",
													"pm.test(\"Status code is 405\", function () {\r",
													"    pm.response.to.have.status(405);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Method Not Allowed\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,405);\r",
													"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "338395ed-bf17-44b2-88ab-22d53ae9acfa",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"url": "{{baseURL}}/{{getBatchByName}}/{{batchName}}"
									},
									"response": [
										{
											"id": "f798efb1-2965-40d9-939d-1dd0cc17eb9a",
											"name": "Program_Batch_TC_004_Invalid_Request_POST",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": "{{baseURL}}/{{getAllBatches}}"
											},
											"status": "Unsupported Media Type",
											"code": 415,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Accept",
													"value": "application/json"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Sun, 25 Jun 2023 11:29:20 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-25T11:29:20.348+00:00\",\n    \"status\": 415,\n    \"error\": \"Unsupported Media Type\",\n    \"path\": \"/lms/batches\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_021_Invalid_Request_POST_PUT_DELETE",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e04d7133-63da-4509-acfb-938892daf50d",
												"exec": [
													"//validate status code \r",
													"pm.test(\"Status code is 405\", function () {\r",
													"    pm.response.to.have.status(405);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Method Not Allowed\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,405);\r",
													"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "93f9ad2e-721a-429a-b94e-f5a1d6d74c64",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"url": "{{baseURL}}/{{getBatchByName}}/{{getDELbyProgramId}}"
									},
									"response": [
										{
											"id": "8355e4c1-27bc-49a0-a0c8-3cfbee6b4cf6",
											"name": "Program_Batch_TC_004_Invalid_Request_POST",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": "{{baseURL}}/{{getAllBatches}}"
											},
											"status": "Unsupported Media Type",
											"code": 415,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Accept",
													"value": "application/json"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Sun, 25 Jun 2023 11:29:20 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-25T11:29:20.348+00:00\",\n    \"status\": 415,\n    \"error\": \"Unsupported Media Type\",\n    \"path\": \"/lms/batches\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_022_Invalid_Base_URL",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
												"exec": [
													"console.log(\"Due to application error displays XML code, response body validation cannot be done\");\r",
													"console.log(\"JSONError: Unexpected token '<' at 1:1<!DOCTYPE html>^\");\r",
													"\r",
													"//validate status code \r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.expect(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "2c081819-8f94-47e5-b66e-28ec683d19f3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{invalidBaseUrl}}"
									},
									"response": [
										{
											"id": "6f9661aa-43f1-4cc7-a73b-3a9454c232be",
											"name": "New Request",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Fri, 23 Jun 2023 19:13:05 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
										}
									]
								}
							],
							"id": "58e8fb68-48cd-4039-b5ca-31da42bd2e0e"
						},
						{
							"name": "GET Batch By Program Id",
							"item": [
								{
									"name": "Program_Batch_TC_023_Valid_Program ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3ccc7565-6778-4447-909d-b0c23660724e",
												"exec": [
													"//validate status code\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"    \r",
													"//validate Response body\r",
													"\r",
													"    pm.test(\"Validate response body\", function(){\r",
													"    \r",
													"    //pm.expect(jsonResponse.message,\"programBatch with \"+ invalidProgramId+\"not found \").to.be.true\r",
													"    //pm.expect(jsonResponse.success,\"false\")\r",
													"\r",
													"         \r",
													"        pm.expect(jsonResponse.batchId, pm.environment.get(\"batchId\"));\r",
													"        pm.expect(jsonResponse.batchName,pm.environment.get(\"batchName\"));\r",
													"        pm.expect(jsonResponse.batchStatus,pm.environment.get(\"batchStatus\"));\r",
													"        pm.expect(jsonResponse.batchDescription, pm.environment.get(\"batchDescription\"));;\r",
													"        pm.expect(jsonResponse.batchNoOfClasses, pm.environment.get(\"batchNoOfClasses\"));;\r",
													"        pm.expect(jsonResponse.programId, pm.environment.get(\"programId\"));;\r",
													"        pm.expect(jsonResponse.programName,pm.environment.get(\"programName\"));;\r",
													"})\r",
													"\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =  \r",
													" {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"batchId\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"batchName\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"batchDescription\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"batchStatus\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"batchNoOfClasses\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"programId\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"programName\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"batchId\",\r",
													"    \"batchName\",\r",
													"    \"batchDescription\",\r",
													"    \"batchStatus\",\r",
													"    \"batchNoOfClasses\",\r",
													"    \"programId\",\r",
													"    \"programName\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse[0],schema))\r",
													" })\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "a7ef4c3d-3af4-45dd-a1fc-e1be91b13acb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/{{getBatchByProgramId}}/{{programID}}"
									},
									"response": [
										{
											"id": "4e02388f-8f0d-4eb6-b33d-d19952e6d7de",
											"name": "Program_Batch_TC_007_Valid_Batch_ID",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseURL}}/{{getBatchById}}/{{batchId}}"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Mon, 26 Jun 2023 05:20:56 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"batchId\": 1504,\n    \"batchName\": \"Jun23-PostWomenTechies-SDET-100-001\",\n    \"batchDescription\": \"This batch is for Postman hackathon\",\n    \"batchStatus\": \"Active\",\n    \"batchNoOfClasses\": 10,\n    \"programId\": 3168,\n    \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_024_Invalid_Endpoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "31cc4368-7ac4-4c95-95b4-e5c2a979022e",
												"exec": [
													"\r",
													"//validate status code \r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,404);\r",
													"    pm.expect(jsonResponse.error,\"Not Found\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "5f59ca81-6d22-4957-9d9a-c4ac7132ccc9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/{{invalidEndpointGetAllBatches}}/{{programID}}"
									},
									"response": []
								},
								{
									"name": "Program_Batch_TC_025_Invalid_Request_POST_GET_DELETE",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e04d7133-63da-4509-acfb-938892daf50d",
												"exec": [
													"//validate status code \r",
													"pm.test(\"Status code is 405\", function () {\r",
													"    pm.response.to.have.status(405);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Method Not Allowed\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,405);\r",
													"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "50beabad-57ea-4670-905b-e2c34709f7ea",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"url": "{{baseURL}}/{{getBatchByProgramId}}/{{batchName}}"
									},
									"response": [
										{
											"id": "96b1a32f-dd70-486e-b845-55f9243d4cc3",
											"name": "Program_Batch_TC_004_Invalid_Request_POST",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": "{{baseURL}}/{{getAllBatches}}"
											},
											"status": "Unsupported Media Type",
											"code": 415,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Accept",
													"value": "application/json"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Sun, 25 Jun 2023 11:29:20 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-25T11:29:20.348+00:00\",\n    \"status\": 415,\n    \"error\": \"Unsupported Media Type\",\n    \"path\": \"/lms/batches\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_025_Invalid_Request_POST_GET_DELETE",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e04d7133-63da-4509-acfb-938892daf50d",
												"exec": [
													"//validate status code \r",
													"pm.test(\"Status code is 405\", function () {\r",
													"    pm.response.to.have.status(405);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Method Not Allowed\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,405);\r",
													"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d2a969c9-11ac-48fe-a898-813dadf1a7f6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"url": "{{baseURL}}/{{getBatchByProgramId}}/{{batchName}}"
									},
									"response": [
										{
											"id": "d03d9034-1711-407e-9c90-5fcfcc34eacd",
											"name": "Program_Batch_TC_004_Invalid_Request_POST",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": "{{baseURL}}/{{getAllBatches}}"
											},
											"status": "Unsupported Media Type",
											"code": 415,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Accept",
													"value": "application/json"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Sun, 25 Jun 2023 11:29:20 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-25T11:29:20.348+00:00\",\n    \"status\": 415,\n    \"error\": \"Unsupported Media Type\",\n    \"path\": \"/lms/batches\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_025_Invalid_Request_POST_GET_DELETE",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e04d7133-63da-4509-acfb-938892daf50d",
												"exec": [
													"//validate status code \r",
													"pm.test(\"Status code is 405\", function () {\r",
													"    pm.response.to.have.status(405);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Method Not Allowed\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,405);\r",
													"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "1588363b-902e-4297-8f01-ce088753209c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"url": "{{baseURL}}/{{getBatchByProgramId}}/{{getDELbyProgramId}}"
									},
									"response": [
										{
											"id": "40b0e110-760d-4828-a24e-3144467fedc6",
											"name": "Program_Batch_TC_009_Invalid_Request_POST_GET_DELETE",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": "{{baseURL}}/{{getBatchById}}/1504"
											},
											"status": "Method Not Allowed",
											"code": 405,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Allow",
													"value": "GET"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Mon, 26 Jun 2023 07:15:23 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-26T07:15:23.393+00:00\",\n    \"status\": 405,\n    \"error\": \"Method Not Allowed\",\n    \"path\": \"/lms/batches/batchId/1504\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_026_Program ID_in_Non numeric",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
												"exec": [
													"\r",
													"\r",
													"//validate status code \r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,400);\r",
													"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "47f8abb8-c334-4a7f-aeff-bd41d684d79a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/{{getBatchByProgramId}}/{{Program_Batch_TC_010}}"
									},
									"response": [
										{
											"id": "914154d1-eb6e-4930-8f51-13321bb8c9bf",
											"name": "New Request",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Fri, 23 Jun 2023 19:13:05 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_027__Program ID_in_Special_Characters",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
												"exec": [
													"//validate status code \r",
													"pm.test(\"Status code is 405\", function () {\r",
													"    pm.response.to.have.status(405);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Method Not Allowed\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,405);\r",
													"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ee6a855b-45b2-49aa-8fa4-4130dd6da6e5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/{{getBatchByProgramId}}/{{InvalidSpecialCharId}}"
									},
									"response": [
										{
											"id": "deea66cc-d4a8-4c22-a906-2c995800a11c",
											"name": "Program_Batch_TC_011_Special_Characters_Batch_ID",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseURL}}/{{getBatchById}}/{{Program_Batch_TC_011}}"
											},
											"status": "Method Not Allowed",
											"code": 405,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Allow",
													"value": "DELETE, PUT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Mon, 26 Jun 2023 07:58:35 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-26T07:58:35.958+00:00\",\n    \"status\": 405,\n    \"error\": \"Method Not Allowed\",\n    \"path\": \"/lms/batches/batchId/\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_028__Program ID_in_Alphanumeric",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
												"exec": [
													"//validate status code \r",
													"pm.test(\"Status code is 405\", function () {\r",
													"    pm.response.to.have.status(405);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Method Not Allowed\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,405);\r",
													"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "fbe391b3-5a20-44ff-85ee-4742295a1526",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/{{getBatchByProgramId}}/{{InvalidAlphanumericBatchId}}"
									},
									"response": [
										{
											"id": "cd081851-c0e6-46ca-b052-ca8859103db0",
											"name": "New Request",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Fri, 23 Jun 2023 19:13:05 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_029_Without_Endpoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "412781c0-e268-4edd-ae09-fe228093482a",
												"exec": [
													"\r",
													"\r",
													"//validate status code \r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,404);\r",
													"    pm.expect(jsonResponse.error,\"Not Found\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "9c61e9e8-682b-47d0-8873-bd07bf55655d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/"
									},
									"response": []
								},
								{
									"name": "Program_Batch_TC_030_Non_Existing_Batch_ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
												"exec": [
													"\r",
													"\r",
													"//validate status code \r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    var invalidProgramId = pm.variables.get(invalidProgramId);\r",
													"    //pm.expect(jsonResponse.message,\"programBatch with \"+ invalidProgramId+\"not found \").to.be.true\r",
													"    pm.expect(jsonResponse.success,\"false\")\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"message\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"success\": {\r",
													"      \"type\": \"boolean\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"message\",\r",
													"    \"success\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "e12e2452-0e57-4702-b720-ce17e0494034",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/{{getBatchByProgramId}}/{{Program_Batch_TC_013}}"
									},
									"response": [
										{
											"id": "fef020ef-af40-45dc-8124-8bbab8bcb9d3",
											"name": "New Request",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Fri, 23 Jun 2023 19:13:05 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_031_Invalid_Base_URL",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
												"exec": [
													"console.log(\"Due to application error displays XML code, response body validation cannot be done\");\r",
													"console.log(\"JSONError: Unexpected token '<' at 1:1<!DOCTYPE html>^\");\r",
													"\r",
													"//validate status code \r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.expect(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "bc7309ba-988c-4774-8191-6bd2d7af7f1d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{invalidBaseUrl}}"
									},
									"response": [
										{
											"id": "cea20260-7fed-48a2-ac8f-92b34374b3c7",
											"name": "New Request",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Fri, 23 Jun 2023 19:13:05 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
										}
									]
								}
							],
							"id": "5f6a638e-d8da-44c1-b65e-cf7f20394b38"
						}
					],
					"id": "c4e37b30-513b-428c-a148-c4f482f787f1"
				},
				{
					"name": "POST Batch - Create Batch",
					"item": [
						{
							"name": "Program_Batch_TC_032_Create Batch_Random_Value_BatchId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0b597a45-7a08-408b-a45f-2490b3020190",
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    //pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    //pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =  \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"batchName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchNoOfClasses\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"batchName\",\r",
											"    \"batchDescription\",\r",
											"    \"batchStatus\",\r",
											"    \"batchNoOfClasses\",\r",
											"    \"programId\",\r",
											"    \"programName\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse[0],schema))\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ff08fe0e-074e-4d6b-9ee5-953eb89c6770",
										"exec": [
											"const randno = Math.floor(Math.random()*10000+1);\r",
											"var randomstr = \"Jun23-PostwomenTechies-SDET-Selenium-100-\"+randno;\r",
											"\r",
											"pm.environment.set(\"batchId\",1);\r",
											"pm.environment.set(\"batchName\",randomstr);\r",
											"pm.environment.set(\"batchDescription\",\"This is for Selenium Assignment\");\r",
											"pm.environment.set(\"batchStatus\",\"Active\");\r",
											"pm.environment.set(\"batchNoOfClasses\",10);\r",
											"pm.environment.set(\"programName\",\"Jun23-PostWomenTechies-SDET-100-100\");\r",
											"pm.environment.set(\"programId\",3168);\r",
											"\r",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a9e2ba34-fd4f-40fc-90ca-ee045317f51d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n {\r\n        \"batchId\": 0,\r\n        \"batchName\": \"{{randomBatchName}}\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{programId}},\r\n        \"programName\": \"{{programName}}\"\r\n        }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{createBatch}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_033_34_54_35Create Batch_data_driven",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0b597a45-7a08-408b-a45f-2490b3020190",
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"//validate status message\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//validate Response body\r",
											"\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"var id = jsonResponse.batchId;\r",
											"console.log(id);\r",
											"pm.environment.set(\"createdBatchId\", id);\r",
											"console.log(id);\r",
											"    \r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =  \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"batchName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchNoOfClasses\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"batchName\",\r",
											"    \"batchDescription\",\r",
											"    \"batchStatus\",\r",
											"    \"batchNoOfClasses\",\r",
											"    \"programId\",\r",
											"    \"programName\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse[0],schema))\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "8cacd166-0fff-4c31-9f5e-3a0fd9236777",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n {\r\n        \"batchId\": 0,\r\n        \"batchName\": \"{{batchName}}\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{programId}},\r\n        \"programName\": \"{{programName}}\"\r\n        }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{createBatch}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_036_Without_Endpoints",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e938d82b-c7f4-48c1-98e0-42dc4977face",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3418404f-146f-4144-b287-07f92b9506fe",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"batchId\": 0,\r\n        \"batchName\": \"{{batchName}}\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{programId}},\r\n        \"programName\": \"{{programName}}\"\r\n        }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{withoutEndpoint}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_037_Invalid_Endpoints",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "5795dcf3-82e3-4dce-a7fc-6dcf7911e8fc",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"batchId\": 0,\r\n        \"batchName\": \"{{batchName}}\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{programId}},\r\n        \"programName\": \"{{programName}}\"\r\n        }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{invalidEndpoint}}"
							},
							"response": [
								{
									"id": "dcf446ff-d4ca-46f7-a954-fcfa5a232bd4",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_038_Invalid_Request_PUT_GET_DELETE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dab9668c-30f5-4205-8b21-1f21b77d6eb4",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,405);\r",
											"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "383b7d70-e7a1-49b9-a06c-4e50cf4e1d8b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"batchId\": 0,\r\n        \"batchName\": \"{{batchName}}\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{programId}},\r\n        \"programName\": \"{{programName}}\"\r\n        }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{createBatch}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_038_Invalid_Request_PUT_GET_DELETE_invalid_Batch_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dab9668c-30f5-4205-8b21-1f21b77d6eb4",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,405);\r",
											"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "9a0a3b34-16b2-4186-983e-a49d94b06692",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"batchId\": 0,\r\n        \"batchName\": \"{{batchName}}\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{programId}},\r\n        \"programName\": \"{{programName}}\"\r\n        }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{createBatch}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_038_Invalid_Request_PUT_GET_DELETE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dab9668c-30f5-4205-8b21-1f21b77d6eb4",
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"    \r",
											"//validate Response body\r",
											"    pm.test(\"Validate Response body\", function() {\r",
											"         \r",
											"        pm.expect(jsonResponse.batchId, pm.environment.get(\"batchId\"));\r",
											"        pm.expect(jsonResponse.batchName,pm.environment.get(\"batchName\"));\r",
											"        pm.expect(jsonResponse.batchStatus,pm.environment.get(\"batchStatus\"));\r",
											"        pm.expect(jsonResponse.batchDescription, pm.environment.get(\"batchDescription\"));;\r",
											"        pm.expect(jsonResponse.batchNoOfClasses, pm.environment.get(\"batchNoOfClasses\"));;\r",
											"        pm.expect(jsonResponse.programId, pm.environment.get(\"programId\"));;\r",
											"        pm.expect(jsonResponse.programName,pm.environment.get(\"programName\"));;\r",
											"})\r",
											"\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =  \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"batchName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchNoOfClasses\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"batchName\",\r",
											"    \"batchDescription\",\r",
											"    \"batchStatus\",\r",
											"    \"batchNoOfClasses\",\r",
											"    \"programId\",\r",
											"    \"programName\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate Schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema))\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "aea5a232-1759-4882-a76a-43a7ed3a66e3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"batchId\": 0,\r\n        \"batchName\": \"{{batchName}}\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{programId}},\r\n        \"programName\": \"{{programName}}\"\r\n        }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{createBatch}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_039_Invalid_Base_URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"console.log(\"Due to application error displays XML code, response body validation cannot be done\");\r",
											"console.log(\"JSONError: Unexpected token '<' at 1:1<!DOCTYPE html>^\");\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.expect(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "dc7d587a-448f-4867-b019-a39bd24a385e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{invalidBaseUrl}}/{{createBatch}}"
							},
							"response": [
								{
									"id": "432414e2-e475-4ce9-b14b-6ee0640d035a",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_041_Without_Request_body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 415\", function () {\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Unsupported Media Type\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,415);\r",
											"    pm.expect(jsonResponse.error,\"Unsupported Media Type\");\r",
											"})\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema))\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "615ec0c0-1f3d-4ea6-99b5-31c8578b5185",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{createBatch}}"
							},
							"response": [
								{
									"id": "98e90abe-9009-4a1b-be56-89507aa29ff8",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_042_Already_Existing_Batch",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    //pm.expect(jsonResponse.message,\"Program \"+ pm.variables.get(\"programID\") +\"with\" + pm.variables.get(\"batchId\")+\"already exists: ; Please give a different batch Name or Choose a different Program\");\r",
											"    pm.expect(jsonResponse.message).to.include(\"already exists\");\r",
											"    pm.expect(jsonResponse.success,\"false\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "dbe08db4-29e6-433c-985c-fe6df56a09c2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"batchId\": 0,\r\n        \"batchName\": \"{{batchName}}\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{programId}},\r\n        \"programName\": \"{{programName}}\"\r\n        }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{createBatch}}"
							},
							"response": [
								{
									"id": "27c51c87-070e-4926-896e-e317e2777dfb",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_043_Without_Batch_Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.message,\"Batch Name is mandatory\");\r",
											"    pm.expect(jsonResponse.success,\"false\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.false;\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "6dfaec9b-46ea-4a6f-ae60-5b60afd0976a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"batchId\": 0,\r\n        //\"batchName\": \"{{batchName}}\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{programId}},\r\n        \"programName\": \"{{programName}}\"\r\n        }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{createBatch}}"
							},
							"response": [
								{
									"id": "51677567-d278-43e6-af7b-fa232a74f411",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_044_Without_Batch_Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.message,\"Batch status is needed\");\r",
											"    pm.expect(jsonResponse.success,\"false\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.false\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "48905ac0-eab7-474a-89b2-699cf5894799",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"batchId\": 0,\r\n        \"batchName\": \"{{batchName}}\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n       // \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{programId}},\r\n        \"programName\": \"{{programName}}\"\r\n        }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{createBatch}}"
							},
							"response": [
								{
									"id": "5bab2504-135e-4cd7-a5b1-28d49b705d40",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_045_Without_Program_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.message,\" ProgramId field is needed; It should be a positive number \");\r",
											"    pm.expect(jsonResponse.success,\"false\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.false\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "850154e1-c571-4bb4-9ac4-c12cf76c643c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"batchId\": 0,\r\n        \"batchName\": \"{{batchName}}\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        //\"programId\": {{programId}},\r\n        \"programName\": \"{{programName}}\"\r\n        }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{createBatch}}"
							},
							"response": [
								{
									"id": "f6223827-0d3f-4507-a5d2-66a3f65b0af5",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_046_Without_Batch_No_Of_Classes",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.message,\" No of Classes is needed; It should be a positive number \");\r",
											"    pm.expect(jsonResponse.success,\"false\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.false\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "4f14619c-7c9f-43f6-92a6-f87d7e78c14f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"batchId\": 0,\r\n        \"batchName\": \"{{batchName}}\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n       // \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{programId}},\r\n        \"programName\": \"{{programName}}\"\r\n        }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{createBatch}}"
							},
							"response": [
								{
									"id": "08eb7539-c231-46f8-806d-226737125c3d",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_047_Negative_value_Batch_No_Of_Classes",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.message,\" No of Classes is needed; It should be a positive number \");\r",
											"    pm.expect(jsonResponse.success,\"false\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.false\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e91a3630-c9cc-417e-b1bf-07727246f2a2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"batchId\": 0,\r\n        \"batchName\": \"{{batchName}}\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{NegbatchNoOfClasses}}\",\r\n        \"programId\": {{programId}},\r\n        \"programName\": \"{{programName}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{createBatch}}"
							},
							"response": [
								{
									"id": "78451e79-0c0c-4959-ba7c-0c6f7d1a9c5d",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_048_Batch_No_Of_Classes_as_zero",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.message,\" No of Classes is needed; It should be a positive number \");\r",
											"    pm.expect(jsonResponse.success,\"false\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema))\r",
											" })\r",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "69b34300-b7fb-48c6-9811-4765973775eb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"batchId\": 0,\r\n        \"batchName\": \"{{batchName}}\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{zeroBatchNoOfClasses}}\",\r\n        \"programId\": {{programId}},\r\n        \"programName\": \"{{programName}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{createBatch}}"
							},
							"response": [
								{
									"id": "dccd943c-621d-4668-a00c-328cbfa3adb8",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_049_Without_Batch_Description",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"\r",
											"var id = jsonResponse.batchId;\r",
											"console.log(id);\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =  \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"batchName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchNoOfClasses\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"batchName\",\r",
											"    \"batchDescription\",\r",
											"    \"batchStatus\",\r",
											"    \"batchNoOfClasses\",\r",
											"    \"programId\",\r",
											"    \"programName\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse[0],schema))\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "26cec64a-358f-4e8c-b6da-d2874196f97a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-DA-1\",\r\n  //\"batchDescription\": \" \",\r\n  \"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\":10,\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{createBatch}}"
							},
							"response": [
								{
									"id": "694acac0-a052-4b79-8570-eb24072c6c43",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_050_Program_Id_Invalid_negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "254510f2-b5f4-4223-86ab-6d2fca99a8e9",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.message,\"Program not found with Id : \" + pm.variables.get(\"programID\")+\" \");\r",
											"    pm.expect(jsonResponse.success,\"false\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema))\r",
											" })\r",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "fce01dc4-4992-450f-994a-8d91cd12f2b9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n        \"batchId\": 0,\r\n        \"batchName\": \"{{batchName}}\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{NegprogramId}},\r\n        \"programName\": \"{{programName}}\"\r\n        }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{createBatch}}"
							},
							"response": [
								{
									"id": "578965bb-bed8-4e10-bbeb-5ca31fe612d9",
									"name": "Program_Batch_TC_050_Program_Id_Invalid_negative",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \r\n  \"batchName\": \"Jun23-PostWomenTechies1\",\r\n  \"batchDescription\": \"This batch is for Postman hackathon\",\r\n  \"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"programId\": -3168\r\n  \r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/{{createBatch}}"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Tue, 27 Jun 2023 06:46:22 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"message\": \"Program not found with Id : -3168 \",\n    \"success\": false\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_051_Empty_Batch_name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "17ec847d-bac4-40dd-bfcc-de0b960ad558",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"batchId\": 0,\r\n        \"batchName\": \"\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{programId}},\r\n        \"programName\": {{programName}}\r\n\r\n        \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{createBatch}}"
							},
							"response": [
								{
									"id": "b2d5850e-36c2-4835-b28f-3e0f556593b7",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_051_without_Batch_name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.message,\" No of Classes is needed; It should be a positive number \");\r",
											"    pm.expect(jsonResponse.success,\"false\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c6a7340b-f4b2-4c42-862c-b7db80ee3b34",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"batchId\": 0,\r\n        \"batchName\": \"  \",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{programId}},\r\n        \"programName\": {{programName}}\r\n\r\n        \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{createBatch}}"
							},
							"response": [
								{
									"id": "c63d06f6-765c-4926-8530-547f781b1702",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_051_without_Program_name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.message,\" No of Classes is needed; It should be a positive number \");\r",
											"    pm.expect(jsonResponse.success,\"false\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "aa9705c3-f163-4a5d-a6da-5dd4df57ef5f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"batchId\": 0,\r\n        \"batchName\": \"3168  \",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{programId}},\r\n        \"programName\": \"{{programName}}\"\r\n\r\n        \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{createBatch}}"
							},
							"response": [
								{
									"id": "b1bcc1ac-b964-4584-8f5d-4d4de145172c",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_052_Invalid_Batch_status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2bf3e9aa-f797-4a47-8747-8adfaea06b20",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"batchId\": 0,\r\n        \"batchName\": \"{{batchName}}\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{invalidbatchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{programId}},\r\n        \"programName\": {{programName}}\r\n\r\n        \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{createBatch}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_053_Empty_Program_Id/Program Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse[3],schema))\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "298f3490-2e34-4a23-bf33-fbdaf91e55ab",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"batchId\": 0,\r\n        \"batchName\": \"{{batchName}}\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{emptyProgramId}},\r\n        \"programName\": {{programName}}\r\n\r\n        \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{createBatch}}"
							},
							"response": [
								{
									"id": "97c53d3c-da9f-4fec-8570-554ff8babe51",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_055_Invalid_Json_format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eee790c1-e530-4720-935b-1c06cc2df843",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "01f5dada-e05e-4359-9bf0-1afd4b089bda",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n    \r\n    \"batchNamee\": \"Jun23-PostWomenTechies-SDET-100-100\",\r\n    \"batchDescription\": \"This Batch is for Postman Hackathon\",\r\n    \"batchStatus\": \"Active\",\r\n    \"batchNoOfClasses\": 10,\r\n    \"programId\": 3168,\r\n    \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n  }\r\n  ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{createBatch}}"
							},
							"response": []
						}
					],
					"id": "ca256e7d-a09d-4c75-92d6-cf2384161eae"
				},
				{
					"name": "PUT Batch - Update Batch",
					"item": [
						{
							"name": "Program_Batch_TC_056_82_83_Update Batch",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ae77862-191e-4397-851d-dd1813141f98",
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"    \r",
											"//validate Response body\r",
											"    pm.test(\"Validate Response body\", function() {\r",
											"        console.log(jsonResponse.batchId);\r",
											"        console.log(jsonResponse.batchName);\r",
											"        console.log(jsonResponse.batchDescription);\r",
											"        pm.expect(jsonResponse.batchId).to.eql(4140);\r",
											"        pm.expect(jsonResponse.batchName).to.eql(\"Jun23-PostWomenTechies-SDET-100\");\r",
											"        pm.expect(jsonResponse.batchDescription).to.eql(\"This program is for participating in API Hackathon\");\r",
											"        pm.expect(jsonResponse.batchNoOfClasses).to.eql(10);\r",
											"        pm.expect(jsonResponse.programId).to.eql(3168);\r",
											"        pm.expect(jsonResponse.programName).to.eql(\"Jun26-PostWomenTechies-SDET-100\");     \r",
											"})\r",
											"\r",
											"\r",
											" //validate response json schema\r",
											"var schema =  \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"batchName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchNoOfClasses\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"batchName\",\r",
											"    \"batchDescription\",\r",
											"    \"batchStatus\",\r",
											"    \"batchNoOfClasses\",\r",
											"    \"programId\",\r",
											"    \"programName\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate Schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema))\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "26eaef3d-c362-4ed6-aa95-0f186757b951",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_057_Update Multiple Batches",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5aad067e-d9ba-49e5-bee4-22d8020d3880",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f6a4edbd-3a29-4367-8a1f-d047096432d5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n[{\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-10\",\r\n  \"batchDescription\": \"This batch is for Postman hackathon\",\r\n  \"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n},\r\n\r\n {\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-10\",\r\n  \"batchDescription\": \"This batch is for Postman hackathon\",\r\n  \"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"programId\": 4140,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": []
						},
						{
							"name": "Data_Driven_Testing_Valid_data_from_CSV_file",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "99796661-877e-4b93-af1a-2496d53c15c0",
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"    \r",
											"//validate Response body\r",
											"    pm.test(\"Validate Response body\", function() {\r",
											"        console.log(jsonResponse.batchId);\r",
											"        console.log(jsonResponse.batchName);\r",
											"        console.log(jsonResponse.batchDescription);\r",
											"        pm.expect(jsonResponse.batchId).to.eql(4140);\r",
											"        pm.expect(jsonResponse.batchName).to.eqls(\"Jun23-PostWomenTechies-SDET-100\");\r",
											"        pm.expect(jsonResponse.batchDescription).to.include(\"This program is for participating in API Hackathon\");\r",
											"        pm.expect(jsonResponse.batchNoOfClasses).to.eql(10);\r",
											"        pm.expect(jsonResponse.programId).to.eql(3168);\r",
											"        pm.expect(jsonResponse.programName).to.eql(\"Jun26-PostWomenTechies-SDET-100\");     \r",
											"})\r",
											"\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =  \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"batchName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchNoOfClasses\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"batchName\",\r",
											"    \"batchDescription\",\r",
											"    \"batchStatus\",\r",
											"    \"batchNoOfClasses\",\r",
											"    \"programId\",\r",
											"    \"programName\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate Schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema))\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c173f827-a293-4886-813b-1aa6edbe73fd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/*{\r\n        \"batchId\": {{updateBatchID}},\r\n        \"batchName\": \"{{updateBatchName}}\",\r\n        \"batchDescription\": \"{{BatchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{updateProgramId}},\r\n        \"programName\": {{programName}}\r\n        \r\n}*/\r\n\r\n{\r\n                \"batchId\": 4141,\r\n                \"batchName\": \"Jun23-PostWomenTechies-SDET-1001\",\r\n                \"batchDescription\": \"{{BatchDescription}}\",\r\n                \"batchStatus\": \"{{batchStatus}}\",\r\n                \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n                \"programId\": 3167,\r\n                \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n                \r\n        }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_059_Update_Multiple_Batch_in_requestbody",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e84387bc-0cdc-4fd9-b512-095a29e30302",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "033d7486-887e-4b71-8192-5777c2535eaa",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/*{\r\n        \"batchId\": {{updateBatchId}},\r\n        \"batchName\": \"{{batchName}}\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{programId}},\r\n        \"programName\": {{programName}}\r\n        \r\n}*/\r\n\r\n[\r\n{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n},\r\n{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}\r\n]\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_060_Invalid_Batch_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0752eb1d-de80-4151-8c21-edbfcd1e0293",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "172ab83a-eb46-4643-8d87-7ff22c6e1898",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n  \"batchId\": \"U3130\",\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchDescription\": \"This batch is for Postman hackathon\",\r\n  \"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_061_Non-Existing_Batch_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "77d3d028-f310-4b78-8f1f-546e274064c4",
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//random batchName serial number generation\r",
											"\r",
											"var random = Math.random().toString(36).substring(2);\r",
											"//batchName = Jun23-EliteForce-SDET-SDET01-001\r",
											"//Jun23-TeamName-ProgramName-BatchName-serialnumber \r",
											"/*var batchDescription = \"This batch is for Postman hackathon update-\"+random;\r",
											"pm.environment.set(\"batchDescription\",batchDescription)*/\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"    \r",
											"//validate Response body\r",
											"    pm.test(\"Validate Response body\", function() {\r",
											"        console.log(jsonResponse.batchId);\r",
											"        console.log(jsonResponse.batchName);\r",
											"        console.log(jsonResponse.batchDescription);\r",
											"        pm.expect(jsonResponse.batchId).to.not.eql(123123);\r",
											"        pm.expect(jsonResponse.batchName).to.eql(\"Jun23-PostWomenTechies-SDET-100\");\r",
											"        pm.expect(jsonResponse.batchDescription).to.eql(\"This batch is for Postman hackathon\");\r",
											"        pm.expect(jsonResponse.batchNoOfClasses).to.eql(10);\r",
											"        pm.expect(jsonResponse.programId).to.eql(3168);\r",
											"        pm.expect(jsonResponse.programName).to.eql(\"Jun26-PostWomenTechies-SDET-100\");     \r",
											"})\r",
											"\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =  \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"batchName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchNoOfClasses\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"batchName\",\r",
											"    \"batchDescription\",\r",
											"    \"batchStatus\",\r",
											"    \"batchNoOfClasses\",\r",
											"    \"programId\",\r",
											"    \"programName\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate Schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema))\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "744c7a00-7946-4e4b-aec5-46f5dfb2b984",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n  \"batchId\": \"123123\",\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchDescription\": \"This batch is for Postman hackathon\",\r\n  \"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_062_Batch_Id_in_Special_characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c8ba6ae8-0c00-4f7e-9027-8cf0258e6652",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7744caf3-2bd7-4758-92ec-ac861c145a06",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n  \"batchId\": \"3130#\",\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchDescription\": \"This batch is for Postman hackathon\",\r\n  \"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_063_Batch_Id_in_Alphanumeric",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0026711b-7889-47b7-aa24-e137cd376736",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a545c0f0-2c18-4583-b854-3940dc8654d1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n  \"batchId\": \"U3130\",\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchDescription\": \"This batch is for Postman hackathon\",\r\n  \"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_064_Without_Endpoints",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed48da9d-ec77-4755-b827-362cdb0cf333",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "0277a789-221c-4752-a6d9-9d55f27d234b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"url": "{{baseURL}}/"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_065_Invalid_Endpoints",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1dac0b27-eb03-47b5-ba39-01b01b3b9050",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f1258cfa-616e-45d8-be7b-bfb45f4c1f14",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n {\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-10\",\r\n  \"batchDescription\": \"This batch is for Postman hackathon\",\r\n  \"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{invalidEndpointGetAllBatches}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_066_Invalid_Request_PUT_GET_DELETE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dab9668c-30f5-4205-8b21-1f21b77d6eb4",
										"exec": [
											"console.log(\"Due to application error displays XML code, response body validation cannot be done\");\r",
											"console.log(\"JSONError: Unexpected token '<' at 1:1<!DOCTYPE html>^\");\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.expect(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "81dd4802-d179-4ba2-9e32-e5857af1599f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n {\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-10\",\r\n  \"batchDescription\": \"This batch is for Postman hackathon\",\r\n  \"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{invalidDelRequestBatch_Id}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_066_Invalid_Request_GET_POST_DELETE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "812f24b7-9300-4f7c-ae31-76ff48125264",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,405);\r",
											"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d9aabb4b-3a3c-4b0e-a987-e5743aae4c33",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n    \r\n    \"batchNamee\": \"Jun23-PostWomenTechies-SDET-100-100\",\r\n    \"batchDescription\": \"This Batch is for Postman Hackathon\",\r\n    \"batchStatus\": \"Active\",\r\n    \"batchNoOfClasses\": 10,\r\n    \"programId\": 3168,\r\n    \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_066_Invalid_Request_GET_POST_DELETE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e8a9a188-417b-4a41-91f3-630d69993e85",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,405);\r",
											"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "71c97644-3a78-4c68-a3f3-cccd553ee548",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n    \r\n    \"batchNamee\": \"Jun23-PostWomenTechies-SDET-100-100\",\r\n    \"batchDescription\": \"This Batch is for Postman Hackathon\",\r\n    \"batchStatus\": \"Active\",\r\n    \"batchNoOfClasses\": 10,\r\n    \"programId\": 3168,\r\n    \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_067_Invalid_baseURL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "21bb2abe-1181-4312-a919-f590cde7882f",
										"exec": [
											"console.log(\"Due to application error displays XML code, response body message validation cannot be done\");\r",
											"console.log(\"JSONError: Unexpected token '<' at 1:1<!DOCTYPE html>^\");\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.expect(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7688a567-02e5-44c3-a860-2d50efed7e09",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"url": "{{invalidBaseUrl}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_068_non_existing_Program_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ac38a94e-19a9-4c7e-ba3d-1642b4f47109",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    var environmentVar = pm.variables.get(\"programId\");\r",
											"    \r",
											"   pm.expect(jsonResponse.message,'Program not found with Id :' + environmentVar);\r",
											"    pm.expect(jsonResponse.success,\"false\")\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3f5a07de-daeb-49ea-80a9-44fb69d24d9f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-10000-002\",\r\n  \"batchDescription\": \"This batch is for Postman hackathon\",\r\n  \"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"programId\": 23568923,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{nonExistingProgramId}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_069_Without_Request_body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ca33b3cc-9065-47b7-9f7c-b92ded09c68d",
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 415\", function () {\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Unsupported Media Type\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,415);\r",
											"    pm.expect(jsonResponse.error,\"Unsupported Media Type\");\r",
											"})\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema))\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e8b99892-f40f-4a24-9db8-dc6f3a25f629",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_070_Without_Batch_name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.message,\"Batch Name is mandatory\");\r",
											"    pm.expect(jsonResponse.success,\"false\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ab1e7f34-395d-43b4-9b06-350092458595",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  //\"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n  \r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": [
								{
									"id": "2268748f-34bd-483e-929b-0a1677fa1418",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_071_Without_Batch_Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.false\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "bd1823be-e46e-474e-9838-3843238e4f88",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  //\"batchStatus\": \"Active\",\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n  \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": [
								{
									"id": "6ca04f5c-8732-40a7-bc6f-5a51742b654c",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_072_Without_Batch_No_Of_Classes",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.message,\" No of Classes is needed; It should be a positive number \");\r",
											"    pm.expect(jsonResponse.success,\"false\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "6bfff75d-8380-4fb9-8ec8-375d4c14adc5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  //\"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n  \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": [
								{
									"id": "df645c62-002d-4940-b68c-5e6c7a2323d2",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_073_Without_Program_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.message,\" ProgramId field is needed; It should be a positive number \");\r",
											"    pm.expect(jsonResponse.success,\"false\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "5ec53885-7c59-47df-b245-8f2c64c2e227",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  //\"programId\": 3168\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": [
								{
									"id": "2804a85c-c906-4bd2-b476-ad3efc346e21",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_074_Batch_No_Of_Classes_as_zero",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.message,\"Program not found with Id : \" + pm.variables.get(\"programID\")+\" \");\r",
											"    pm.expect(jsonResponse.success,\"false\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema))\r",
											" })\r",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d58d53be-222c-4534-a67c-c3f5c1b50972",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 0,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100-update\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": [
								{
									"id": "a9d3d7b5-81a2-4ba2-8f3a-aaf721c4267d",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_075_Negative_value_Batch_No_Of_Classes",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "41d63f35-3a3f-45f6-8c1a-518ae8f5ab33",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": [
								{
									"id": "fa5a1fa9-b331-4cb6-bd3f-10043e71c111",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_076_Without_Batch_Description",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"    \r",
											"//validate Response body\r",
											"    pm.test(\"Validate Response body\", function() {\r",
											"        console.log(jsonResponse.batchId);\r",
											"        console.log(jsonResponse.batchName);\r",
											"        console.log(jsonResponse.batchDescription);\r",
											"        pm.expect(jsonResponse.batchId).to.eql(4140);\r",
											"        pm.expect(jsonResponse.batchName).to.eql(\"Jun23-PostWomenTechies-SDET-100\");\r",
											"        pm.expect(jsonResponse.batchDescription).to.eql(null);\r",
											"        pm.expect(jsonResponse.batchNoOfClasses).to.eql(10);\r",
											"        pm.expect(jsonResponse.programId).to.eql(3168);\r",
											"        //pm.expect(jsonResponse.programName).to.eql(\"Jun26-PostWomenTechies-SDET-100\");     \r",
											"})\r",
											"\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =  \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"batchName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchNoOfClasses\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"batchName\",\r",
											"    \"batchDescription\",\r",
											"    \"batchStatus\",\r",
											"    \"batchNoOfClasses\",\r",
											"    \"programId\",\r",
											"    \"programName\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate Schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema))\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f68ce304-afd0-4696-a237-9cdfe643ad44",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  //\"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n  \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": [
								{
									"id": "8352e9f7-f3a0-4816-8b5f-13e71d327a6a",
									"name": "Program_Batch_TC_076_Without_Batch_Description",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  //\"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n  \r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Tue, 27 Jun 2023 13:39:14 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"batchId\": 3130,\n    \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\n    \"batchDescription\": null,\n    \"batchStatus\": \"Active\",\n    \"batchNoOfClasses\": 10,\n    \"programId\": 3168,\n    \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_077_Program_Id_as_zero_negative_value_incorrectValue",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.message,\"Program not found with Id : \" + pm.variables.get(\"programID\")+\" \");\r",
											"    pm.expect(jsonResponse.success,\"false\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema))\r",
											" })\r",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "8710361e-3bd6-45db-be3b-1348eb4b79e6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": -10,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100-update\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": [
								{
									"id": "7b930596-e11e-42cf-8bfb-04a074ea95e7",
									"name": "Program_Batch_TC_077_Program_Id_as_zero_negative_value",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": -3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100-update\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Tue, 27 Jun 2023 14:04:07 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"message\": \"Program not found with Id : -3168 \",\n    \"success\": false\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_78_Empty_Batch_name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.message,\"Batch Name is mandatory\");\r",
											"    pm.expect(jsonResponse.success,\"false\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c1617a97-70f9-4cad-9772-f8bc45cff9a9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \" \",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 0,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100-update\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": [
								{
									"id": "d9b00d5c-d465-4cd2-87dd-e2fea287fde5",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_079_Empty_Batch_status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.message,\"Batch Name is mandatory\");\r",
											"    pm.expect(jsonResponse.success,\"false\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "112dc2a9-df27-49f1-97ac-2d0f6f5f8f08",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \" \",\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": [
								{
									"id": "8dad25d1-bc5c-4491-a3d3-b9466e127f08",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_080_Empty_Batch_Description",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.message,\"Batch status is needed\");\r",
											"    pm.expect(jsonResponse.success,\"false\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e079eb47-051c-4142-8133-5717d73d1364",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \" \",\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": [
								{
									"id": "bcc2a8f3-3585-47e4-ac87-3bc98e00b55b",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_081_Invalid_Json_format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28ac5f49-6981-4be0-b1f1-c80c24f6ee02",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7c3686d1-bef3-47dc-996b-3c8e48003e51",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n    \r\n    \"batchNamee\": \"Jun23-PostWomenTechies-SDET-100-100\",\r\n    \"batchDescription\": \"This Batch is for Postman Hackathon\",\r\n    \"batchStatus\": \"Active\",\r\n    \"batchNoOfClasses\": 10,\r\n    \"programId\": 3168,\r\n    \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n  }\r\n  ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_084_Without_Program_name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0437eddf-5db4-481d-9622-dc9d087bd549",
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"    \r",
											"//validate Response body\r",
											"    pm.test(\"Validate Response body\", function() {\r",
											"        console.log(jsonResponse.batchId);\r",
											"        console.log(jsonResponse.batchName);\r",
											"        console.log(jsonResponse.batchDescription);\r",
											"        pm.expect(jsonResponse.batchId).to.eql(4140);\r",
											"        pm.expect(jsonResponse.batchName).to.eql(\"Jun23-PostWomenTechies-SDET-100\");\r",
											"        pm.expect(jsonResponse.batchDescription).to.eql(\"This program is for participating in API Hackathon\");\r",
											"        pm.expect(jsonResponse.batchNoOfClasses).to.eql(10);\r",
											"        pm.expect(jsonResponse.programId).to.eql(3168);\r",
											"        pm.expect(jsonResponse.programName).to.eql(\"Jun26-PostWomenTechies-SDET-100\").to.not.match;;     \r",
											"})\r",
											"\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =  \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"batchName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchNoOfClasses\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"batchName\",\r",
											"    \"batchDescription\",\r",
											"    \"batchStatus\",\r",
											"    \"batchNoOfClasses\",\r",
											"    \"programId\",\r",
											"    \"programName\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate Schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema))\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "45cbadae-7375-4049-9db7-367d0fd45750",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 3168\r\n  //\"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_085_Update_Program_name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4838321e-2fb4-4853-bd24-38b48cefa08a",
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"    \r",
											"//validate Response body\r",
											"    pm.test(\"Validate Response body\", function() {\r",
											"        console.log(jsonResponse.batchId);\r",
											"        console.log(jsonResponse.batchName);\r",
											"        console.log(jsonResponse.batchDescription);\r",
											"        console.log(jsonResponse.programName);\r",
											"        pm.expect(jsonResponse.batchId).to.eql(4140);\r",
											"        pm.expect(jsonResponse.batchName).to.eql(\"Jun23-PostWomenTechies-SDET-100\");\r",
											"        pm.expect(jsonResponse.batchDescription).to.eql(\"This program is for participating in API Hackathon\");\r",
											"        pm.expect(jsonResponse.batchNoOfClasses).to.eql(10);\r",
											"        pm.expect(jsonResponse.programId).to.eql(3168);\r",
											"        console.log(jsonResponse.programId)\r",
											"        pm.expect(jsonResponse.programName,\"Jun26-PostWomenTechies-SDET-100-update\").to.not.match;\r",
											"})\r",
											"\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =  \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"batchName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchNoOfClasses\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"batchName\",\r",
											"    \"batchDescription\",\r",
											"    \"batchStatus\",\r",
											"    \"batchNoOfClasses\",\r",
											"    \"programId\",\r",
											"    \"programName\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate Schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema))\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "19e1915e-e847-4580-b5e0-1db0ca9b0969",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100-update\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_081_Invalid_Json_format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28ac5f49-6981-4be0-b1f1-c80c24f6ee02",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "abdea577-42b5-44fb-a63f-c1d4947a8e4d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n    \r\n    \"batchNamee\": \"Jun23-PostWomenTechies-SDET-100-100\",\r\n    \"batchDescription\": \"This Batch is for Postman Hackathon\",\r\n    \"batchStatus\": \"Active\",\r\n    \"batchNoOfClasses\": 10,\r\n    \"programId\": 3168,\r\n    \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n  }\r\n  ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": []
						}
					],
					"id": "86937781-19be-4847-97a6-ba296017a584"
				},
				{
					"name": "DELETE Batch",
					"item": [
						{
							"name": "Program_Batch_TC_087_Delete Batch",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ddff68f0-2017-4433-baa0-cc4357a4b57e",
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											" //validating the response body\r",
											"var jsonResponse = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"   // pm.expect(jsonData.message).to.eql(\"Batch with deleted successfully\");\r",
											"    pm.expect(jsonData.success).to.eql(true);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});   \r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "247e5dec-e978-4f8a-be97-54f69c4ba76f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{baseURL}}/{{delEndPoint}}/{{createdBatchId}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_088_89_90_091_92_93_Non_Existing_Batch_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d27866d-2923-4fb1-bcf6-43581990a62b",
										"exec": [
											"console.log(\"Due to application error displays XML code, response body message validation cannot be done\");\r",
											"console.log(\"JSONError: Unexpected token '<' at 1:1<!DOCTYPE html>^\");\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.expect(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2608d06b-30c7-47b3-b637-227f767fe54a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{baseURL}}/{{delEndPoint1}}/{{alreadyDelBatchId}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_094_Batch_Id_in_Special_characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81c106f0-036e-4634-94b5-6be353c13962",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,405);\r",
											"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e9155198-c38e-4124-aab1-5a0e003b8273",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{baseURL}}/{{delEndPoint1}}/{{InvalidSpecialCharBatchId}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_095_Batch_Id_in_Alphanumeric",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81dfadcb-f1ca-4121-8a15-819020092b7e",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.message,\"Batch Name is mandatory\");\r",
											"    pm.expect(jsonResponse.success,\"false\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.false\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d63c1886-ca7f-4440-aa8f-0df9a7473003",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{baseURL}}/{{delEndPoint1}}/{{InvalidAlphanumericBatchId}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_096_98_Without_Endpoints",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f50ad158-e651-43cc-993e-2e78741d5528",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,405);\r",
											"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema))\r",
											" })"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "68a0c50f-9fce-422c-ad60-5facf67b0f62",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{baseURL}}/{{delEndPoint1}}/"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_097_Invalid_Endpoints",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c48450d0-38de-4cc6-8ae3-1f09bcd1bfdd",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema))\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c72a49c1-12c0-4aaf-9bb7-685badea17aa",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{baseURL}}/{{invalidEndpointGetAllBatches}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_099_Invalid_Request_GET_POST_PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c4851f16-4fa6-4db3-b746-589efb724862",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,405);\r",
											"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e52ee94f-2b84-45f1-aa0b-53526d3e6c59",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/{{delEndPoint1}}/{{delBatchId}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_094_095_099_Invalid_Request_GET_POST_PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bd1fc867-94fd-46d7-ad3f-5e5f55c03dcc",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,405);\r",
											"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b254e14d-e3c5-46d9-95af-46f2474990c0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": "{{baseURL}}/{{delEndPoint1}}/{{delBatchId}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_099_Invalid_Request_GET_POST_PUT Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "546b60e5-6163-4497-b8ca-72310bcc3a90",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 415\", function () {\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Unsupported Media Type\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,415);\r",
											"    pm.expect(jsonResponse.error,\"Unsupported Media Type\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "fd0ada1a-cb5a-46f9-92b2-e71564d44af9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"url": "{{baseURL}}/{{delEndPoint1}}/{{delBatchId}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_100_Invalid_baseURL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "21bb2abe-1181-4312-a919-f590cde7882f",
										"exec": [
											"console.log(\"Due to application error displays XML code, response body validation cannot be done\");\r",
											"console.log(\"JSONError: Unexpected token '<' at 1:1<!DOCTYPE html>^\");\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.expect(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b656574d-e2b7-426b-8172-309ca2a51597",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{invalidBaseUrl}}"
							},
							"response": []
						}
					],
					"id": "a8073d6b-879a-4696-811d-4308d6f27de6"
				}
			],
			"id": "f417f1a3-3782-43f5-b3cb-1734feeaac38"
		},
		{
			"name": "Assignment_Module",
			"item": [
				{
					"name": "GET_All_Assignments",
					"item": [
						{
							"name": "Assignment_TC_001_Valid_Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1fed7802-1e13-4568-ba91-a9994c0b5cce",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validating the data type of the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data type of the response body\",() => {\r",
											"    pm.expect(jsonData[2].assignmentDescription).to.be.a(\"string\");\r",
											"    pm.expect(jsonData[2].assignmentId).to.be.a(\"number\");\r",
											"    pm.expect(jsonData[2].assignmentName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData[2].batchId).to.be.a(\"number\");\r",
											"    pm.expect(jsonData[2].comments).to.be.a(\"string\");\r",
											"    pm.expect(jsonData[2].createdBy).to.be.a(\"string\");\r",
											"    pm.expect(jsonData[2].dueDate).to.be.a(\"string\");\r",
											"    pm.expect(jsonData[2].graderId).to.be.a(\"string\");\r",
											"    pm.expect(jsonData[2].pathAttachment1).to.be.a(\"string\");\r",
											"    pm.expect(jsonData[2].pathAttachment2).to.be.a(\"string\");\r",
											"    pm.expect(jsonData[2].pathAttachment3).to.be.a(\"string\");\r",
											"    pm.expect(jsonData[2].pathAttachment4).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"//validating the JSON schema\r",
											"var schema = \r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"assignmentId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"assignmentName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"assignmentDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"comments\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"dueDate\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment1\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment2\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment3\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment4\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment5\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"createdBy\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"graderId\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"assignmentId\",\r",
											"    \"assignmentName\",\r",
											"    \"assignmentDescription\",\r",
											"    \"comments\",\r",
											"    \"dueDate\",\r",
											"    \"pathAttachment1\",\r",
											"    \"pathAttachment2\",\r",
											"    \"pathAttachment3\",\r",
											"    \"pathAttachment4\",\r",
											"    \"pathAttachment5\",\r",
											"    \"batchId\",\r",
											"    \"createdBy\",\r",
											"    \"graderId\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData[2],schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "5facddf5-21bc-4107-9254-93139f7e97eb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_002_Invalid_Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25128c1a-a432-4e35-b68a-99f728836fe6",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the data type of the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.status).to.eql(404);\r",
											"    pm.expect(jsonData.error).to.eql(\"Not Found\");\r",
											"    \r",
											"});\r",
											"\r",
											"//validating the JSON schema\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "672f0c4d-25e8-4533-9cdb-5d0f158d0bb6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/{{invalid_endpoint_1}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_003_Without_Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d047211b-c4e5-4d7d-8e05-06426e6bdb93",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the data type of the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.status).to.eql(404);\r",
											"    pm.expect(jsonData.error).to.eql(\"Not Found\");\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"//validating the JSON schema\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c8373750-f31d-42cc-871a-3d5c592b1076",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_004_Invalid_Baseurl",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9017fc16-f6da-4a63-8d33-961bff8a0985",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/html;charset=utf-8');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f655a365-f2dd-4dec-b39d-104811574ebf",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{invalid_baseURL}}/{{Assgn_endpoint_1}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_005_Invalid_Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6aa8ae7a-4b1d-40c1-806a-a102549e98f8",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "476160ea-a6b2-40b8-96f8-30196949e698",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}"
							},
							"response": []
						}
					],
					"id": "058d3919-e5d8-4c06-8b36-059103ea6a7c"
				},
				{
					"name": "GET_By_ID",
					"item": [
						{
							"name": "Assignment_TC_006_Valid_Inputs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "372b9568-d634-43a1-a402-a5917df633ef",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validating the data type of the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data type of the response body\",() => {\r",
											"    pm.expect(jsonData.assignmentDescription).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.assignmentId).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.assignmentName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.batchId).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.comments).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.createdBy).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.dueDate).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.graderId).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.pathAttachment1).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.pathAttachment2).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.pathAttachment3).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.pathAttachment4).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the JSON schema\r",
											"var schema = \r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"assignmentId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"assignmentName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"assignmentDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"comments\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"dueDate\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment1\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment2\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment3\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment4\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment5\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"createdBy\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"graderId\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"assignmentId\",\r",
											"    \"assignmentName\",\r",
											"    \"assignmentDescription\",\r",
											"    \"comments\",\r",
											"    \"dueDate\",\r",
											"    \"pathAttachment1\",\r",
											"    \"pathAttachment2\",\r",
											"    \"pathAttachment3\",\r",
											"    \"pathAttachment4\",\r",
											"    \"pathAttachment5\",\r",
											"    \"batchId\",\r",
											"    \"createdBy\",\r",
											"    \"graderId\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "0ce94d9d-fb68-4079-8dbb-b7706e7a0a6c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}/{{Assign_assignmentId}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_007_Invalid_Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22e62527-5fa6-4cea-b849-95d33a34475e",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the data type of the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.status).to.eql(404);\r",
											"    pm.expect(jsonData.error).to.eql(\"Not Found\");\r",
											"    \r",
											"});\r",
											"\r",
											"//validating the JSON schema\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "9e3ba093-7617-4ddf-b95a-fabc477adb2c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/{{invalid_endpoint_1}}/{{Assign_assignmentId}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_008_Invalid_AssignmentID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8bffb5b2-7b33-436d-8484-3aac53230d11",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.message).to.eql(\"Assignment not found with Id : 999999 \");\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c960604d-2175-40ed-9699-31db5574b3d5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}/{{invalid_assignmentId}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_009_Invalid_Baseurl",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d709e4e1-dfc0-4b19-96ba-e25225455b49",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/html;charset=utf-8');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7df8c451-296c-44ce-9567-8a7cccf735bc",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{invalid_baseURL}}/{{Assgn_endpoint_1}}/{{Assign_assignmentId}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_010_Invalid_Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d350e0aa-df2e-4cf1-abba-30bd13478988",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b7e27b48-3ff0-4aee-bdf0-876d66a0bce3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}/{{Assign_assignmentId}}"
							},
							"response": []
						}
					],
					"id": "fb0a38c6-314c-43a7-8278-97b59756f38b"
				},
				{
					"name": "GET_Assignment_for_Batch",
					"item": [
						{
							"name": "Assignment_TC_011_Valid_Inputs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dcf365e1-91b2-42ac-8fb9-74ea6ea9017e",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validating the data type of the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data type of the response body\",() => {\r",
											"    pm.expect(jsonData[0].assignmentDescription).to.be.a(\"string\");\r",
											"    pm.expect(jsonData[0].assignmentId).to.be.a(\"number\");\r",
											"    pm.expect(jsonData[0].assignmentName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData[0].batchId).to.be.a(\"number\");\r",
											"    pm.expect(jsonData[0].comments).to.be.a(\"string\");\r",
											"    pm.expect(jsonData[0].createdBy).to.be.a(\"string\");\r",
											"    pm.expect(jsonData[0].dueDate).to.be.a(\"string\");\r",
											"    pm.expect(jsonData[0].graderId).to.be.a(\"string\");\r",
											"    pm.expect(jsonData[0].pathAttachment1).to.be.a(\"string\");\r",
											"    pm.expect(jsonData[0].pathAttachment2).to.be.a(\"string\");\r",
											"    pm.expect(jsonData[0].pathAttachment3).to.be.a(\"string\");\r",
											"    pm.expect(jsonData[0].pathAttachment4).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the JSON schema\r",
											"var schema = \r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"assignmentId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"assignmentName\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"assignmentDescription\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"comments\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"dueDate\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"pathAttachment1\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"pathAttachment2\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"pathAttachment3\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"pathAttachment4\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"pathAttachment5\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"batchId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"createdBy\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"graderId\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"assignmentId\",\r",
											"        \"assignmentName\",\r",
											"        \"assignmentDescription\",\r",
											"        \"comments\",\r",
											"        \"dueDate\",\r",
											"        \"pathAttachment1\",\r",
											"        \"pathAttachment2\",\r",
											"        \"pathAttachment3\",\r",
											"        \"pathAttachment4\",\r",
											"        \"pathAttachment5\",\r",
											"        \"batchId\",\r",
											"        \"createdBy\",\r",
											"        \"graderId\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "8cf1ee22-bd54-4a3a-86f9-ac6dd6ae28df",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/{{Assgn_Endpoint_2}}/{{Assign_batchId}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_012_ValidID_ButNoAssignments",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f050ac1d-2ab9-4747-9681-1a6bdaaa0cd5",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.message).to.eql(\"Assignments not found with BatchId : 112 \");\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"    \r",
											"});\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "5ece3aa3-42f2-47b2-859a-44ff37ada109",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/{{Assgn_Endpoint_2}}/{{batchId_noassignments}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_013_Invalid_BatchID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f2f2106-9106-4704-b6a1-7d34808d51fd",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.message).to.eql(\"Batch not found with Id : 999999 \");\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"    \r",
											"});\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "cf17e0f5-f8a9-4d82-9b00-b64954482b7a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/{{Assgn_Endpoint_2}}/{{invalid_Assign_batchId}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_014_Invalid_Baseurl",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a2270319-7e7a-474c-99b2-3bda571ef1a5",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/html;charset=utf-8');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "fd1f8994-1310-4143-a235-7eb3f3f8b04f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{invalid_baseURL}}/{{Assgn_Endpoint_2}}/{{Assign_batchId}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_015_Invalid_Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cc0e6dfe-1863-427a-8651-4ca3842c686c",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "9dbf3d0b-3a38-4ef6-bb16-3d2ca9cd3ce9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": "{{baseURL}}/{{Assgn_Endpoint_2}}/{{Assign_batchId}}"
							},
							"response": []
						}
					],
					"id": "e8bf716c-0b61-4eeb-b136-24895bd1e079"
				},
				{
					"name": "POST_Create_Assignment",
					"item": [
						{
							"name": "Assignment_TC_016_Valid_Inputs",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e2bc1337-a81b-44bf-95c8-3c9105b080a4",
										"exec": [
											"const randno = Math.floor(Math.random()*10000+1);\r",
											"var randomstr = \"Jun23-PostwomenTechies-SDET-Selenium-\"+randno;\r",
											"\r",
											"pm.environment.set(\"Assign_assignmentDescription\",\"Cucumber Assignment\");\r",
											"pm.environment.set(\"Assign_assignmentName\",randomstr);\r",
											"pm.environment.set(\"Assign_batchId\",3123);\r",
											"pm.environment.set(\"Assign_comments\",\"Created By Team18\");\r",
											"pm.environment.set(\"Assign_createdBy\",\"U4866\");\r",
											"pm.environment.set(\"Assign_dueDate\",\"2023-06-29T13:14:42.450Z\");\r",
											"pm.environment.set(\"Assign_graderId\",\"U4866\");\r",
											"pm.environment.set(\"Assign_pathAttachment1\",\"File1.json\");\r",
											"pm.environment.set(\"Assign_pathAttachment2\",\"File2.json\");\r",
											"pm.environment.set(\"Assign_pathAttachment3\",\"File3.json\");\r",
											"pm.environment.set(\"Assign_pathAttachment4\",\"File4.json\");\r",
											"pm.environment.set(\"Assign_pathAttachment5\",\"File5.json\");\r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5dc30570-5448-46a7-ad75-6c1bda6c367e",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status Code Name has String\",() => {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"var jsonResponse = pm.response.json();\r",
											"var id = jsonResponse.assignmentId;\r",
											"pm.environment.set(\"Assign_CreatedId\", id);\r",
											"console.log(id);\r",
											"\r",
											"//validating the JSON schema\r",
											"var schema = \r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"assignmentId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"assignmentName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"assignmentDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"comments\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"dueDate\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment1\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment2\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment3\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment4\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment5\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"createdBy\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"graderId\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"assignmentId\",\r",
											"    \"assignmentName\",\r",
											"    \"assignmentDescription\",\r",
											"    \"comments\",\r",
											"    \"dueDate\",\r",
											"    \"pathAttachment1\",\r",
											"    \"pathAttachment2\",\r",
											"    \"pathAttachment3\",\r",
											"    \"pathAttachment4\",\r",
											"    \"pathAttachment5\",\r",
											"    \"batchId\",\r",
											"    \"createdBy\",\r",
											"    \"graderId\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonResponse,schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//validating the data type of the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data type of the response body\",() => {\r",
											"    pm.expect(jsonData.assignmentDescription).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.assignmentId).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.assignmentName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.batchId).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.comments).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.createdBy).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.dueDate).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.graderId).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.pathAttachment1).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.pathAttachment2).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.pathAttachment3).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.pathAttachment4).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f5f7e009-8480-4a60-a37e-e82c591ec147",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"assignmentDescription\": \"{{Assign_assignmentDescription}}\",\r\n  \"assignmentId\": 0,\r\n  \"assignmentName\": \"{{Assign_assignmentName}}\",\r\n  \"batchId\": {{Assign_batchId}},\r\n  \"comments\": \"{{Assign_comments}}\",\r\n  \"createdBy\": \"{{Assign_createdBy}}\",\r\n  \"dueDate\": \"{{Assign_dueDate}}\",\r\n  \"graderId\": \"{{Assign_graderId}}\",\r\n  \"pathAttachment1\": \"{{Assign_pathAttachment1}}\",\r\n  \"pathAttachment2\": \"{{Assign_pathAttachment2}}\",\r\n  \"pathAttachment3\": \"{{Assign_pathAttachment3}}\",\r\n  \"pathAttachment4\": \"{{Assign_pathAttachment4}}\",\r\n  \"pathAttachment5\": \"{{Assign_pathAttachment5}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_017_Valid_Inputs_DataDriven_ExternalFile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "16263477-2826-4872-91b9-07ab32d4e528",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status Code Name has String\",() => {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"var jsonResponse = pm.response.json();\r",
											"var id = jsonResponse.assignmentId;\r",
											"pm.environment.set(\"Assign_CreatedId\", id);\r",
											"console.log(id);\r",
											"\r",
											"//validating the JSON schema\r",
											"var schema = \r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"assignmentId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"assignmentName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"assignmentDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"comments\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"dueDate\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment1\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment2\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment3\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment4\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment5\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"createdBy\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"graderId\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"assignmentId\",\r",
											"    \"assignmentName\",\r",
											"    \"assignmentDescription\",\r",
											"    \"comments\",\r",
											"    \"dueDate\",\r",
											"    \"pathAttachment1\",\r",
											"    \"pathAttachment2\",\r",
											"    \"pathAttachment3\",\r",
											"    \"pathAttachment4\",\r",
											"    \"pathAttachment5\",\r",
											"    \"batchId\",\r",
											"    \"createdBy\",\r",
											"    \"graderId\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonResponse,schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//validating the data type of the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data type of the response body\",() => {\r",
											"    pm.expect(jsonData.assignmentDescription).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.assignmentId).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.assignmentName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.batchId).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.comments).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.createdBy).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.dueDate).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.graderId).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.pathAttachment1).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.pathAttachment2).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.pathAttachment3).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.pathAttachment4).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "85135290-c3a7-48af-9aeb-df3d815bfa04",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"assignmentDescription\": \"{{Assign_assignmentDescription2}}\",\r\n  \"assignmentId\": 0,\r\n  \"assignmentName\": \"{{Assign_assignmentName2}}\",\r\n  \"batchId\": {{Assign_batchId2}},\r\n  \"comments\": \"{{Assign_comments2}}\",\r\n  \"createdBy\": \"{{Assign_createdBy2}}\",\r\n  \"dueDate\": \"{{Assign_dueDate2}}\",\r\n  \"graderId\": \"{{Assign_graderId2}}\",\r\n  \"pathAttachment1\": \"{{Assign_pathAttachment12}}\",\r\n  \"pathAttachment2\": \"{{Assign_pathAttachment22}}\",\r\n  \"pathAttachment3\": \"{{Assign_pathAttachment32}}\",\r\n  \"pathAttachment4\": \"{{Assign_pathAttachment42}}\",\r\n  \"pathAttachment5\": \"{{Assign_pathAttachment52}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_018_Null_AssignmentName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "68acb7ae-ceb4-4b05-a53e-917e180be5eb",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.message).to.eql(\"Assignment Name is mandatory\");\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "4f1d1054-7df6-4ffc-942d-0464fa7eb0d0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"assignmentDescription\": \"Cucumber Project\",\r\n  \"assignmentId\": 0,\r\n  \"assignmentName\": null,\r\n  \"batchId\": 1,\r\n  \"comments\": \"Day 01 Assignments\",\r\n  \"createdBy\": \"U22\",\r\n  \"dueDate\": \"2023-06-24T13:14:42.450Z\",\r\n  \"graderId\": \"U19\",\r\n  \"pathAttachment1\": \"File1\",\r\n  \"pathAttachment2\": \"File2\",\r\n  \"pathAttachment3\": \"File3\",\r\n  \"pathAttachment4\": \"File4\",\r\n  \"pathAttachment5\": \"File5\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_019_Without_AssignmentName_Field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a6bae056-3505-40db-8ddd-4a7d9d9dcd98",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.message).to.eql(\"Assignment Name is mandatory\");\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "beb23d67-9d94-453b-a6d6-bf0f4a806f38",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"assignmentDescription\": \"Selenium Assignment\",\r\n  \"assignmentId\": 0,\r\n  \"batchId\": 1,\r\n  \"comments\": \"Day 01 Assignments\",\r\n  \"createdBy\": \"U22\",\r\n  \"dueDate\": \"2023-06-24T13:14:42.450Z\",\r\n  \"graderId\": \"U19\",\r\n  \"pathAttachment1\": \"File1\",\r\n  \"pathAttachment2\": \"File2\",\r\n  \"pathAttachment3\": \"File3\",\r\n  \"pathAttachment4\": \"File4\",\r\n  \"pathAttachment5\": \"File5\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_020_Invalid_CreatedBy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cc2528eb-f9c5-4612-a67d-b831f38fb494",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400 or 404\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400,404]);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Bad Request/Not Found\", function () {\r",
											"    pm.expect(pm.response.status).to.be.oneOf([\"Bad Request\",\"Not Found\"]);\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "4cfcb305-c081-4764-b5de-b2a4d3c162e3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"assignmentDescription\": \"Selenium Assignment\",\r\n  \"assignmentId\": 0,\r\n  \"assignmentName\": \"Jun23-PostwomenTechies-SDET-Selenium-001\",\r\n  \"batchId\": 1,\r\n  \"comments\": \"Day 01 Assignments\",\r\n  \"createdBy\": \"123\",\r\n  \"dueDate\": \"2023-06-24T13:14:42.450Z\",\r\n  \"graderId\": \"U19\",\r\n  \"pathAttachment1\": \"File1\",\r\n  \"pathAttachment2\": \"File2\",\r\n  \"pathAttachment3\": \"File3\",\r\n  \"pathAttachment4\": \"File4\",\r\n  \"pathAttachment5\": \"File5\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_021_Without_CreatedBy_Field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "32784483-4916-4d72-99ba-ca9236709313",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.message).to.eql(\"Created By is mandatory\");\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d23508bb-e15a-4ea5-bf14-5ef5a76b1966",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"assignmentDescription\": \"Selenium Assignment\",\r\n  \"assignmentId\": 0,\r\n  \"assignmentName\": \"Jun23-PostwomenTechies-SDET-Selenium-001\",\r\n  \"batchId\": 1,\r\n  \"comments\": \"Day 01 Assignments\",\r\n  \"dueDate\": \"2023-06-24T13:14:42.450Z\",\r\n  \"graderId\": \"U19\",\r\n  \"pathAttachment1\": \"File1\",\r\n  \"pathAttachment2\": \"File2\",\r\n  \"pathAttachment3\": \"File3\",\r\n  \"pathAttachment4\": \"File4\",\r\n  \"pathAttachment5\": \"File5\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_022_Invalid_GraderId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2b598792-c3fd-410f-a334-e2973c026c34",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400 or 404\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400,404]);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Bad Request/Not Found\", function () {\r",
											"    pm.expect(pm.response.status).to.be.oneOf([\"Bad Request\",\"Not Found\"]);\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2d6ca3a4-f5a2-49a6-af82-905b066b9ef2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"assignmentDescription\": \"Selenium Assignment\",\r\n  \"assignmentId\": 0,\r\n  \"assignmentName\": \"Jun23-PostwomenTechies-SDET-Selenium-001\",\r\n  \"batchId\": 1,\r\n  \"comments\": \"Day 01 Assignments\",\r\n  \"createdBy\": \"U22\",\r\n  \"dueDate\": \"2023-06-24T13:14:42.450Z\",\r\n  \"graderId\": \"000\",\r\n  \"pathAttachment1\": \"File1\",\r\n  \"pathAttachment2\": \"File2\",\r\n  \"pathAttachment3\": \"File3\",\r\n  \"pathAttachment4\": \"File4\",\r\n  \"pathAttachment5\": \"File5\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_023_Without_GraderId_Field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "100a2cc1-ec4a-4d18-8362-400c452f45b6",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Bad request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.message).to.eql(\"Grader ID is mandatory\");\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "be0fbd01-4e64-4dba-9a04-a48a6f691596",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"assignmentDescription\": \"Selenium Assignment\",\r\n  \"assignmentId\": 0,\r\n  \"assignmentName\": \"Jun23-PostwomenTechies-SDET-Selenium-001\",\r\n  \"batchId\": 1,\r\n  \"comments\": \"Day 01 Assignments\",\r\n  \"createdBy\": \"U22\",\r\n  \"dueDate\": \"2023-06-24T13:14:42.450Z\",\r\n  \"pathAttachment1\": \"File1\",\r\n  \"pathAttachment2\": \"File2\",\r\n  \"pathAttachment3\": \"File3\",\r\n  \"pathAttachment4\": \"File4\",\r\n  \"pathAttachment5\": \"File5\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_024_Invalid_BatchId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "744ec2cb-c58f-4caf-8c31-e5562d508851",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//validating the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.status).to.eql(400);\r",
											"    pm.expect(jsonData.error).to.eql(\"Bad Request\");\r",
											"    \r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d03aa713-9aef-45a5-b285-78fa6143011b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"assignmentDescription\": \"Selenium Assignment\",\r\n  \"assignmentId\": 0,\r\n  \"assignmentName\": \"Jun23-PostwomenTechies-SDET-Selenium-001\",\r\n  \"batchId\": \"dd\",\r\n  \"comments\": \"Day 01 Assignments\",\r\n  \"createdBy\": \"U22\",\r\n  \"dueDate\": \"2023-06-24T13:14:42.450Z\",\r\n  \"graderId\": \"U19\",\r\n  \"pathAttachment1\": \"File1\",\r\n  \"pathAttachment2\": \"File2\",\r\n  \"pathAttachment3\": \"File3\",\r\n  \"pathAttachment4\": \"File4\",\r\n  \"pathAttachment5\": \"File5\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_025_Without_BatchId_Field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1fef9d6f-bb44-4665-b224-e946962cf3e5",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.message).to.eql(\"Batch ID is mandatory\");\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "39df4541-b7b4-4bf8-874b-8dc9d8fc5354",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"assignmentDescription\": \"Selenium Assignment\",\r\n  \"assignmentId\": 0,\r\n  \"assignmentName\": \"Jun23-PostwomenTechies-SDET-Selenium-001\",\r\n  \"comments\": \"Day 01 Assignments\",\r\n  \"createdBy\": \"U22\",\r\n  \"dueDate\": \"2023-06-24T13:14:42.450Z\",\r\n  \"graderId\": \"U19\",\r\n  \"pathAttachment1\": \"File1\",\r\n  \"pathAttachment2\": \"File2\",\r\n  \"pathAttachment3\": \"File3\",\r\n  \"pathAttachment4\": \"File4\",\r\n  \"pathAttachment5\": \"File5\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_026_Invalid_DueDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6eefabe-9050-4a49-9883-6dffeec5ac46",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//validating the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.status).to.eql(400);\r",
											"    pm.expect(jsonData.error).to.eql(\"Bad Request\");\r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "1381411d-cca4-4200-8885-cb6e752e14ea",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"assignmentDescription\": \"Selenium Assignment\",\r\n  \"assignmentId\": 0,\r\n  \"assignmentName\": \"Jun23-PostwomenTechies-SDET-Selenium-001\",\r\n  \"batchId\": 1,\r\n  \"comments\": \"Day 01 Assignments\",\r\n  \"createdBy\": \"U22\",\r\n  \"dueDate\": 09,\r\n  \"graderId\": \"U19\",\r\n  \"pathAttachment1\": \"File1\",\r\n  \"pathAttachment2\": \"File2\",\r\n  \"pathAttachment3\": \"File3\",\r\n  \"pathAttachment4\": \"File4\",\r\n  \"pathAttachment5\": \"File5\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_027_Without_DueDate_Field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d0a4681-da2d-4f9a-97a1-7ff0bc73e040",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.message).to.eql(\"Due Date is mandatory\");\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "cd454328-0c4e-4179-9b42-bb17c4604649",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"assignmentDescription\": \"Selenium Assignment\",\r\n  \"assignmentId\": 0,\r\n  \"assignmentName\": \"Jun23-PostwomenTechies-SDET-Selenium-001\",\r\n  \"batchId\": 1,\r\n  \"comments\": \"Day 01 Assignments\",\r\n  \"createdBy\": \"U22\",\r\n  \"graderId\": \"U19\",\r\n  \"pathAttachment1\": \"File1\",\r\n  \"pathAttachment2\": \"File2\",\r\n  \"pathAttachment3\": \"File3\",\r\n  \"pathAttachment4\": \"File4\",\r\n  \"pathAttachment5\": \"File5\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_028_Null_AssignmentDescription",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bcfe5d6b-23a8-4916-95af-e76962cfbe5a",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.message).to.eql(\"Assignment Description is mandatory\");\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "17e80585-6271-4eef-97f5-1c93e5df5ebf",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"assignmentDescription\": null,\r\n  \"assignmentId\": 0,\r\n  \"assignmentName\": \"Jun23-PostwomenTechies-SDET-Selenium-001\",\r\n  \"batchId\": 1,\r\n  \"comments\": \"Day 01 Assignments\",\r\n  \"createdBy\": \"U22\",\r\n  \"dueDate\": \"2023-06-24T13:14:42.450Z\",\r\n  \"graderId\": \"U19\",\r\n  \"pathAttachment1\": \"File1\",\r\n  \"pathAttachment2\": \"File2\",\r\n  \"pathAttachment3\": \"File3\",\r\n  \"pathAttachment4\": \"File4\",\r\n  \"pathAttachment5\": \"File5\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_029_Without_AssignmentDescription_Field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a8c9902d-e903-4cc4-87c6-c6d63e63f200",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.message).to.eql(\"Assignment Description is mandatory\");\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b5c8ab0f-9388-46bc-83df-b9dfdb683012",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"assignmentId\": 0,\r\n  \"assignmentName\": \"Jun23-PostwomenTechies-SDET-Selenium-001\",\r\n  \"batchId\": 1,\r\n  \"comments\": \"Day 01 Assignments\",\r\n  \"createdBy\": \"U22\",\r\n  \"dueDate\": \"2023-06-24T13:14:42.450Z\",\r\n  \"graderId\": \"U19\",\r\n  \"pathAttachment1\": \"File1\",\r\n  \"pathAttachment2\": \"File2\",\r\n  \"pathAttachment3\": \"File3\",\r\n  \"pathAttachment4\": \"File4\",\r\n  \"pathAttachment5\": \"File5\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}"
							},
							"response": []
						}
					],
					"id": "b38408b3-095c-4e5e-b38e-7a4aca7055b0"
				},
				{
					"name": "PUT_Update_Assignment",
					"item": [
						{
							"name": "Assignment_TC_030_Valid_Inputs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "159693c6-05d0-4cba-aecf-d0bb03b46974",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema = \r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"assignmentId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"assignmentName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"assignmentDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"comments\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"dueDate\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment1\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment2\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment3\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment4\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment5\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"createdBy\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"graderId\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"assignmentId\",\r",
											"    \"assignmentName\",\r",
											"    \"assignmentDescription\",\r",
											"    \"comments\",\r",
											"    \"dueDate\",\r",
											"    \"pathAttachment1\",\r",
											"    \"pathAttachment2\",\r",
											"    \"pathAttachment3\",\r",
											"    \"pathAttachment4\",\r",
											"    \"pathAttachment5\",\r",
											"    \"batchId\",\r",
											"    \"createdBy\",\r",
											"    \"graderId\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the data type of the response body\r",
											"pm.test(\"Validating the data type of the response body\",() => {\r",
											"    pm.expect(jsonData.assignmentDescription).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.assignmentId).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.assignmentName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.batchId).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.comments).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.createdBy).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.dueDate).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.graderId).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.pathAttachment1).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.pathAttachment2).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.pathAttachment3).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.pathAttachment4).to.be.a(\"string\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "8dca03e4-16df-4109-ab40-59189a09aca2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"assignmentName\": \"Jun23-PostwomenTechies-SDET-Selenium-150\",\r\n  \"assignmentDescription\": \"Selenium Assignment1\",\r\n  \"comments\": \"Created By Team18\",\r\n  \"dueDate\": \"2023-06-29T13:14:42.450+00:00\",\r\n  \"batchId\": 50,\r\n  \"createdBy\": \"U22\",\r\n  \"graderId\": \"U19\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}/{{Assign_Put_Id}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_031_Valid_Inputs_DataDrivern_ExternalFile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fc745cc2-9131-4f21-9e2f-3ecda9b941d5",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema = \r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"assignmentId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"assignmentName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"assignmentDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"comments\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"dueDate\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment1\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment2\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment3\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment4\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment5\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"createdBy\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"graderId\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"assignmentId\",\r",
											"    \"assignmentName\",\r",
											"    \"assignmentDescription\",\r",
											"    \"comments\",\r",
											"    \"dueDate\",\r",
											"    \"pathAttachment1\",\r",
											"    \"pathAttachment2\",\r",
											"    \"pathAttachment3\",\r",
											"    \"pathAttachment4\",\r",
											"    \"pathAttachment5\",\r",
											"    \"batchId\",\r",
											"    \"createdBy\",\r",
											"    \"graderId\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the data type of the response body\r",
											"pm.test(\"Validating the data type of the response body\",() => {\r",
											"    pm.expect(jsonData.assignmentDescription).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.assignmentId).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.assignmentName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.batchId).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.comments).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.createdBy).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.dueDate).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.graderId).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.pathAttachment1).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.pathAttachment2).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.pathAttachment3).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.pathAttachment4).to.be.a(\"string\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2d26ad5a-c59c-4680-8de9-7e01b177300c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"assignmentName\": \"{{Put_assignmentName}}\",\r\n  \"assignmentDescription\": \"{{Put_assignmentDescription}}\",\r\n  \"comments\": \"{{Put_comments}}\",\r\n  \"dueDate\": \"{{Put_dueDate}}\",\r\n  \"batchId\": {{Put_batchId}},\r\n  \"createdBy\": \"{{Put_createdBy}}\",\r\n  \"graderId\": \"{{Put_graderId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}/{{Assign_Put_Id}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_032_Without_RequestPayload",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "08f70125-28c0-483a-8eb4-6110a57e93af",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//validating the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.status).to.eql(400);\r",
											"    pm.expect(jsonData.error).to.eql(\"Bad Request\");\r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "87f42940-3523-4c9d-afc4-21ea6f01d22d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}/{{Assign_Put_Id}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_033_Null_AssignmentName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9b0f3f01-656c-4932-b089-5f5665b09277",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.message).to.eql(\"Assignment Name is mandatory\");\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "fb99c632-52bc-4bb7-90d2-a6b79d466fdd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"assignmentDescription\": \"Selenium Assignment\",\r\n  \"assignmentId\": 0,\r\n  \"assignmentName\": null,\r\n  \"batchId\": 1,\r\n  \"comments\": \"Day 02 Assignments\",\r\n  \"createdBy\": \"U22\",\r\n  \"dueDate\": \"2023-06-24T11:14:42.450Z\",\r\n  \"graderId\": \"U19\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}/{{Assign_Put_Id}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_034_Null_CreatedBy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd91ab3c-3ebf-4851-9863-636ed8aaa971",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.message).to.eql(\"Created By is mandatory\");\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a594e416-6764-4816-9de3-537353ba0d57",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"assignmentDescription\": \"Selenium Assignment\",\r\n  \"assignmentId\": 0,\r\n  \"assignmentName\": \"Jun23-PostwomenTechies-SDET-Selenium-001\",\r\n  \"batchId\": 1,\r\n  \"comments\": \"Day 02 Assignments\",\r\n  \"createdBy\": null,\r\n  \"dueDate\": \"2023-06-24T11:14:42.450Z\",\r\n  \"graderId\": \"U19\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}/{{Assign_Put_Id}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_035_Null_GraderId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "71d06ae6-3c73-4e7a-9370-3835467b71fa",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.message).to.eql(\"Grader ID is mandatory\");\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b6a7eba5-9d42-4f38-878f-2a57351df539",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"assignmentDescription\": \"Selenium Assignment\",\r\n  \"assignmentId\": 0,\r\n  \"assignmentName\": \"Jun23-PostwomenTechies-SDET-Selenium-001\",\r\n  \"batchId\": 1,\r\n  \"comments\": \"Day 02 Assignments\",\r\n  \"createdBy\": \"U22\",\r\n  \"dueDate\": \"2023-06-24T11:14:42.450Z\",\r\n  \"graderId\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}/{{Assign_Put_Id}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_036_Null_BatchId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6b0994ed-406d-49fd-ac93-936c7d8e32d5",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.message).to.eql(\"Batch ID is mandatory\");\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ed97ee70-7049-4404-a1ba-54c38e90f8df",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"assignmentDescription\": \"Selenium Assignment\",\r\n  \"assignmentId\": 0,\r\n  \"assignmentName\": \"Jun23-PostwomenTechies-SDET-Selenium-001\",\r\n  \"batchId\": null,\r\n  \"comments\": \"Day 02 Assignments\",\r\n  \"createdBy\": \"U22\",\r\n  \"dueDate\": \"2023-06-24T11:14:42.450Z\",\r\n  \"graderId\": \"U19\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}/{{Assign_Put_Id}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_037_Null_DueDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0c7cb8d4-f369-473d-846b-01a57ece8d6a",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.message).to.eql(\"Due Date is mandatory\");\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "0d5fa576-b7e3-45d2-b084-969afaf812ed",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"assignmentDescription\": \"Selenium Assignment\",\r\n  \"assignmentId\": 0,\r\n  \"assignmentName\": \"Jun23-PostwomenTechies-SDET-Selenium-001\",\r\n  \"batchId\": 1,\r\n  \"comments\": \"Day 02 Assignments\",\r\n  \"createdBy\": \"U22\",\r\n  \"dueDate\": null,\r\n  \"graderId\": \"U19\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}/{{Assign_Put_Id}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_038_Null_AssignmentDescription",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d5254f2b-a475-4a7a-8177-ce94754e23f5",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.message).to.eql(\"Assignment Description is mandatory\");\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "12470d23-7c9f-483a-a8f2-bb5286fa3e2d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"assignmentDescription\": null,\r\n  \"assignmentId\": 0,\r\n  \"assignmentName\": \"Jun23-PostwomenTechies-SDET-Selenium-001\",\r\n  \"batchId\": 1,\r\n  \"comments\": \"Day 02 Assignments\",\r\n  \"createdBy\": \"U22\",\r\n  \"dueDate\": \"2023-06-24T11:14:42.450Z\",\r\n  \"graderId\": \"U19\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}/{{Assign_Put_Id}}"
							},
							"response": []
						}
					],
					"id": "ea6bafe8-f3a7-42f5-b43b-5600beb65022"
				},
				{
					"name": "DELETE_with_ID",
					"item": [
						{
							"name": "Assignment_TC_039_Valid_Inputs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dab79936-b888-4e8e-b779-ede0c3333b9e",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.message).to.eql(\"Assignment deleted successfully\");\r",
											"    pm.expect(jsonData.success).to.eql(true);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e4999b53-d683-410b-877a-7671ac433f9b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}/{{Assign_CreatedId}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_040_Invalid_AssignmentId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "727d4a4f-aaa6-4663-9e94-7f1b10a36560",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.message).to.eql(\"Assignment not found with Id : 999999 \");\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b772d234-34f5-48ac-9d03-96c44ae9f041",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}/{{invalid_assignmentId}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_041_Invalid_EndPoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e206b1b7-1d3d-4b4b-ad28-b2b263c8a2ee",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the data type of the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.status).to.eql(404);\r",
											"    pm.expect(jsonData.error).to.eql(\"Not Found\");\r",
											"    \r",
											"});\r",
											"\r",
											"//validating the JSON schema\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "37c64d08-373e-446c-9d0f-d6c7fb5e7e88",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{baseURL}}/{{invalid_endpoint_1}}/{{invalid_assignmentId}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_042_Null_AssignmentId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c97adf0-6d27-4a9f-b528-115b55ff5ee6",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Method Not Allowed\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the data type of the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.status).to.eql(405);\r",
											"    pm.expect(jsonData.error).to.eql(\"Method Not Allowed\");\r",
											"    \r",
											"});\r",
											"\r",
											"//validating the JSON schema\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d3f1c087-a3a7-4d1d-a4b9-9051062afcc5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_043_Invalid_Baseurl",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eb8fa9e1-0ad8-4d4d-ade7-d3006a26a7ca",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/html;charset=utf-8');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "305a5639-7df0-4c66-a619-743baa00254f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{invalid_baseURL}}/{{Assgn_endpoint_1}}/{{Assign_assignmentId}}"
							},
							"response": []
						}
					],
					"id": "23a2c8c7-05a5-4edf-b05e-2a434a416097"
				}
			],
			"id": "cc47accc-9311-4a65-979c-b971c30b4332"
		},
		{
			"name": "User Module",
			"item": [
				{
					"name": "Get Users",
					"item": [
						{
							"name": "TC_Get All users",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "be669cff-529f-4df6-bc24-76982a2c45bb",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"//validating the data type of the response body\r",
											"/*var jsonResponse = pm.response.json();\r",
											" pm.test(\"Validate Response body\", function() {\r",
											"\r",
											"        pm.expect(jsonResponse.userId,pm.environment.get(\"userId\"));\r",
											"        pm.expect(jsonResponse.userFirstName,pm.environment.get(\"userFirstName\"));\r",
											"        pm.expect(jsonResponse.userLastName,pm.environment.get(\"userLastName\"));    \r",
											"        pm.expect(jsonResponse.userPhoneNumber,pm.environment.get(\"userPhoneNumber\"));\r",
											"        pm.expect(jsonResponse.userLocation,pm.environment.get(\"userLocation\"));\r",
											"        pm.expect(jsonResponse.userTimeZone,pm.environment.get(\"userTimeZone\"));\r",
											"        pm.expect(jsonResponse.userLinkedinUrl,pm.environment.get(\"userLinkedinUrl\"));\r",
											"        pm.expect(jsonResponse.userEduUg,pm.environment.get(\"userEduUg\"));\r",
											"        pm.expect(jsonResponse.userEduPg,pm.environment.get(\"userEduPg\"));\r",
											"        pm.expect(jsonResponse.userVisaStatus,pm.environment.get(\"userVisaStatus\"));\r",
											"        pm.expect(jsonResponse.userMiddleName,pm.environment.get(\"userMiddleName\"));\r",
											"        pm.expect(jsonResponse.userComments,pm.environment.get(\"userComments\"));\r",
											"})*/\r",
											"// Parsing the response as JSON\r",
											"var jsonResponse = JSON.parse(pm.response.text());\r",
											"\r",
											"pm.test(\"Validate Response body\", function() {\r",
											"  pm.expect(jsonResponse.userId).to.eql(pm.environment.get(\"userId\"));\r",
											"  pm.expect(jsonResponse.userFirstName).to.eql(pm.environment.get(\"userFirstName\"));\r",
											"  pm.expect(jsonResponse.userLastName).to.eql(pm.environment.get(\"userLastName\"));\r",
											"  pm.expect(jsonResponse.userPhoneNumber).to.eql(pm.environment.get(\"userPhoneNumber\"));\r",
											"  pm.expect(jsonResponse.userLocation).to.eql(pm.environment.get(\"userLocation\"));\r",
											"  pm.expect(jsonResponse.userTimeZone).to.eql(pm.environment.get(\"userTimeZone\"));\r",
											"  pm.expect(jsonResponse.userLinkedinUrl).to.eql(pm.environment.get(\"userLinkedinUrl\"));\r",
											"  pm.expect(jsonResponse.userEduUg).to.eql(pm.environment.get(\"userEduUg\"));\r",
											"  pm.expect(jsonResponse.userEduPg).to.eql(pm.environment.get(\"userEduPg\"));\r",
											"  pm.expect(jsonResponse.userVisaStatus).to.eql(pm.environment.get(\"userVisaStatus\"));\r",
											"  pm.expect(jsonResponse.userMiddleName).to.eql(pm.environment.get(\"userMiddleName\"));\r",
											"  pm.expect(jsonResponse.userComments).to.eql(pm.environment.get(\"userComments\"));\r",
											"});\r",
											"\r",
											"// Define the JSON schema\r",
											"// Define the JSON schema\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
											"  \"title\": \"Generated schema for Root\",\r",
											"  \"type\": \"array\",\r",
											"  \"items\": {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"      \"userId\": { \"type\": \"string\" },\r",
											"      \"userFirstName\": { \"type\": \"string\" },\r",
											"      \"userLastName\": { \"type\": \"string\" },\r",
											"      \"userPhoneNumber\": { \"type\": \"number\" },\r",
											"      \"userLocation\": { \"type\": \"string\" },\r",
											"      \"userTimeZone\": { \"type\": \"string\" },\r",
											"      \"userLinkedinUrl\": { \"type\": \"string\" },\r",
											"      \"userEduUg\": { \"type\": \"string\" },\r",
											"      \"userEduPg\": { \"type\": \"string\" },\r",
											"      \"userVisaStatus\": { \"type\": \"string\" },\r",
											"      \"userMiddleName\": { \"type\": \"string\" },\r",
											"      \"userComments\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\r",
											"      \"userId\",\r",
											"      \"userFirstName\",\r",
											"      \"userLastName\",\r",
											"      \"userPhoneNumber\",\r",
											"      \"userTimeZone\",\r",
											"      \"userVisaStatus\"\r",
											"    ]\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"    console.log(\"Schema validation errors:\");\r",
											"    console.log(tv4.error);\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" \r",
											" })"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2dd3add4-e85d-481b-8819-bae9c31c8538",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}{{GetAllUsers}}"
							},
							"response": []
						},
						{
							"name": "Get User Info by userId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d57753a1-496f-449e-9ef3-107aa627af48",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"//validating the data type of the response body\r",
											"var jsonResponse = pm.response.json();\r",
											" pm.test(\"Validate Response body\", function() {\r",
											"\r",
											"        pm.expect(jsonResponse.userId,pm.environment.get(\"userId\"));\r",
											"        pm.expect(jsonResponse.userFirstName,pm.environment.get(\"userFirstName\"));\r",
											"        pm.expect(jsonResponse.userLastName,pm.environment.get(\"userLastName\"));    \r",
											"        pm.expect(jsonResponse.userPhoneNumber,pm.environment.get(\"userPhoneNumber\"));\r",
											"        pm.expect(jsonResponse.userLocation,pm.environment.get(\"userLocation\"));\r",
											"        pm.expect(jsonResponse.userTimeZone,pm.environment.get(\"userTimeZone\"));\r",
											"        pm.expect(jsonResponse.userLinkedinUrl,pm.environment.get(\"userLinkedinUrl\"));\r",
											"        pm.expect(jsonResponse.userEduUg,pm.environment.get(\"userEduUg\"));\r",
											"        pm.expect(jsonResponse.userEduPg,pm.environment.get(\"userEduPg\"));\r",
											"        pm.expect(jsonResponse.userVisaStatus,pm.environment.get(\"userVisaStatus\"));\r",
											"        pm.expect(jsonResponse.userMiddleName,pm.environment.get(\"userMiddleName\"));\r",
											"        pm.expect(jsonResponse.userComments,pm.environment.get(\"userComments\"));\r",
											"})\r",
											"//validating the JSON schema\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
											"  \"title\": \"Generated schema for Root\",\r",
											"  \"type\": \"array\",\r",
											"  \"items\": {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"      \"userRoleId\": {\r",
											"        \"type\": \"number\"\r",
											"      },\r",
											"      \"user\": {\r",
											"        \"type\": \"object\",\r",
											"        \"properties\": {\r",
											"          \"userId\": {\r",
											"            \"type\": \"string\"\r",
											"          },\r",
											"          \"userFirstName\": {\r",
											"            \"type\": \"string\"\r",
											"          },\r",
											"          \"userLastName\": {\r",
											"            \"type\": \"string\"\r",
											"          },\r",
											"          \"userMiddleName\": {\r",
											"            \"type\": \"string\"\r",
											"          },\r",
											"          \"userPhoneNumber\": {\r",
											"            \"type\": \"number\"\r",
											"          },\r",
											"          \"userLocation\": {\r",
											"            \"type\": \"string\"\r",
											"          },\r",
											"          \"userTimeZone\": {\r",
											"            \"type\": \"string\"\r",
											"          },\r",
											"          \"userLinkedinUrl\": {\r",
											"            \"type\": \"string\"\r",
											"          },\r",
											"          \"userEduUg\": {\r",
											"            \"type\": \"string\"\r",
											"          },\r",
											"          \"userEduPg\": {\r",
											"            \"type\": \"string\"\r",
											"          },\r",
											"          \"userComments\": {\r",
											"            \"type\": \"string\"\r",
											"          },\r",
											"          \"userVisaStatus\": {\r",
											"            \"type\": \"string\"\r",
											"          }\r",
											"        },\r",
											"        \"required\": [\r",
											"          \"userId\",\r",
											"          \"userFirstName\",\r",
											"          \"userLastName\",\r",
											"          \"userMiddleName\",\r",
											"          \"userPhoneNumber\",\r",
											"          \"userLocation\",\r",
											"          \"userTimeZone\",\r",
											"          \"userLinkedinUrl\",\r",
											"          \"userEduUg\",\r",
											"          \"userEduPg\",\r",
											"          \"userComments\",\r",
											"          \"userVisaStatus\"\r",
											"        ]\r",
											"      },\r",
											"      \"role\": {\r",
											"        \"type\": \"object\",\r",
											"        \"properties\": {\r",
											"          \"roleId\": {\r",
											"            \"type\": \"string\"\r",
											"          },\r",
											"          \"roleName\": {\r",
											"            \"type\": \"string\"\r",
											"          },\r",
											"          \"roleDesc\": {\r",
											"            \"type\": \"string\"\r",
											"          },\r",
											"          \"creationTime\": {},\r",
											"          \"lastModTime\": {},\r",
											"          \"hibernateLazyInitializer\": {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {},\r",
											"            \"required\": []\r",
											"          }\r",
											"        },\r",
											"        \"required\": [\r",
											"          \"roleId\",\r",
											"          \"roleName\",\r",
											"          \"roleDesc\",\r",
											"          \"creationTime\",\r",
											"          \"lastModTime\",\r",
											"          \"hibernateLazyInitializer\"\r",
											"        ]\r",
											"      },\r",
											"      \"batches\": {\r",
											"        \"type\": \"array\",\r",
											"        \"items\": {}\r",
											"      },\r",
											"      \"userRoleStatus\": {\r",
											"        \"type\": \"string\"\r",
											"      }\r",
											"    },\r",
											"    \"required\": [\r",
											"      \"userRoleId\",\r",
											"      \"user\",\r",
											"      \"role\",\r",
											"      \"batches\",\r",
											"      \"userRoleStatus\"\r",
											"    ]\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"Validate Schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema))\r",
											" })"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "5e64ab6d-cc19-4a34-85df-76c445d88b3f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/{{GetUserWithValidUserId}}",
								"description": "Get User info by userId"
							},
							"response": []
						},
						{
							"name": "Get all users with roles",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "efb76cd3-3841-48ca-8c77-2155ec0a0ab8",
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate Response body\r",
											"    pm.test(\"Validate Response body\", function() {\r",
											"         \r",
											"        pm.expect(jsonResponse.batchId, pm.environment.get(\"batchId\"));\r",
											"        pm.expect(jsonResponse.batchName,pm.environment.get(\"batchName\"));\r",
											"        pm.expect(jsonResponse.batchStatus,pm.environment.get(\"batchStatus\"));\r",
											"        pm.expect(jsonResponse.batchDescription, pm.environment.get(\"batchDescription\"));\r",
											"        pm.expect(jsonResponse.batchNoOfClasses, pm.environment.get(\"batchNoOfClasses\"));\r",
											"        pm.expect(jsonResponse.programId, pm.environment.get(\"programId\"));\r",
											"        pm.expect(jsonResponse.programName,pm.environment.get(\"programName\"));\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =  \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"batchName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchNoOfClasses\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"batchName\",\r",
											"    \"batchDescription\",\r",
											"    \"batchStatus\",\r",
											"    \"batchNoOfClasses\",\r",
											"    \"programId\",\r",
											"    \"programName\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema))\r",
											" })\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e0c797d9-bb16-47c8-98fa-b821552ee420",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "{{baseURL}}/{{GetUsersByRoles}}"
							},
							"response": []
						},
						{
							"name": "Bug-Get Alll staff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6137122-70dc-4ada-b728-6e9dc38763e7",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "0a64e438-31f6-4961-8d59-83048918686e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/{{GetAllStaff}}"
							},
							"response": []
						},
						{
							"name": "Get All users with invalid endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6356b3ab-056c-4c46-abe2-3740aca1c1ea",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "9a5f66a6-7071-4d7c-83a8-1c0242eed44e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/users/user"
							},
							"response": []
						},
						{
							"name": "Get userInfo with invalid userId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b171c63-4c4b-4c75-baa1-42e8583b0004",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"User Id U20 not found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "cbde6fa6-94d5-4e01-a915-0f9d61536395",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/{{GetUserWIthInvalidUserId}}"
							},
							"response": []
						},
						{
							"name": "Get All Staff with invalid endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "70cb6170-f785-445a-a6a0-b395ff307548",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "daae8ac3-398c-4ea0-a38d-ee5e850e575a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/users/user/getAllStaf"
							},
							"response": []
						}
					],
					"id": "e8d4b966-061f-4c80-aac4-152b8536aa01"
				},
				{
					"name": "Put Request",
					"item": [
						{
							"name": "update user with correct field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d5711551-c455-4e02-ab27-4d51c9849909",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema = \r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"userId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userFirstName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userLastName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userMiddleName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userPhoneNumber\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"userLocation\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userTimeZone\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userLinkedinUrl\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userEduUg\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userEduPg\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userComments\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userVisaStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"userId\",\r",
											"    \"userFirstName\",\r",
											"    \"userLastName\",\r",
											"    \"userMiddleName\",\r",
											"    \"userPhoneNumber\",\r",
											"    \"userLocation\",\r",
											"    \"userTimeZone\",\r",
											"    \"userLinkedinUrl\",\r",
											"    \"userEduUg\",\r",
											"    \"userEduPg\",\r",
											"    \"userComments\",\r",
											"    \"userVisaStatus\"\r",
											"  ]\r",
											"}\r",
											"  \r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the data type of the response body\r",
											"pm.test(\"Validating the data type of the response body\",() => {\r",
											"    pm.expect(jsonData.userId).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userFirstName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userLastName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userPhoneNumber).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.userLocation).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userTimeZone).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userLinkedinUrl).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userEduUg).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userEduPg).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userVisaStatus).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userMiddleName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userMiddleName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userComments).to.be.a(\"string\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "047aab23-5c7a-4a5e-a6b3-8a5ea4416c28",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"userId\": \"U19\",\r\n        \"userFirstName\": \"NewRakesh\",\r\n        \"userLastName\": \"NewSharma\",\r\n        \"userMiddleName\": \"\",\r\n        \"userPhoneNumber\": 5555666640,\r\n        \"userLocation\": \"India\",\r\n        \"userTimeZone\": \"PST\",\r\n        \"userLinkedinUrl\": \"www.linkedin.com/Rakesh1234\",\r\n        \"userEduUg\": \"mca\",\r\n        \"userEduPg\": \"mba\",\r\n        \"userComments\": \"creating new user with multiple role \",\r\n        \"userVisaStatus\": \"NA\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateUserCorrectFields}}"
							},
							"response": []
						},
						{
							"name": "Update user with invalid visa status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a1fe5cb9-c164-4d2b-ad1c-182eddc2a5e8",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "cb826989-4577-4c01-ab16-bc23ed26da32",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n        \"userId\": \"U19\",\r\n        \"userFirstName\": \"NewRakesh\",\r\n        \"userLastName\": \"NewSharma\",\r\n        \"userMiddleName\": \"\",\r\n        \"userPhoneNumber\": 5555666640,\r\n        \"userLocation\": \"India\",\r\n        \"userTimeZone\": \"PST\",\r\n        \"userLinkedinUrl\": \"www.linkedin.com/Rakesh1234\",\r\n        \"userEduUg\": \"mca\",\r\n        \"userEduPg\": \"mba\",\r\n        \"userComments\": \"creating new user with multiple role \",\r\n        \"userVisaStatus\": \"L2\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/users/users/U19"
							},
							"response": []
						},
						{
							"name": "Update user without FirstName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3f1c0510-a1d0-42a0-afa5-7644f00314a2",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7df0f69b-7bc4-4901-aea8-d4547ea1fedb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n        \"userId\": \"U21\",\r\n        \"userLastName\": \"NewSharma\",\r\n        \"userMiddleName\": \"\",\r\n        \"userPhoneNumber\": 5555666640,\r\n        \"userLocation\": \"India\",\r\n        \"userTimeZone\": \"PST\",\r\n        \"userLinkedinUrl\": \"www.linkedin.com/Rakesh1234\",\r\n        \"userEduUg\": \"mca\",\r\n        \"userEduPg\": \"mba\",\r\n        \"userComments\": \"creating new user with multiple role \",\r\n        \"userVisaStatus\": \"NA\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/users/users/U21"
							},
							"response": []
						},
						{
							"name": "Update user role status with correct userID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d917b59f-55a4-4b77-a45d-36c3470c03da",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3d4c92b8-93f5-44cd-9f92-3366d2f4fe74",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"roleId\": \"R01\",\r\n  \"userRoleStatus\": \"Not Active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/users/users/roleStatus/U113"
							},
							"response": []
						},
						{
							"name": "Update user role status with incorrect userId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25c86348-b877-42db-9bff-fa66a59da0f0",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f20d731e-0c41-4467-be16-36338564b972",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"roleId\": \"R02\",\r\n  \"userRoleStatus\": \"Active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/users/users/roleStatus/U20"
							},
							"response": []
						},
						{
							"name": "Update user role program batch status with incorrect detail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e87a554-d810-417b-a81d-5202a5fb2603",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											"  {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a306a6a5-7874-45bd-9159-914452f3b984",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programId\": 1,\r\n  \"roleId\": \"R03\",\r\n  \"userId\": \"U21\",\r\n  \"userRoleProgramBatches\": [\r\n    {\r\n      \"batchId\": 1610,\r\n      \"userRoleProgramBatchStatus\": \"Active\"\r\n    }\r\n  ]\r\n  }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/users/users/roleProgramBatchStatus/U21"
							},
							"response": []
						},
						{
							"name": "Update user with invalid timezone",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4e00c262-9f80-409c-998d-0e2f7ce0f666",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "1cc179e2-c33a-4558-89cf-3a44a729dd97",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n        \"userId\": \"U1254\",\r\n        \"userFirstName\": \"API trackers 001\",\r\n        \"userLastName\": \"bhatt\",\r\n        \"userPhoneNumber\": 909499494,\r\n        \"userLocation\": null,\r\n        \"userTimeZone\": \"PDT\",\r\n        \"userLinkedinUrl\": null,\r\n        \"userEduUg\": null,\r\n        \"userEduPg\": null,\r\n        \"userVisaStatus\": \"H4\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}{{userEndpoint}}/U21"
							},
							"response": []
						},
						{
							"name": "Update user with empty first name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8498112f-d788-4870-8217-cd48a7c32f3f",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "bb28125e-7580-4abb-be89-bcf6e0016dac",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"userId\": \"U1254\",\r\n        \"userFirstName\": \"\",\r\n        \"userLastName\": \"bhatt\",\r\n        \"userPhoneNumber\": 909499494,\r\n        \"userLocation\": null,\r\n        \"userTimeZone\": \"PST\",\r\n        \"userLinkedinUrl\": null,\r\n        \"userEduUg\": null,\r\n        \"userEduPg\": null,\r\n        \"userVisaStatus\": \"H4\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}{{userEndpoint}}/U1254"
							},
							"response": []
						},
						{
							"name": "Update user with null Last Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ace78f4-d855-4e6d-8e69-c3ceaa905a34",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "dbb61d39-af1c-4642-b6f9-58c3991c7d60",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"userId\": \"U1254\",\r\n        \"userFirstName\": \"API trackers 001\",\r\n        \"userLastName\": null,\r\n        \"userPhoneNumber\": 909499494,\r\n        \"userLocation\": null,\r\n        \"userTimeZone\": \"PDT\",\r\n        \"userLinkedinUrl\": null,\r\n        \"userEduUg\": null,\r\n        \"userEduPg\": null,\r\n        \"userVisaStatus\": \"H4\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}{{userEndpoint}}/U1254"
							},
							"response": []
						}
					],
					"id": "94147578-512d-4505-b56c-d949791d399b"
				},
				{
					"name": "Delete Request",
					"item": [
						{
							"name": "Delete Student user valid userId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "410d5b4e-df57-413c-934a-63c8854719f5",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "39db1587-eb3a-4be5-8ee3-08d2d2c82de9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/users/users/U5202"
							},
							"response": []
						},
						{
							"name": "Delete Admin user valid userId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0c0f7077-6045-4e37-8faf-0ffd5d769ee9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "062b1834-e066-4592-b0b2-169b5d68bd6d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/users/users/U958"
							},
							"response": []
						},
						{
							"name": "Delete Staff user valid userId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "89412be5-cccf-4c50-8b62-905a9e7e669f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c5d46987-84c3-470d-bdeb-86e593bbf638",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/users/users/U959"
							},
							"response": []
						},
						{
							"name": "Delete user when userId is invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "49c0940b-0ef7-4362-a2cb-e7ca0efc1c3d",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7ea7f4d9-cabb-43c4-ac71-0eb6c161911f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/users/users/U0"
							},
							"response": []
						},
						{
							"name": "{{baseURL}}/{{GetAllUsers}}/U998",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8e9e792f-6fec-4363-9aa4-856e371e195a",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "bf9aab4f-a73a-4a48-87be-020a76c8692b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{baseURL}}/{{GetAllUsers}}/U998"
							},
							"response": []
						}
					],
					"id": "4001b550-4ca8-40e1-88ef-776c881650fb"
				},
				{
					"name": "Post Request",
					"item": [
						{
							"name": "Create a student user with unique ph,pst time and Visa status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "54ee501e-4a8b-4b47-8045-aaadb940ae56",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status Code Name has String\",() => {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"var jsonResponse = pm.response.json();\r",
											"var id = jsonResponse.assignmentId;\r",
											"pm.environment.set(\"Assign_CreatedId\", id);\r",
											"console.log(id);\r",
											"\r",
											"//validating the JSON schema\r",
											"var schema = \r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"userId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userFirstName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userLastName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userMiddleName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userPhoneNumber\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"userLocation\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userTimeZone\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userLinkedinUrl\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userEduUg\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userEduPg\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userComments\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userVisaStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"userId\",\r",
											"    \"userFirstName\",\r",
											"    \"userLastName\",\r",
											"    \"userMiddleName\",\r",
											"    \"userPhoneNumber\",\r",
											"    \"userLocation\",\r",
											"    \"userTimeZone\",\r",
											"    \"userLinkedinUrl\",\r",
											"    \"userEduUg\",\r",
											"    \"userEduPg\",\r",
											"    \"userComments\",\r",
											"    \"userVisaStatus\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonResponse,schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//validating the data type of the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data type of the response body\",() => {\r",
											"    pm.expect(jsonData.userId).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userFirstName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userLastName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userPhoneNumber).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.userLocation).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userTimeZone).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userLinkedinUrl).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userEduUg).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userEduPg).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userVisaStatus).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userMiddleName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userMiddleName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userComments).to.be.a(\"string\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "4216a9a7-b688-4e2c-a561-56df1384d4bf",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"userComments\": \"string\",\r\n\"userEduPg\": \"BE\",\r\n\"userEduUg\": \"MCA\",\r\n\"userFirstName\": \"Krish-SDET-280\",\r\n\"userLastName\": \"William-SDET-280\",\r\n\"userLinkedinUrl\": \"www.linkedin.com/Krish002\",\r\n\"userLocation\": \"string\",\r\n\"userMiddleName\": \"string\",\r\n\"userPhoneNumber\": {{$randomInt}},\r\n\"userRoleMaps\": [\r\n{\r\n\"roleId\": \"R03\",\r\n\"userRoleStatus\": \"ROLE_STUDENT\"\r\n}\r\n],\r\n\"userTimeZone\": \"PST\",\r\n\"userVisaStatus\": \"Not-Specified\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/users/users/roleStatus"
							},
							"response": []
						},
						{
							"name": "Create a Admin user with unique ph, mst and NA visa status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "443cd3fd-168d-4355-9ed5-71ba98ba9b0e",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status Code Name has String\",() => {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"var jsonResponse = pm.response.json();\r",
											"var id = jsonResponse.assignmentId;\r",
											"pm.environment.set(\"Assign_CreatedId\", id);\r",
											"console.log(id);\r",
											"\r",
											"//validating the JSON schema\r",
											"var schema = \r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"userId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userFirstName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userLastName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userMiddleName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userPhoneNumber\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"userLocation\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userTimeZone\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userLinkedinUrl\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userEduUg\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userEduPg\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userComments\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userVisaStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"userId\",\r",
											"    \"userFirstName\",\r",
											"    \"userLastName\",\r",
											"    \"userMiddleName\",\r",
											"    \"userPhoneNumber\",\r",
											"    \"userLocation\",\r",
											"    \"userTimeZone\",\r",
											"    \"userLinkedinUrl\",\r",
											"    \"userEduUg\",\r",
											"    \"userEduPg\",\r",
											"    \"userComments\",\r",
											"    \"userVisaStatus\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonResponse,schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//validating the data type of the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data type of the response body\",() => {\r",
											"    pm.expect(jsonData.userId).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userFirstName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userLastName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userPhoneNumber).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.userLocation).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userTimeZone).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userLinkedinUrl).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userEduUg).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userEduPg).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userVisaStatus).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userMiddleName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userMiddleName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userComments).to.be.a(\"string\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "340983bb-9786-4a6c-8d6b-427ec4328b4c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"userComments\": \"string\",\r\n\"userEduPg\": \"BA\",\r\n\"userEduUg\": \"MCA\",\r\n\"userFirstName\": \"Krishna-SDET-280\",\r\n\"userLastName\": \"William-SDET-280\",\r\n\"userLinkedinUrl\": \"www.linkedin.com/Krishna002\",\r\n\"userLocation\": \"string\",\r\n\"userMiddleName\": \"string\",\r\n\"userPhoneNumber\": {{$randomInt}},\r\n\"userRoleMaps\": [\r\n{\r\n\"roleId\": \"R01\",\r\n\"userRoleStatus\": \"ROLE_ADMIN\"\r\n}\r\n],\r\n\"userTimeZone\": \"MST\",\r\n\"userVisaStatus\": \"NA\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/users/users/roleStatus"
							},
							"response": []
						},
						{
							"name": "Create Staff user with unique ph,cst and GC-EAD",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4c64dc3-1282-46ff-9467-86421e8c2fae",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status Code Name has String\",() => {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"var jsonResponse = pm.response.json();\r",
											"var id = jsonResponse.assignmentId;\r",
											"pm.environment.set(\"Assign_CreatedId\", id);\r",
											"console.log(id);\r",
											"\r",
											"//validating the JSON schema\r",
											"var schema = \r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"userId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userFirstName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userLastName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userMiddleName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userPhoneNumber\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"userLocation\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userTimeZone\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userLinkedinUrl\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userEduUg\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userEduPg\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userComments\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userVisaStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"userId\",\r",
											"    \"userFirstName\",\r",
											"    \"userLastName\",\r",
											"    \"userMiddleName\",\r",
											"    \"userPhoneNumber\",\r",
											"    \"userLocation\",\r",
											"    \"userTimeZone\",\r",
											"    \"userLinkedinUrl\",\r",
											"    \"userEduUg\",\r",
											"    \"userEduPg\",\r",
											"    \"userComments\",\r",
											"    \"userVisaStatus\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonResponse,schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//validating the data type of the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data type of the response body\",() => {\r",
											"    pm.expect(jsonData.userId).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userFirstName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userLastName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userPhoneNumber).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.userLocation).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userTimeZone).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userLinkedinUrl).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userEduUg).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userEduPg).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userVisaStatus).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userMiddleName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userMiddleName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userComments).to.be.a(\"string\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7fad91b8-8ea4-422e-96f6-6f25c49d7fc9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"userComments\": \"string\",\r\n\"userEduPg\": \"MA\",\r\n\"userEduUg\": \"MCA\",\r\n\"userFirstName\": \"John-SDET-281\",\r\n\"userLastName\": \"DOe-SDET-281\",\r\n\"userLinkedinUrl\": \"www.linkedin.com/John002\",\r\n\"userLocation\": \"string\",\r\n\"userMiddleName\": \"string\",\r\n\"userPhoneNumber\": {{$randomInt}},\r\n\"userRoleMaps\": [\r\n{\r\n\"roleId\": \"R02\",\r\n\"userRoleStatus\": \"ROLE_STAFF\"\r\n}\r\n],\r\n\"userTimeZone\": \"CST\",\r\n\"userVisaStatus\": \"GC-EAD\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/users/users/roleStatus"
							},
							"response": []
						},
						{
							"name": "Create student user with existing phone number",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ebd46da9-6f51-441d-b5f0-8bee2085ad61",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status Code Name has String\",() => {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"var jsonResponse = pm.response.json();\r",
											"var id = jsonResponse.assignmentId;\r",
											"pm.environment.set(\"Assign_CreatedId\", id);\r",
											"console.log(id);\r",
											"\r",
											"//validating the JSON schema\r",
											"var schema = \r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonResponse,schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//validating the data type of the response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "5a7dcfdf-c206-4b4a-91f9-010890a66344",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"userComments\": \"string\",\r\n\"userEduPg\": \"BE\",\r\n\"userEduUg\": \"MCA\",\r\n\"userFirstName\": \"KrishNew-SDET-280\",\r\n\"userLastName\": \"WilliamNew-SDET-280\",\r\n\"userLinkedinUrl\": \"www.linkedin.com/KrishNew002\",\r\n\"userLocation\": \"string\",\r\n\"userMiddleName\": \"string\",\r\n\"userPhoneNumber\": 1234567890,\r\n\"userRoleMaps\": [\r\n{\r\n\"roleId\": \"R03\",\r\n\"userRoleStatus\": \"ROLE_STUDENT\"\r\n}\r\n],\r\n\"userTimeZone\": \"PST\",\r\n\"userVisaStatus\": \"Not-Specified\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}{{CreateUser}}"
							},
							"response": []
						},
						{
							"name": "Create Admin user with existing phone number",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a63fc468-403e-4043-aa6c-606b50b13edf",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status Code Name has String\",() => {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"var jsonResponse = pm.response.json();\r",
											"var id = jsonResponse.assignmentId;\r",
											"pm.environment.set(\"Assign_CreatedId\", id);\r",
											"console.log(id);\r",
											"\r",
											"//validating the JSON schema\r",
											"var schema = \r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"userId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userFirstName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userLastName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userMiddleName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userPhoneNumber\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"userLocation\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userTimeZone\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userLinkedinUrl\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userEduUg\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userEduPg\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userComments\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userVisaStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"userId\",\r",
											"    \"userFirstName\",\r",
											"    \"userLastName\",\r",
											"    \"userMiddleName\",\r",
											"    \"userPhoneNumber\",\r",
											"    \"userLocation\",\r",
											"    \"userTimeZone\",\r",
											"    \"userLinkedinUrl\",\r",
											"    \"userEduUg\",\r",
											"    \"userEduPg\",\r",
											"    \"userComments\",\r",
											"    \"userVisaStatus\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonResponse,schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//validating the data type of the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data type of the response body\",() => {\r",
											"    pm.expect(jsonData.userId).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userFirstName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userLastName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userPhoneNumber).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.userLocation).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userTimeZone).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userLinkedinUrl).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userEduUg).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userEduPg).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userVisaStatus).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userMiddleName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userMiddleName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userComments).to.be.a(\"string\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ab047021-4c40-4c5a-b302-5ce317f05451",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"userComments\": \"string\",\r\n\"userEduPg\": \"B.Com\",\r\n\"userEduUg\": \"MCA\",\r\n\"userFirstName\": \"KrishnaNew-SDET-282\",\r\n\"userLastName\": \"WilliamNew-SDET-282\",\r\n\"userLinkedinUrl\": \"www.linkedin.com/KrishnaNew002\",\r\n\"userLocation\": \"string\",\r\n\"userMiddleName\": \"string\",\r\n\"userPhoneNumber\": {{$randomInt}},\r\n\"userRoleMaps\": [\r\n{\r\n\"roleId\": \"R01\",\r\n\"userRoleStatus\": \"ROLE_ADMIN\"\r\n}\r\n],\r\n\"userTimeZone\": \"MST\",\r\n\"userVisaStatus\": \"NA\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}{{CreateUser}}"
							},
							"response": []
						},
						{
							"name": "Create staff user with existing phone number",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f066902b-853c-475a-ab19-622588b95d74",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status Code Name has String\",() => {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"var jsonResponse = pm.response.json();\r",
											"var id = jsonResponse.assignmentId;\r",
											"pm.environment.set(\"Assign_CreatedId\", id);\r",
											"console.log(id);\r",
											"\r",
											"//validating the JSON schema\r",
											"var schema = \r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"userId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userFirstName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userLastName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userMiddleName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userPhoneNumber\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"userLocation\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userTimeZone\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userLinkedinUrl\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userEduUg\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userEduPg\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userComments\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userVisaStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"userId\",\r",
											"    \"userFirstName\",\r",
											"    \"userLastName\",\r",
											"    \"userMiddleName\",\r",
											"    \"userPhoneNumber\",\r",
											"    \"userLocation\",\r",
											"    \"userTimeZone\",\r",
											"    \"userLinkedinUrl\",\r",
											"    \"userEduUg\",\r",
											"    \"userEduPg\",\r",
											"    \"userComments\",\r",
											"    \"userVisaStatus\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonResponse,schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//validating the data type of the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data type of the response body\",() => {\r",
											"    pm.expect(jsonData.userId).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userFirstName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userLastName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userPhoneNumber).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.userLocation).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userTimeZone).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userLinkedinUrl).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userEduUg).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userEduPg).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userVisaStatus).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userMiddleName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userMiddleName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.userComments).to.be.a(\"string\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "fab90821-45e8-4e64-b5b2-81850ac09d37",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"userComments\":\"string\",\r\n\"userEduPg\": \"MA\",\r\n\"userEduUg\": \"MCA\",\r\n\"userFirstName\": \"John-SDET-285\",\r\n\"userLastName\": \"DOe-SDET-285\",\r\n\"userLinkedinUrl\": \"www.linkedin.com/John285002\",\r\n\"userLocation\": \"string\",\r\n\"userMiddleName\": \"string\",\r\n\"userPhoneNumber\": {{$randomInt}},\r\n\"userRoleMaps\": [\r\n{\r\n\"roleId\": \"R02\",\r\n\"userRoleStatus\": \"ROLE_STAFF\"\r\n}\r\n],\r\n\"userTimeZone\": \"CST\",\r\n\"userVisaStatus\": \"GC-EAD\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}{{CreateUser}}"
							},
							"response": []
						},
						{
							"name": "Negative-Invalid Visa Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "baccfff7-747b-4d66-8c1a-f67240e123b1",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status Code Name has String\",() => {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"var jsonResponse = pm.response.json();\r",
											"var id = jsonResponse.assignmentId;\r",
											"pm.environment.set(\"Assign_CreatedId\", id);\r",
											"console.log(id);\r",
											"\r",
											"//validating the JSON schema\r",
											"var schema = \r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonResponse,schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//validating the data type of the response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "6a8d64ff-62db-4a44-a4dc-10b3ea93dc47",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"userComments\":\"string\",\r\n\"userEduPg\": \"MA\",\r\n\"userEduUg\": \"MCA\",\r\n\"userFirstName\": \"Test-SDET-100\",\r\n\"userLastName\": \"User-SDET-100\",\r\n\"userLinkedinUrl\": \"www.linkedin.com/Test285002\",\r\n\"userLocation\": \"string\",\r\n\"userMiddleName\": \"string\",\r\n\"userPhoneNumber\":{{$randomInt}},\r\n\"userRoleMaps\": [\r\n{\r\n\"roleId\": \"R03\",\r\n\"userRoleStatus\": \"ROLE_STUDENT\"\r\n}\r\n],\r\n\"userTimeZone\": \"PST\",\r\n\"userVisaStatus\": \"L2\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}{{CreateUser}}"
							},
							"response": []
						},
						{
							"name": "Negative-Invalid Time Zone",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d8b56490-f9da-4352-b66d-92d14d34ab52",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status Code Name has String\",() => {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"var jsonResponse = pm.response.json();\r",
											"var id = jsonResponse.assignmentId;\r",
											"pm.environment.set(\"Assign_CreatedId\", id);\r",
											"console.log(id);\r",
											"\r",
											"//validating the JSON schema\r",
											"var schema = \r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonResponse,schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//validating the data type of the response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "8e0c915e-a818-4d11-9a7c-1a0f0b844c6a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"userComments\":\"string\",\r\n\"userEduPg\": \"BBA\",\r\n\"userEduUg\": \"MCA\",\r\n\"userFirstName\": \"Test2-SDET-100\",\r\n\"userLastName\": \"User2-SDET-100\",\r\n\"userLinkedinUrl\": \"www.linkedin.com/Test2285002\",\r\n\"userLocation\": \"string\",\r\n\"userMiddleName\": \"string\",\r\n\"userPhoneNumber\":{{$randomInt}},\r\n\"userRoleMaps\": [\r\n{\r\n\"roleId\": \"R03\",\r\n\"userRoleStatus\": \"ROLE_STUDENT\"\r\n}\r\n],\r\n\"userTimeZone\": \"PDT\",\r\n\"userVisaStatus\": \"H1B\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}{{CreateUser}}"
							},
							"response": []
						},
						{
							"name": "Negative-missing Phone Number",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f0c39e0-f6c8-4c19-af62-4d2268361fad",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status Code Name has String\",() => {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"var jsonResponse = pm.response.json();\r",
											"var id = jsonResponse.assignmentId;\r",
											"pm.environment.set(\"Assign_CreatedId\", id);\r",
											"console.log(id);\r",
											"\r",
											"//validating the JSON schema\r",
											"var schema = \r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonResponse,schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//validating the data type of the response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f241c60b-307b-4d43-a4b4-c7caf5bdd08b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"userComments\":\"string\",\r\n\"userEduPg\": \"BBA\",\r\n\"userEduUg\": \"MCA\",\r\n\"userFirstName\": \"Test3-SDET-100\",\r\n\"userLastName\": \"User3-SDET-100\",\r\n\"userLinkedinUrl\": \"www.linkedin.com/Test32285002\",\r\n\"userLocation\": \"string\",\r\n\"userMiddleName\": \"string\",\r\n\"userRoleMaps\": [\r\n{\r\n\"roleId\": \"R02\",\r\n\"userRoleStatus\": \"ROLE_STAFF\"\r\n}\r\n],\r\n\"userTimeZone\": \"PDT\",\r\n\"userVisaStatus\": \"H1B\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}{{CreateUser}}"
							},
							"response": []
						},
						{
							"name": "Negative-missing Roll Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a39e1768-be67-4e0e-aff3-c041f4a166f8",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status Code Name has String\",() => {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"var jsonResponse = pm.response.json();\r",
											"var id = jsonResponse.assignmentId;\r",
											"pm.environment.set(\"Assign_CreatedId\", id);\r",
											"console.log(id);\r",
											"\r",
											"//validating the JSON schema\r",
											"var schema = \r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonResponse,schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//validating the data type of the response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "32c5dde9-b3d5-4245-89ae-64c11060189f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"userComments\":\"string\",\r\n\"userEduPg\": \"BBA\",\r\n\"userEduUg\": \"MCA\",\r\n\"userFirstName\": \"Test3-SDET-100\",\r\n\"userLastName\": \"User3-SDET-100\",\r\n\"userLinkedinUrl\": \"www.linkedin.com/Test32285002\",\r\n\"userLocation\": \"string\",\r\n\"userMiddleName\": \"string\",\r\n\"userPhoneNumber\": {{$randomInt}},\r\n\"userRoleMaps\": [\r\n{\r\n\"userRoleStatus\": \"ROLE_STUDENT\"\r\n}\r\n],\r\n\"userTimeZone\": \"PST\",\r\n\"userVisaStatus\": \"H1B\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}{{CreateUser}}"
							},
							"response": []
						},
						{
							"name": "Negative-missing Last Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "63f0018d-5717-40fc-a0e8-5852557628fc",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status Code Name has String\",() => {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"var jsonResponse = pm.response.json();\r",
											"var id = jsonResponse.assignmentId;\r",
											"pm.environment.set(\"Assign_CreatedId\", id);\r",
											"console.log(id);\r",
											"\r",
											"//validating the JSON schema\r",
											"var schema = \r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonResponse,schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//validating the data type of the response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "0686d617-f0f9-45dd-a5df-c21962291431",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"userComments\":\"string\",\r\n\"userEduPg\": \"BBA\",\r\n\"userEduUg\": \"MCA\",\r\n\"userFirstName\": \"Test3-SDET-100\",\r\n\"userLinkedinUrl\": \"www.linkedin.com/Test32285002\",\r\n\"userLocation\": \"string\",\r\n\"userMiddleName\": \"string\",\r\n\"userPhoneNumber\": {{$randomInt}},\r\n\"userRoleMaps\": [\r\n{\r\n\"roleId\": \"R01\",\r\n\"userRoleStatus\": \"ROLE_ADMIN\"\r\n}\r\n],\r\n\"userTimeZone\": \"PST\",\r\n\"userVisaStatus\": \"H1B\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}{{CreateUser}}"
							},
							"response": []
						},
						{
							"name": "Negative-missing Role Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22ed1ec3-e329-4213-bbf2-e9f06bf8111e",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status Code Name has String\",() => {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"var jsonResponse = pm.response.json();\r",
											"var id = jsonResponse.assignmentId;\r",
											"pm.environment.set(\"Assign_CreatedId\", id);\r",
											"console.log(id);\r",
											"\r",
											"//validating the JSON schema\r",
											"var schema = \r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonResponse,schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//validating the data type of the response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2cf67a0f-5db9-434d-b347-9982e0c2efd5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"userComments\": \"string\",\r\n\"userEduPg\": \"BE\",\r\n\"userEduUg\": \"MCA\",\r\n\"userFirstName\": \"Krish-SDET-280\",\r\n\"userLastName\": \"William-SDET-280\",\r\n\"userLinkedinUrl\": \"www.linkedin.com/Krish002\",\r\n\"userLocation\": \"string\",\r\n\"userMiddleName\": \"string\",\r\n\"userPhoneNumber\": 3689345664281,\r\n\"userRoleMaps\": [\r\n{\r\n\"roleId\": \"R03\"\r\n}\r\n],\r\n\"userTimeZone\": \"PST\",\r\n\"userVisaStatus\": \"Not-Specified\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}{{CreateUser}}"
							},
							"response": []
						},
						{
							"name": "Negative-missing FirstName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fb792427-7207-4660-a005-c6308c738356",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status Code Name has String\",() => {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"var jsonResponse = pm.response.json();\r",
											"var id = jsonResponse.assignmentId;\r",
											"pm.environment.set(\"Assign_CreatedId\", id);\r",
											"console.log(id);\r",
											"\r",
											"//validating the JSON schema\r",
											"var schema = \r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonResponse,schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//validating the data type of the response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f6c144dd-92c3-4e37-a9c8-cfe17108a604",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"userComments\": \"string\",\r\n\"userEduPg\": \"BE\",\r\n\"userEduUg\": \"MCA\",\r\n\"userLastName\": \"William-SDET-280\",\r\n\"userLinkedinUrl\": \"www.linkedin.com/Krish002\",\r\n\"userLocation\": \"string\",\r\n\"userMiddleName\": \"string\",\r\n\"userPhoneNumber\": 3689345664281,\r\n\"userRoleMaps\": [\r\n{\r\n\"roleId\": \"R01\",\r\n\"userRoleStatus\": \"ROLE_ADMIN\"\r\n}\r\n],\r\n\"userTimeZone\": \"PST\",\r\n\"userVisaStatus\": \"Not-Specified\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}{{CreateUser}}"
							},
							"response": []
						}
					],
					"id": "95d366f6-06d1-44f0-ac77-b59bfe705686"
				}
			],
			"id": "dd6b2c20-ca9d-463c-b3e6-cb82aa3c63ee"
		},
		{
			"name": "Assignment_Submit_Module",
			"item": [
				{
					"name": "Grades by StudentID invalid tc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1755bdeb-d446-44aa-969a-3f95c4d59dd3",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Status message is OK\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"    \r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"var schema = \r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"submissionId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"assignmentId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"userId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subDesc\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subComments\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach1\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach2\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach3\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach4\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach5\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subDateTime\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"gradedBy\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"gradedDateTime\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"grade\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"submissionId\",\r",
									"        \"assignmentId\",\r",
									"        \"userId\",\r",
									"        \"subDesc\",\r",
									"        \"subComments\",\r",
									"        \"subPathAttach1\",\r",
									"        \"subPathAttach2\",\r",
									"        \"subPathAttach3\",\r",
									"        \"subPathAttach4\",\r",
									"        \"subPathAttach5\",\r",
									"        \"subDateTime\",\r",
									"        \"gradedBy\",\r",
									"        \"gradedDateTime\",\r",
									"        \"grade\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Validate Schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema))\r",
									" })"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "693d684a-afa9-47c9-83ac-dd013805c62f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/assignmentsubmission/getGradesByStudentId/U"
					},
					"response": []
				},
				{
					"name": "Grades by StudentID valid tc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "de2a615a-f9a7-41d1-be79-479b96240b80",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Status message is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    \r",
									"});\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"var schema = \r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"submissionId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"assignmentId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"userId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subDesc\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subComments\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach1\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach2\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach3\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach4\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach5\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subDateTime\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"gradedBy\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"gradedDateTime\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"grade\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"submissionId\",\r",
									"        \"assignmentId\",\r",
									"        \"userId\",\r",
									"        \"subDesc\",\r",
									"        \"subComments\",\r",
									"        \"subPathAttach1\",\r",
									"        \"subPathAttach2\",\r",
									"        \"subPathAttach3\",\r",
									"        \"subPathAttach4\",\r",
									"        \"subPathAttach5\",\r",
									"        \"subDateTime\",\r",
									"        \"gradedBy\",\r",
									"        \"gradedDateTime\",\r",
									"        \"grade\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Validate Schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema))\r",
									" })"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "35b9dce7-4c2a-4263-ad9f-33a4b8d3a2af",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/assignmentsubmission/getGradesByStudentId/U234"
					},
					"response": []
				},
				{
					"name": "All Submission",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "277fe6c3-bbbf-4bf3-840a-3bff46864458",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Status message is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    \r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"var schema = \r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"submissionId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"assignmentId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"userId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subDesc\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subComments\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach1\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach2\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach3\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach4\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach5\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subDateTime\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"gradedBy\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"gradedDateTime\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"grade\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"submissionId\",\r",
									"        \"assignmentId\",\r",
									"        \"userId\",\r",
									"        \"subDesc\",\r",
									"        \"subComments\",\r",
									"        \"subPathAttach1\",\r",
									"        \"subPathAttach2\",\r",
									"        \"subPathAttach3\",\r",
									"        \"subPathAttach4\",\r",
									"        \"subPathAttach5\",\r",
									"        \"subDateTime\",\r",
									"        \"gradedBy\",\r",
									"        \"gradedDateTime\",\r",
									"        \"grade\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Validate Schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema))\r",
									" })\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "645c8845-fd66-461e-ad71-9553c6b96ac5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/assignmentsubmission"
					},
					"response": []
				},
				{
					"name": "Resubmit Assignment valid tc",
					"id": "44651d3f-6d54-4c5a-a4e8-8dd6e7b21be9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \r\n        \"assignmentId\": 13,\r\n        \"userId\": \"U92\",\r\n        \"subDesc\": \"team 22\",\r\n        \"subComments\": \"team22 testing post request\",\r\n        \"subPathAttach1\": \"team 22\",\r\n        \"subPathAttach2\": \"team 22\",\r\n        \"subPathAttach3\": \"team 22\",\r\n        \"subPathAttach4\": \"team 22\",\r\n        \"subPathAttach5\": \"team 22\",\r\n        \"subDateTime\": \"06-26-2023 19:55:04\",\r\n        \"gradedBy\": null,\r\n        \"gradedDateTime\": null,\r\n        \"grade\": -1\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/assignmentsubmission/196"
					},
					"response": []
				},
				{
					"name": "Grade Assignment Submission valid tc",
					"id": "ad4f0fe6-377e-413d-b938-9b56c46901ed",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"assignmentId\": 197,\r\n        \"userId\": \"U234\",\r\n        \"subDesc\": \"Assignment submission by U234\",\r\n        \"subComments\": \"submitted succesfully\",\r\n        \"subPathAttach1\": \"file1.json\",\r\n        \"subPathAttach2\": \"file2.json\",\r\n        \"subPathAttach3\": \"file3.json\",\r\n        \"subPathAttach4\": \"file4.json\",\r\n        \"subPathAttach5\": \"file5.json\",\r\n        \"subDateTime\": \"06-26-2023 20:48:47\",\r\n        \"gradedBy\": \"U1172\",\r\n        \"gradedDateTime\": null,\r\n        \"grade\": 2\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/assignmentsubmission/gradesubmission/211"
					},
					"response": []
				},
				{
					"name": "GET Grades by BatchID valid tc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a4999253-3a85-49ca-8f68-35ce5ec8607b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Status message is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    \r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"var schema = \r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"submissionId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"assignmentId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"userId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subDesc\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subComments\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach1\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach2\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach3\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach4\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach5\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subDateTime\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"gradedBy\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"gradedDateTime\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"grade\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"submissionId\",\r",
									"        \"assignmentId\",\r",
									"        \"userId\",\r",
									"        \"subDesc\",\r",
									"        \"subComments\",\r",
									"        \"subPathAttach1\",\r",
									"        \"subPathAttach2\",\r",
									"        \"subPathAttach3\",\r",
									"        \"subPathAttach4\",\r",
									"        \"subPathAttach5\",\r",
									"        \"subDateTime\",\r",
									"        \"gradedBy\",\r",
									"        \"gradedDateTime\",\r",
									"        \"grade\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Validate Schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema))\r",
									" })"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ebc7acb3-c06b-4a98-b244-38e213c7c731",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/assignmentsubmission/grades/3020"
					},
					"response": []
				},
				{
					"name": " https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/assignmentsubmission/studentbatch/abcd",
					"id": "4460c0c9-8d41-4fe6-9180-40cd8be70662",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/assignmentsubmission/studentbatch/abcd"
					},
					"response": []
				},
				{
					"name": "GET Grades by BatchID invalid tc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a3ec7c01-9bfd-430b-bd71-81ad2992af26",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Status message is Ok\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"    \r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"var schema = \r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"submissionId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"assignmentId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"userId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subDesc\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subComments\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach1\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach2\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach3\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach4\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach5\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subDateTime\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"gradedBy\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"gradedDateTime\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"grade\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"submissionId\",\r",
									"        \"assignmentId\",\r",
									"        \"userId\",\r",
									"        \"subDesc\",\r",
									"        \"subComments\",\r",
									"        \"subPathAttach1\",\r",
									"        \"subPathAttach2\",\r",
									"        \"subPathAttach3\",\r",
									"        \"subPathAttach4\",\r",
									"        \"subPathAttach5\",\r",
									"        \"subDateTime\",\r",
									"        \"gradedBy\",\r",
									"        \"gradedDateTime\",\r",
									"        \"grade\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Validate Schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema))\r",
									" })"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e1eb68f9-3696-4f98-8005-453e4828a07d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/assignmentsubmission/grades/0"
					},
					"response": []
				},
				{
					"name": "GET Submission by User ID valid tc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c3a958fb-e2df-428c-884c-aa1c986234a8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Status message is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    \r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"var schema = \r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"submissionId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"assignmentId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"userId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subDesc\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subComments\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach1\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach2\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach3\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach4\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach5\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subDateTime\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"gradedBy\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"gradedDateTime\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"grade\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"submissionId\",\r",
									"        \"assignmentId\",\r",
									"        \"userId\",\r",
									"        \"subDesc\",\r",
									"        \"subComments\",\r",
									"        \"subPathAttach1\",\r",
									"        \"subPathAttach2\",\r",
									"        \"subPathAttach3\",\r",
									"        \"subPathAttach4\",\r",
									"        \"subPathAttach5\",\r",
									"        \"subDateTime\",\r",
									"        \"gradedBy\",\r",
									"        \"gradedDateTime\",\r",
									"        \"grade\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Validate Schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema))\r",
									" })"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c8b94b43-5676-4d36-9ffb-10667c364af8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/assignmentsubmission/student/U75"
					},
					"response": []
				},
				{
					"name": "GET Submission by User ID invalid tc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3720c8d3-a99f-4681-ac06-f5b6e4edfaaa",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Status message is Ok\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"    \r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"var schema = \r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"submissionId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"assignmentId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"userId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subDesc\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subComments\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach1\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach2\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach3\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach4\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach5\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subDateTime\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"gradedBy\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"gradedDateTime\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"grade\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"submissionId\",\r",
									"        \"assignmentId\",\r",
									"        \"userId\",\r",
									"        \"subDesc\",\r",
									"        \"subComments\",\r",
									"        \"subPathAttach1\",\r",
									"        \"subPathAttach2\",\r",
									"        \"subPathAttach3\",\r",
									"        \"subPathAttach4\",\r",
									"        \"subPathAttach5\",\r",
									"        \"subDateTime\",\r",
									"        \"gradedBy\",\r",
									"        \"gradedDateTime\",\r",
									"        \"grade\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Validate Schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema))\r",
									" })"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6a5d882f-24fd-4e2c-a32b-a802eb4420cd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/assignmentsubmission/student/U7"
					},
					"response": []
				},
				{
					"name": "Submission by batch ID valid tc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "801fa4f2-a4bb-4fed-b490-706c4c2ba286",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Status message is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    \r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"var schema = \r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"submissionId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"assignmentId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"userId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subDesc\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subComments\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach1\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach2\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach3\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach4\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach5\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subDateTime\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"gradedBy\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"gradedDateTime\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"grade\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"submissionId\",\r",
									"        \"assignmentId\",\r",
									"        \"userId\",\r",
									"        \"subDesc\",\r",
									"        \"subComments\",\r",
									"        \"subPathAttach1\",\r",
									"        \"subPathAttach2\",\r",
									"        \"subPathAttach3\",\r",
									"        \"subPathAttach4\",\r",
									"        \"subPathAttach5\",\r",
									"        \"subDateTime\",\r",
									"        \"gradedBy\",\r",
									"        \"gradedDateTime\",\r",
									"        \"grade\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Validate Schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema))\r",
									" })"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "cfa960e9-b82e-40a4-bd6b-addf75dea964",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/assignmentsubmission/studentbatch/1"
					},
					"response": []
				},
				{
					"name": "GET Grades by Assignment ID invali endpoint",
					"id": "2ef421dd-129a-4562-8fe2-6971b711cc96",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/assignmentsubmission/getGrades/1287\n"
					},
					"response": []
				},
				{
					"name": "DELETE Request valid tc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "93cd4938-ba2f-4ef0-a241-08854310f558",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Status message is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    \r",
									"});\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"var schema = \r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"submissionId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"assignmentId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"userId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subDesc\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subComments\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach1\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach2\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach3\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach4\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach5\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subDateTime\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"gradedBy\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"gradedDateTime\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"grade\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"submissionId\",\r",
									"        \"assignmentId\",\r",
									"        \"userId\",\r",
									"        \"subDesc\",\r",
									"        \"subComments\",\r",
									"        \"subPathAttach1\",\r",
									"        \"subPathAttach2\",\r",
									"        \"subPathAttach3\",\r",
									"        \"subPathAttach4\",\r",
									"        \"subPathAttach5\",\r",
									"        \"subDateTime\",\r",
									"        \"gradedBy\",\r",
									"        \"gradedDateTime\",\r",
									"        \"grade\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Validate Schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema))\r",
									" })"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f918b423-858d-41fe-b373-b5c4a5473d54",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/assignmentsubmission/384"
					},
					"response": []
				},
				{
					"name": "Delete Request invalid tc",
					"id": "1dc9709f-3002-44a1-a1b0-1305bef47f40",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/assignmentsubmission/3"
					},
					"response": []
				},
				{
					"name": "Grade Assignment Submission invalid tc",
					"id": "ed493367-263b-4c0c-bb56-8c7661f604d1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"assignmentId\": null,\r\n        \"userId\": \"null\",\r\n        \"subDesc\": \"null\",\r\n        \"subComments\": \"submitted succesfully\",\r\n        \"subPathAttach1\": \"file1.json\",\r\n        \"subPathAttach2\": \"file2.json\",\r\n        \"subPathAttach3\": \"file3.json\",\r\n        \"subPathAttach4\": \"file4.json\",\r\n        \"subPathAttach5\": \"file5.json\",\r\n        \"subDateTime\": \"06-26-2023 20:48:47\",\r\n        \"gradedBy\": \"U1172\",\r\n        \"gradedDateTime\": null,\r\n        \"grade\": 2\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/assignmentsubmission/gradesubmission/21"
					},
					"response": []
				}
			],
			"id": "43ce9408-6808-4626-a790-514df62b97cf"
		}
	],
	"variable": [
		{
			"id": "aec5a938-d359-4be0-ac02-d9b0da2d0a54",
			"key": "Assign_CreatedId",
			"value": ""
		},
		{
			"id": "28f71f72-6b45-40ca-8e6b-5b4c64008022",
			"key": "userEndpoint",
			"value": "/users/users"
		},
		{
			"id": "8204990e-750f-4ea5-9781-b5d6e39ed2ec",
			"key": "{{saveprogram}}",
			"value": "saveprogram"
		}
	]
}