{
	"info": {
		"_postman_id": "35867b11-1125-42b3-a0a2-f793ee689912",
		"name": "Team18-PostWomen-Techies-API-Hackathon-2023",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Program Module",
			"item": [
				{
					"name": "Post Program",
					"item": [
						{
							"name": "Post Program-valid end points and base url",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e046177d-93de-449d-b914-90cd4d83bce3",
										"exec": [
											"//Valiate status Code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//Validate status message\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\")\r",
											"});\r",
											"\r",
											"//Validate response header - Content-Type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//Validate response body\r",
											"    pm.test(\"Validate response body\", function(){\r",
											"        //pm.expect(jsonResponse.programId,pm.environment.get(programId));\r",
											"        pm.expect(jsonResponse.programName,pm.environment.get(\"Jun23-PostWomenTechies-SDET-AP12\"));\r",
											"        pm.expect(jsonResponse.programDescription,pm.environment.get(\"selenium\"));\r",
											"        pm.expect(jsonResponse.programStatus,pm.environment.get(\"Active\"));\r",
											"       // pm.expect(jsonResponse.creationTime,pm.environment.get(creationTime));\r",
											"       // pm.expect(jsonResponse.lastModTime,pm.environment.get(lastModTime));\r",
											"    })\r",
											"\r",
											"//Validate response json Schema\r",
											"//using json to json Schema converter\r",
											"\r",
											"var schema=\r",
											"{\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"Type\":\"Object\",\r",
											"    \"properties\": {\r",
											"        //\"programId\": {\r",
											"           // \"type\": \"integer\"\r",
											"        //},\r",
											"        \"programName\": {\r",
											"            \"type\": \"string\"\r",
											"        },    \r",
											"        \"programDescription\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"programStatus\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        //\"creationTime\": {\r",
											"            //\"type\": \"integer\"\r",
											"        //},\r",
											"        //\"lastModTime\": {\r",
											"            //\"type\": \"integer\"\r",
											"        //}\r",
											"    },\r",
											"    \"required\" :[\r",
											"        //\"programId\",\r",
											"        \"programName\",\r",
											"        \"programDescription\",\r",
											"        \"programStatus\"\r",
											"        //\"creationTime\",\r",
											"        //\"lastModTime\"\r",
											"    ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"    //using tv4 validatroty library and validate method\r",
											"    pm.expect(tv4.validate(jsonResponse[0],schema)).to.be.true\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"    \r",
											"\r",
											"\r",
											"    \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c5b09c04-4b6a-4444-be1f-6b5fe59e864a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"selenium\",\r\n  \"programName\": \"Jun23-PostWomenTechies-SDET-0101\",\r\n   \"programStatus\": \"Active\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{{{saveprogram}}}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{{{saveprogram}}}}"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Program-valid end points and base url _2nd program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e046177d-93de-449d-b914-90cd4d83bce3",
										"exec": [
											"//Valiate status Code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//Validate status message\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\")\r",
											"});\r",
											"\r",
											"//Validate response header - Content-Type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//Validate response body\r",
											"    pm.test(\"Validate response body\", function(){\r",
											"        //pm.expect(jsonResponse.programId,pm.environment.get(programId));\r",
											"        pm.expect(jsonResponse.programName,pm.environment.get(\"Jun23-PostWomenTechies-SDET-0102\"));\r",
											"        pm.expect(jsonResponse.programDescription,pm.environment.get(\"selenium\"));\r",
											"        pm.expect(jsonResponse.programStatus,pm.environment.get(\"Active\"));\r",
											"       // pm.expect(jsonResponse.creationTime,pm.environment.get(creationTime));\r",
											"       // pm.expect(jsonResponse.lastModTime,pm.environment.get(lastModTime));\r",
											"    })\r",
											"\r",
											"//Validate response json Schema\r",
											"//using json to json Schema converter\r",
											"\r",
											"var schema=\r",
											"{\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"Type\":\"Object\",\r",
											"    \"properties\": {\r",
											"        //\"programId\": {\r",
											"           // \"type\": \"integer\"\r",
											"        //},\r",
											"        \"programName\": {\r",
											"            \"type\": \"string\"\r",
											"        },    \r",
											"        \"programDescription\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"programStatus\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        //\"creationTime\": {\r",
											"            //\"type\": \"integer\"\r",
											"        //},\r",
											"        //\"lastModTime\": {\r",
											"            //\"type\": \"integer\"\r",
											"        //}\r",
											"    },\r",
											"    \"required\" :[\r",
											"        //\"programId\",\r",
											"        \"programName\",\r",
											"        \"programDescription\",\r",
											"        \"programStatus\"\r",
											"        //\"creationTime\",\r",
											"        //\"lastModTime\"\r",
											"    ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"    //using tv4 validatroty library and validate method\r",
											"    pm.expect(tv4.validate(jsonResponse[0],schema)).to.be.true\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"    \r",
											"\r",
											"\r",
											"    \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3a8184a4-2fa9-46b2-821c-f30f2af7c3bd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"selenium\",\r\n  \"programName\": \"Jun23-PostWomenTechies-SDET-0102\",\r\n   \"programStatus\": \"Active\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{{{saveprogram}}}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{{{saveprogram}}}}"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Program-Random Value for Program Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2306d6ba-1b8c-4358-a076-a685e0daf4a3",
										"exec": [
											"//Valiate status Code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//Validate status message\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\")\r",
											"});\r",
											"\r",
											"//Validate response header - Content-Type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//Validate response body\r",
											"    pm.test(\"Validate response body\", function(){\r",
											"       \r",
											"        pm.expect(jsonResponse.programName,pm.environment.get(\"Jun23-PostWomenTechies-AP19\"));\r",
											"        pm.expect(jsonResponse.programDescription,pm.environment.get(\"selenium\"));\r",
											"        pm.expect(jsonResponse.programStatus,pm.environment.get(\"12\"));\r",
											"       \r",
											"    })\r",
											"\r",
											"//Validate response json Schema\r",
											"//using json to json Schema converter\r",
											"\r",
											"var schema=\r",
											"{\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"Type\":\"Object\",\r",
											"    \"properties\": {\r",
											"        \r",
											"        \"programName\": {\r",
											"            \"type\": \"string\"\r",
											"        },    \r",
											"        \"programDescription\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"programStatus\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \r",
											"    },\r",
											"    \"required\" :[\r",
											"        //\"programId\",\r",
											"        \"programName\",\r",
											"        \"programDescription\",\r",
											"        \"programStatus\"\r",
											"        //\"creationTime\",\r",
											"        //\"lastModTime\"\r",
											"    ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"    //using tv4 validatroty library and validate method\r",
											"    pm.expect(tv4.validate(jsonResponse[0],schema)).to.be.true\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"    \r",
											"\r",
											"\r",
											"    \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2deeaa04-c660-4ab3-8ed7-d58f6f47dc2a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"selenium\",\r\n  \"programName\": \"Jun23-PostWomenTechies-AP19\",\r\n  \"programStatus\": \"12\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{{{saveprogram}}}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{{{saveprogram}}}}"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Program-Already Existing Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "33e18ec2-c6c1-4fce-93d4-152788d9fd7e",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"\r",
											"        \r",
											"        \"programName\": {\r",
											"            \"type\": \"string\"\r",
											"        },    \r",
											"        \"programDescription\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"programStatus\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"       \r",
											"    },\r",
											"    \"required\" :[\r",
											"        \r",
											"        \"programName\",\r",
											"        \"programDescription\",\r",
											"        \"programStatus\",\r",
											"       \r",
											"    ]\r",
											"}\r",
											"\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"    //using tv4 validatroty library and validate method\r",
											"    pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ba35d715-f2d7-43fb-953b-8b4faa511888",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"selenium\",\r\n  \"programName\": \"Jun23-PostWomenTechies-P2\",\r\n   \"programStatus\": \"Active\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{{{saveprogram}}}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{{{saveprogram}}}}"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Program-Without Program Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "45169673-d2c0-4d3d-b034-676929078e50",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"\r",
											"        \r",
											"        \"programName\": {\r",
											"            \"type\": \"string\"\r",
											"        },    \r",
											"        \"programDescription\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"programStatus\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"       \r",
											"    },\r",
											"    \"required\" :[\r",
											"        \r",
											"        \"programName\",\r",
											"        \"programDescription\",\r",
											"        \"programStatus\",\r",
											"       \r",
											"    ]\r",
											"}\r",
											"\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"    //using tv4 validatroty library and validate method\r",
											"    pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "46903888-4dee-4e61-9b7d-417446ae2230",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"selenium\",\r\n  \"programName\": \"Jun23-PostWomenTechies-P2\"\r\n\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{{{saveprogram}}}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{{{saveprogram}}}}"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Program-Without Program Description",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "99585ce8-7151-4f8e-bb18-0829415fe3dd",
										"exec": [
											"//Valiate status Code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//Validate status message\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\")\r",
											"});\r",
											"\r",
											"//Validate response header - Content-Type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//Validate response body\r",
											"    pm.test(\"Validate response body\", function(){\r",
											"        \r",
											"        \r",
											"        pm.expect(jsonResponse.programName,pm.environment.get(\"Jun23-PostWomenTechies-P5_0\"));\r",
											"        pm.expect(jsonResponse.programDescription,pm.environment.get(\"selenium\"));\r",
											"       // pm.expect(jsonResponse.programStatus,pm.environment.get(\"Active\"));\r",
											"      \r",
											"      \r",
											"    })\r",
											"\r",
											"//Validate response json Schema\r",
											"//using json to json Schema converter\r",
											"\r",
											"var schema=\r",
											"{\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"Type\":\"Object\",\r",
											"    \"properties\": {\r",
											"        \r",
											"        \r",
											"        \"programName\": {\r",
											"            \"type\": \"string\"\r",
											"        },    \r",
											"        \"programDescription\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"programStatus\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"     \r",
											"     \r",
											"    },\r",
											"    \"required\" :[\r",
											"        \r",
											"        \r",
											"        \"programName\",\r",
											"        \"programDescription\",\r",
											"        \"programStatus\"\r",
											"       \r",
											"       \r",
											"    ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"    //using tv4 validatroty library and validate method\r",
											"    pm.expect(tv4.validate(jsonResponse[0],schema)).to.be.true\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"    \r",
											"\r",
											"\r",
											"    \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a8cc1445-f810-4a04-acf4-5a72c1de1e60",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n  \"programName\": \"Jun23-PostWomenTechies-P5_0\",\r\n   \"programStatus\": \"Active\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{{{saveprogram}}}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{{{saveprogram}}}}"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Program-Without Program Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "44adad33-b7ff-4550-b531-a0e9c49c7346",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"\r",
											"        \r",
											"        \"programName\": {\r",
											"            \"type\": \"string\"\r",
											"        },    \r",
											"        \"programDescription\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"programStatus\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"       \r",
											"    },\r",
											"    \"required\" :[\r",
											"        \r",
											"        \"programName\",\r",
											"        \"programDescription\",\r",
											"        \"programStatus\",\r",
											"       \r",
											"    ]\r",
											"}\r",
											"\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"    //using tv4 validatroty library and validate method\r",
											"    pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "89f0f753-26c3-4d26-9d0a-ded3dd11b42c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"selenium\",\r\n\r\n   \"programStatus\": \"Active\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{{{saveprogram}}}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{{{saveprogram}}}}"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Program-Empty Program Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4921c587-57dd-4d4e-9bd3-7dff08dd7242",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"\r",
											"        \r",
											"        \"programName\": {\r",
											"            \"type\": \"string\"\r",
											"        },    \r",
											"        \"programDescription\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"programStatus\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"       \r",
											"    },\r",
											"    \"required\" :[\r",
											"        \r",
											"        \"programName\",\r",
											"        \"programDescription\",\r",
											"        \"programStatus\",\r",
											"       \r",
											"    ]\r",
											"}\r",
											"\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"    //using tv4 validatroty library and validate method\r",
											"    pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "875acaad-b3b3-44b7-8125-246003bb46d1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"selenium\",\r\n  \"programName\": \"\",\r\n   \"programStatus\": \"Active\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{{{saveprogram}}}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{{{saveprogram}}}}"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Program-Empty Program Description",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2bf15f7e-81cb-48af-9f9f-7bca3f40039a",
										"exec": [
											"//Valiate status Code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//Validate status message\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\")\r",
											"});\r",
											"\r",
											"//Validate response header - Content-Type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//Validate response body\r",
											"    pm.test(\"Validate response body\", function(){\r",
											"       \r",
											"        pm.expect(jsonResponse.programName,pm.environment.get(\"Jun23-PostWomenTechies-AP18_2\"));\r",
											"        pm.expect(jsonResponse.programDescription,pm.environment.get(\"\"));\r",
											"        pm.expect(jsonResponse.programStatus,pm.environment.get(\"Active\"));\r",
											"       \r",
											"    })\r",
											"\r",
											"//Validate response json Schema\r",
											"//using json to json Schema converter\r",
											"\r",
											"var schema=\r",
											"{\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"Type\":\"Object\",\r",
											"    \"properties\": {\r",
											"        \r",
											"        \"programName\": {\r",
											"            \"type\": \"string\"\r",
											"        },    \r",
											"        \"programDescription\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"programStatus\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \r",
											"    },\r",
											"    \"required\" :[\r",
											"        \r",
											"        \"programName\",\r",
											"        \"programDescription\",\r",
											"        \"programStatus\"\r",
											"        \r",
											"    ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"    //using tv4 validatroty library and validate method\r",
											"    pm.expect(tv4.validate(jsonResponse[0],schema)).to.be.true\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"    \r",
											"\r",
											"\r",
											"    \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "8e114d92-92a4-4407-89c0-ddec34e8fd19",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\":\"\",\r\n  \"programName\": \"Jun23-PostWomenTechies-AP-18_2\",\r\n   \"programStatus\": \"Active\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{{{saveprogram}}}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{{{saveprogram}}}}"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Program-Empty payload/request body",
							"id": "2bf4beb7-bfae-4afb-9437-98566ceaa88c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{{{saveprogram}}}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{{{saveprogram}}}}"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Program-Invalid json Schema",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e904c980-3212-4fd5-9adc-3192f0a61591",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \r",
											"   \r",
											"        \"programName\": {\r",
											"            \"type\": \"string\"\r",
											"        },    \r",
											"        \"programDescription\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"programStatus\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"       \r",
											"    },\r",
											"    \"required\" :[\r",
											"        \r",
											"        \"programName\",\r",
											"        \"programDescription\",\r",
											"        \"programStatus\",\r",
											"       \r",
											"    ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "791e90de-6b24-42f9-b492-cd39c3d368d5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"selenium\",\r\n  \"programNamee\": \"Jun23-PostWomenTechies-P20\",\r\n  \"programStatus\": \"Active\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{{{saveprogram}}}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{{{saveprogram}}}}"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Program-Invalid End Points",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81e9c4d4-bf41-4ce0-be36-9726ad3fd24e",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f34d52d3-abab-40f3-b1b2-2e91ead33d04",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"selenium\",\r\n  \"programName\": \"Jun23-PostWomenTechies-P2\",\r\n   \"programStatus\": \"Active\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/save-prograam",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"save-prograam"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Program-Invalid Base Url",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d21f27ef-c505-49da-9851-5768bed1f325",
										"exec": [
											"console.log(\"Due to application error, response body validation cannot be done\")\r",
											"console.log(\"JSONError: Unexpected token '<' at 1:1<!DOCTYPE html>^\");\r",
											"\r",
											"//validate status code \r",
											"/*pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })*/\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3d7f198f-2829-4628-bb66-53a44e48cbfb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"selenium\",\r\n  \"programName\": \"Jun23-PostWomenTechies-P2\",\r\n   \"programStatus\": \"Active\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/foo/lms/{{{{saveprogram}}}}",
									"protocol": "https",
									"host": [
										"lms-api-hackathon-june2023-930a8b0f895d",
										"herokuapp",
										"com"
									],
									"path": [
										"foo",
										"lms",
										"{{{{saveprogram}}}}"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Program-Invalid Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6b057780-6a1a-4bf3-ba41-19ecd3ee0ede",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,405);\r",
											"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \r",
											"     \"programDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"     \"programName\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"  \r",
											"  },\r",
											"  \"required\": [\r",
											"     \"programName\",\r",
											"     \"programDescription\",\r",
											"     \"programStatus\",\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c0bf18c8-8a89-41f4-ab87-4faa18d117f1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"selenium\",\r\n  \"programName\": \"Jun23-PostWomenTechies-P2\",\r\n  \"programStatus\": \"Active\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{{{saveprogram}}}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{{{saveprogram}}}}"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Program-Empty  Program Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "45169673-d2c0-4d3d-b034-676929078e50",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"\r",
											"        \r",
											"        \"programName\": {\r",
											"            \"type\": \"string\"\r",
											"        },    \r",
											"        \"programDescription\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"programStatus\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"       \r",
											"    },\r",
											"    \"required\" :[\r",
											"        \r",
											"        \"programName\",\r",
											"        \"programDescription\",\r",
											"        \"programStatus\",\r",
											"       \r",
											"    ]\r",
											"}\r",
											"\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"    //using tv4 validatroty library and validate method\r",
											"    pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "4086a2c3-2a05-4bee-b6df-bdb7831e0513",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"selenium\",\r\n  \"programName\": \"Jun23-PostWomenTechies-P2\",\r\n   \"programStatus\":\"\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{{{saveprogram}}}};",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{{{saveprogram}}}};"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Program-Empty Program Description",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "99585ce8-7151-4f8e-bb18-0829415fe3dd",
										"exec": [
											"//Valiate status Code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//Validate status message\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\")\r",
											"});\r",
											"\r",
											"//Validate response header - Content-Type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//Validate response body\r",
											"    pm.test(\"Validate response body\", function(){\r",
											"        \r",
											"        \r",
											"        pm.expect(jsonResponse.programName,pm.environment.get(\"Jun23-PostWomenTechies-P5_0\"));\r",
											"        pm.expect(jsonResponse.programDescription,pm.environment.get(\"selenium\"));\r",
											"       // pm.expect(jsonResponse.programStatus,pm.environment.get(\"Active\"));\r",
											"      \r",
											"      \r",
											"    })\r",
											"\r",
											"//Validate response json Schema\r",
											"//using json to json Schema converter\r",
											"\r",
											"var schema=\r",
											"{\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"Type\":\"Object\",\r",
											"    \"properties\": {\r",
											"        \r",
											"        \r",
											"        \"programName\": {\r",
											"            \"type\": \"string\"\r",
											"        },    \r",
											"        \"programDescription\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"programStatus\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"     \r",
											"     \r",
											"    },\r",
											"    \"required\" :[\r",
											"        \r",
											"        \r",
											"        \"programName\",\r",
											"        \"programDescription\",\r",
											"        \"programStatus\"\r",
											"       \r",
											"       \r",
											"    ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"    //using tv4 validatroty library and validate method\r",
											"    pm.expect(tv4.validate(jsonResponse[0],schema)).to.be.true\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"    \r",
											"\r",
											"\r",
											"    \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e3252f53-2f4c-4502-a1de-c7cb74fac445",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"programDescription\":\"\",\r\n  \"programName\": \"Jun23-PostWomenTechies-P5_0\",\r\n   \"programStatus\": \"Active\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{{{saveprogram}}}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{{{saveprogram}}}}"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Program-Empty  Program Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92b614bd-02af-4cb0-a908-c5f9a15fae34",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"\r",
											"        \r",
											"        \"programName\": {\r",
											"            \"type\": \"string\"\r",
											"        },    \r",
											"        \"programDescription\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"programStatus\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"       \r",
											"    },\r",
											"    \"required\" :[\r",
											"        \r",
											"        \"programName\",\r",
											"        \"programDescription\",\r",
											"        \"programStatus\",\r",
											"       \r",
											"    ]\r",
											"}\r",
											"\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"    //using tv4 validatroty library and validate method\r",
											"    pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "349467ec-5994-4e14-8a1f-73f3fcad87bb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"selenium\",\r\n\r\n   \"programStatus\": \"Active\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{{{saveprogram}}}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{{{saveprogram}}}}"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "3c6d017f-f65f-4a15-8f84-47a9be280a8b"
				},
				{
					"name": "GET All Program",
					"item": [
						{
							"name": "Get All Programs-base url and Valid End Points",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3297a23e-346e-4c16-8956-34eb0df117d9",
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate Response body\r",
											"    pm.test(\"Validate Response body\", function() {\r",
											"         \r",
											"        pm.expect(jsonResponse.programId, pm.environment.get(\"programId\"));\r",
											"        pm.expect(jsonResponse. programName,pm.environment.get (\"programName\"));\r",
											"        pm.expect(jsonResponse.programDescription,pm.environment.get(\"programDescription\"));\r",
											"        pm.expect(jsonResponse.programStatus, pm.environment.get(\"programStatus\"));\r",
											"        pm.expect(jsonResponse.creationTime, pm.environment.get(\"creationTime\"));\r",
											"        pm.expect(jsonResponse.lastModTime, pm.environment.get(\"lastModTime\"));\r",
											"        \r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =  \r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"programId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"programDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"programStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"creationTime\": {\r",
											"      \"type\": \"null\"\r",
											"    },\r",
											"    \"lastModTime\": {\r",
											"      \"type\": \"null\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"programId\",\r",
											"    \"programName\",\r",
											"    \"programDescription\",\r",
											"    \"programStatus\",\r",
											"    \"creationTime\",\r",
											"    \"lastModTime\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse[0],schema)).to.be.true\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"    \r",
											"\r",
											"\r",
											"    \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "053357a7-e535-4c42-b8a6-17d6d2e8e60d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{allPrograms}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{allPrograms}}"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Programs-Invalid End Points",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26303274-c217-488f-a471-21a746c00d8c",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "134126c3-dc68-47ea-b0cd-551b461e43c9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/allPrograams",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"allPrograams"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Programs-Invalid base url",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed6525e8-6293-47d2-be3c-c99233d2b091",
										"exec": [
											"console.log(\"Due to application error, response body validation cannot be done\")\r",
											"console.log(\"JSONError: Unexpected token '<' at 1:1<!DOCTYPE html>^\");\r",
											"\r",
											"//validate status code \r",
											"/*pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											"  //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \r",
											"     \"programDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"     \"programName\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"creationTime\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"     \"lastModTime\": {\r",
											"      \"type\": \"integer\"\r",
											"    }\r",
											"\r",
											"  },\r",
											"  \"required\": [\r",
											"     \"programName\",\r",
											"     \"programDescription\",\r",
											"     \"programStatus\",\r",
											"     \"creationTime\",\r",
											"     \"lastModTime\"\r",
											"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })*/\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f9301ab9-f129-4939-871c-fedbc910788d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/foolms/{{allPrograms}}",
									"protocol": "https",
									"host": [
										"lms-api-hackathon-june2023-930a8b0f895d",
										"herokuapp",
										"com"
									],
									"path": [
										"foolms",
										"{{allPrograms}}"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Programs-Invalid Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "97a70221-d34e-448f-a283-66dcd1c6c69d",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,405);\r",
											"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"\r",
											"       \"programId\": {\r",
											"      \"type\": \"integer\" \r",
											"      },\r",
											"    \r",
											"     \"programDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"     \"programName\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"creationTime\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"     \"lastModTime\": {\r",
											"      \"type\": \"integer\"\r",
											"    }\r",
											"  \r",
											"  },\r",
											"  \"required\": [\r",
											"     \"programId\",\r",
											"     \"programName\",\r",
											"     \"programDescription\",\r",
											"     \"programStatus\",\r",
											"     \"creationTime\",\r",
											"     \"lastModTime\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "efd6d063-4379-440e-8aa3-27ed130683f6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{allPrograms}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{allPrograms}}"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "45292d52-6ceb-4c70-a734-d8363d139330"
				},
				{
					"name": "GET one ProgramID",
					"item": [
						{
							"name": "Get one ProgramID with valid end points",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a3f512f7-3ca8-4bc8-87fd-902fa9f63cea",
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate Response body\r",
											"    pm.test(\"Validate Response body\", function() {\r",
											"         \r",
											"        pm.expect(jsonResponse.programId, pm.environment.get(\"programId\"));\r",
											"        pm.expect(jsonResponse. programName,pm.environment.get (\"programName\"));\r",
											"        pm.expect(jsonResponse.programDescription,pm.environment.get(\"programDescription\"));\r",
											"        pm.expect(jsonResponse.programStatus, pm.environment.get(\"programStatus\"));\r",
											"        pm.expect(jsonResponse.creationTime, pm.environment.get(\"creationTime\"));\r",
											"        pm.expect(jsonResponse.lastModTime, pm.environment.get(\"lastModTime\"));\r",
											"        \r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =  \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"   \r",
											"    \"programId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"programDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"programStatus\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"creationTime\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"lastModTime\": {\r",
											"      \"type\":  \"integer\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"     \"programId\",\r",
											"     \"programName\",\r",
											"     \"programDescription\",\r",
											"     \"programStatus\",\r",
											"     \"creationTime\",\r",
											"     \"lastModTime\",\r",
											"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"    \r",
											"\r",
											"\r",
											"    \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "bd8e68c7-9d84-4c74-b4e6-104301a381b6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{programs}}/02",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{programs}}",
										"02"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET one ProgramId-Invalid Base URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "58c366ca-c693-42a5-a885-0a804e075f74",
										"exec": [
											"console.log(\"Due to application error, response body validation cannot be done\")\r",
											"console.log(\"JSONError: Unexpected token '<' at 1:1<!DOCTYPE html>^\");\r",
											"\r",
											"//validate status code \r",
											"/*pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })*/\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "9a226dcb-f00a-497f-9319-a6384f667190",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/foolms/{{programs}}/02",
									"protocol": "https",
									"host": [
										"lms-api-hackathon-june2023-930a8b0f895d",
										"herokuapp",
										"com"
									],
									"path": [
										"foolms",
										"{{programs}}",
										"02"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET one ProgramId-Non Existing Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4aff30d1-de9c-480b-b56a-8f87ba0a0fbf",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c9b9a908-0946-4823-8b19-3e3cdc67204b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/programs/;",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"programs",
										";"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET one ProgramId-without End Points",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79cf4b5c-1659-4eec-9d5b-d1f0487bb3ec",
										"exec": [
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f9ad1d74-a512-47ae-8d56-a4282dec9ba1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{programs}}/",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{programs}}",
										""
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET one ProgramId-Invalid Program ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "39bb58c7-4e70-43a4-be46-5db514fce437",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"\r",
											"       \"programId\": {\r",
											"      \"type\": \"integer\" \r",
											"      },\r",
											"        \"programName\": {\r",
											"            \"type\": \"string\"\r",
											"        },    \r",
											"        \"programDescription\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"programStatus\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"       \r",
											"    },\r",
											"    \"required\" :[\r",
											"        \"programId\",\r",
											"        \"programName\",\r",
											"        \"programDescription\",\r",
											"        \"programStatus\",\r",
											"       \r",
											"    ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"    //using tv4 validatroty library and validate method\r",
											"    pm.expect(tv4.validate(jsonResponse[0],schema)).to.be.true\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "657e1831-f7d9-4fa9-a363-66940ef0b0c2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{programs}}/null",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{programs}}",
										"null"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET one ProgramId-Invalid Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5d73d70e-ca00-45b6-bfb2-37f3d5ebc86e",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,405);\r",
											"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"\r",
											"       \"programId\": {\r",
											"      \"type\": \"integer\" \r",
											"      },\r",
											"    \r",
											"     \"programDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"     \"programName\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"creationTime\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"     \"lastModTime\": {\r",
											"      \"type\": \"integer\"\r",
											"    }\r",
											"  \r",
											"  },\r",
											"  \"required\": [\r",
											"     \"programId\",\r",
											"     \"programName\",\r",
											"     \"programDescription\",\r",
											"     \"programStatus\",\r",
											"     \"creationTime\",\r",
											"     \"lastModTime\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "fdb88d0d-985c-4a88-b63e-8ae7dc82f3c3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{programs}}/02",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{programs}}",
										"02"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "5e7c524d-ee5d-40ec-8b39-c86b949fc1bc"
				},
				{
					"name": "PUT Program(update by ProgramName)",
					"item": [
						{
							"name": "PUT Program(UpdateByProgramName)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ada6c9f-ef37-46b8-b585-64ec2ed15acd",
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate Response body\r",
											"    pm.test(\"Validate Response body\", function() {\r",
											"         \r",
											"        pm.expect(jsonResponse.programId, pm.environment.get(\"programId\"));\r",
											"        pm.expect(jsonResponse. programName,pm.environment.get (\"programName\"));\r",
											"        pm.expect(jsonResponse.programDescription,pm.environment.get(\"programDescription\"));\r",
											"        pm.expect(jsonResponse.programStatus, pm.environment.get(\"programStatus\"));\r",
											"        pm.expect(jsonResponse.creationTime, pm.environment.get(\"creationTime\"));\r",
											"        pm.expect(jsonResponse.lastModTime, pm.environment.get(\"lastModTime\"));\r",
											"        \r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =  \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"   \r",
											"    \"programId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"programDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"programStatus\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"creationTime\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"lastModTime\": {\r",
											"      \"type\":  \"integer\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"     \"programId\",\r",
											"     \"programName\",\r",
											"     \"programDescription\",\r",
											"     \"programStatus\",\r",
											"     \"creationTime\",\r",
											"     \"lastModTime\",\r",
											"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"    \r",
											"\r",
											"\r",
											"    \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ca48cc0f-40c5-4788-99f0-ad13d05b509e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"Selenium\",\r\n  \"programName\": \"Jun23-PostWomenTechies-SDET-0102\",\r\n  \"programStatus\": \"Active\"\r\n}\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{program}}/Jun23-PostWomenTechies-SDET-0101",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{program}}",
										"Jun23-PostWomenTechies-SDET-0101"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-102",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT Program(UpdateByProgramName)-Non Valid Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5d9bad0b-cc7c-4b7f-8003-b7e014b3c96d",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "372ba042-0c31-4a96-94dc-acecd37fe66a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"Selenium\",\r\n  \"programName\": \"Jun23-PostWomenTechies-SDET-0001\",\r\n  \"programStatus\": \"Active\"\r\n}\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{program}}/;",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{program}}",
										";"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-102",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT Program(UpdateByProgramName)-Without Request Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "44e41c01-99d5-4151-9bf4-3f6426ab1889",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"\r",
											"       \"programId\": {\r",
											"      \"type\": \"integer\" \r",
											"      },\r",
											"        \"programName\": {\r",
											"            \"type\": \"string\"\r",
											"        },    \r",
											"        \"programDescription\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"programStatus\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"       \r",
											"    },\r",
											"    \"required\" :[\r",
											"        \"programId\",\r",
											"        \"programName\",\r",
											"        \"programDescription\",\r",
											"        \"programStatus\",\r",
											"       \r",
											"    ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"    //using tv4 validatroty library and validate method\r",
											"    pm.expect(tv4.validate(jsonResponse[0],schema)).to.be.true\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f1284b7b-8bc5-41d5-b5f0-16a0540e7b06",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{program}}/Jun23-PostWomenTechies-SDET-0002",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{program}}",
										"Jun23-PostWomenTechies-SDET-0002"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-102",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT Program(UpdateByProgramName)-External File",
							"id": "416732d3-d27c-4203-b5f6-e7293520ce28",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseURL}}/{{program}}/Jun23-PostWomenTechies-SDET-0001",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{program}}",
										"Jun23-PostWomenTechies-SDET-0001"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-102",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT Program(UpdateByProgramName)-ProgramName Null",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "80d8267b-6476-4420-b73a-cb6992be9c19",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "9d5d6656-de8d-4169-b648-18089e3cf6cd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"Selenium\",\r\n  \"programName\": null,\r\n  \"programStatus\": \"Active\"\r\n}\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{program}}/Jun23-PostWomenTechies-SDET-0001",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{program}}",
										"Jun23-PostWomenTechies-SDET-0001"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-102",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT Program(UpdatebyProgramName)-DataDrivenTesting-csvfile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "98d0694f-50dd-4ab4-938d-7afcb691de37",
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate Response body\r",
											"    pm.test(\"Validate Response body\", function() {\r",
											"         \r",
											"        pm.expect(jsonResponse.programId, pm.environment.get(\"programId\"));\r",
											"        pm.expect(jsonResponse. programName,pm.environment.get (\"programName\"));\r",
											"        pm.expect(jsonResponse.programDescription,pm.environment.get(\"programDescription\"));\r",
											"        pm.expect(jsonResponse.programStatus, pm.environment.get(\"programStatus\"));\r",
											"        pm.expect(jsonResponse.creationTime, pm.environment.get(\"creationTime\"));\r",
											"        pm.expect(jsonResponse.lastModTime, pm.environment.get(\"lastModTime\"));\r",
											"        \r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =  \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"   \r",
											"    \"programId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"programDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"programStatus\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"creationTime\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"lastModTime\": {\r",
											"      \"type\":  \"integer\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"     \"programId\",\r",
											"     \"programName\",\r",
											"     \"programDescription\",\r",
											"     \"programStatus\",\r",
											"     \"creationTime\",\r",
											"     \"lastModTime\",\r",
											"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"    \r",
											"\r",
											"\r",
											"    \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "83906328-1c4a-4c87-a83f-01c1fbe5538f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"{{Selenium}}\",\r\n  \"programName\": \"{{Jun23-PostWomenTechies-SDET-0102}}\",\r\n  \"programStatus\":\"{{Active}}\"\r\n}\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{program}}/\"Jun23-PostWomenTechies-SDET-0102\"",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{program}}",
										"\"Jun23-PostWomenTechies-SDET-0102\""
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-102",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT Program(UpdateByProgramName)-Without Program Desription",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d6c14d3f-b150-496c-a3be-678bcc55a5e5",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e95dfa0f-2194-4626-b320-aa9cef34622e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"\",\r\n  \"programName\": \"Jun23-PostWomenTechies-SDET-0002\",\r\n  \"programStatus\": \"Active\"\r\n}\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{program}}/Jun23-PostWomenTechies-SDET-0001",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{program}}",
										"Jun23-PostWomenTechies-SDET-0001"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-102",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT Program(UpdateByProgramName)-Program Status Null",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "835300d2-1b1d-4aa4-bf7f-cff7275d5f59",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f6032e0f-570a-44b6-911f-b740c6fb2ca6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"Selenium\",\r\n  \"programName\": \"Jun23-PostWomenTechies-SDET-0002\",\r\n  \"programStatus\": null\r\n}\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{program}}/Jun23-PostWomenTechies-SDET-0001",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{program}}",
										"Jun23-PostWomenTechies-SDET-0001"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-102",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT Program(UpdateByProgramName)-json Schema",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d96e7e2-2522-4248-9210-1bd234279e52",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \r",
											"   \r",
											"        \"programName\": {\r",
											"            \"type\": \"string\"\r",
											"        },    \r",
											"        \"programDescription\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"programStatus\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"       \r",
											"    },\r",
											"    \"required\" :[\r",
											"        \r",
											"        \"programName\",\r",
											"        \"programDescription\",\r",
											"        \"programStatus\",\r",
											"       \r",
											"    ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "35da0e46-59ce-4361-b9cc-df4d53ba27cd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"Selenium\",\r\n  \"programNamee\": \"Jun23-PostWomenTechies-SDET-0002\",\r\n  \"programStatus\": \"Active\"\r\n}\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{program}}/Jun23-PostWomenTechies-SDET-0001",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{program}}",
										"Jun23-PostWomenTechies-SDET-0001"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-102",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "e9d9a11c-3545-4139-a341-d4b31a789a25"
				},
				{
					"name": "PUT Program(Update by ProgramID)",
					"item": [
						{
							"name": "PUT Program(UpdateByProgramId)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2aa15af0-6a19-40ae-9ac0-3909f053284a",
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate Response body\r",
											"    pm.test(\"Validate Response body\", function() {\r",
											"         \r",
											"        pm.expect(jsonResponse.programId, pm.environment.get(\"programId\"));\r",
											"        pm.expect(jsonResponse. programName,pm.environment.get (\"programName\"));\r",
											"        pm.expect(jsonResponse.programDescription,pm.environment.get(\"programDescription\"));\r",
											"        pm.expect(jsonResponse.programStatus, pm.environment.get(\"programStatus\"));\r",
											"        pm.expect(jsonResponse.creationTime, pm.environment.get(\"creationTime\"));\r",
											"        pm.expect(jsonResponse.lastModTime, pm.environment.get(\"lastModTime\"));\r",
											"        \r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =  \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"   \r",
											"    \"programId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"programDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"programStatus\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"creationTime\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"lastModTime\": {\r",
											"      \"type\":  \"integer\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"     \"programId\",\r",
											"     \"programName\",\r",
											"     \"programDescription\",\r",
											"     \"programStatus\",\r",
											"     \"creationTime\",\r",
											"     \"lastModTime\",\r",
											"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"    \r",
											"\r",
											"\r",
											"    \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7b495df4-c994-4dad-8eec-f138dff84efd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"Selenium\",\r\n  \"programId\": 2199,\r\n  \"programName\": \"Jun23-PostWomenTechies-SDET-0001\",\r\n  \"programStatus\": \"Active\"\r\n}\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{putprogram}}/2299",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{putprogram}}",
										"2299"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT Program(UpdateByProgramId)-Without Request Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3f3a3a5c-4c54-4b66-afad-7ba0bbf05516",
										"exec": [
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 415\", function () {\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Unsupported Media Type\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,415);\r",
											"    pm.expect(jsonResponse.error,\"Unsupported Media Type\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"\r",
											"       \"programId\": {\r",
											"      \"type\": \"integer\" \r",
											"      },\r",
											"        \"programName\": {\r",
											"            \"type\": \"string\"\r",
											"        },    \r",
											"        \"programDescription\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"programStatus\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"       \r",
											"    },\r",
											"    \"required\" :[\r",
											"        \"programId\",\r",
											"        \"programName\",\r",
											"        \"programDescription\",\r",
											"        \"programStatus\",\r",
											"       \r",
											"    ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"    //using tv4 validatroty library and validate method\r",
											"    pm.expect(tv4.validate(jsonResponse[0],schema)).to.be.true\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ff6a16b3-86e0-479d-92a1-779a3d091b27",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{putprogram}}/2299",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{putprogram}}",
										"2299"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT Program(UpdateByProgramId)-Program Name Null",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bd7fc01e-e18d-42f0-a8f7-3eda7885cd8c",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "221029bd-a305-481b-ae8f-70446860a70a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"Selenium\",\r\n  \"programId\": 2299,\r\n  \"programName\": null,\r\n  \"programStatus\": \"Active\"\r\n}\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/putprogram/2298",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"putprogram",
										"2298"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT Program(UpdateByProgramId)-Non Existing Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3118e0c1-294f-4224-bedb-afbcf0b9fa27",
										"exec": [
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"\r",
											"       \"programId\": {\r",
											"      \"type\": \"integer\" \r",
											"      },\r",
											"        \"programName\": {\r",
											"            \"type\": \"string\"\r",
											"        },    \r",
											"        \"programDescription\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"programStatus\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"       \r",
											"    },\r",
											"    \"required\" :[\r",
											"        \"programId\",\r",
											"        \"programName\",\r",
											"        \"programDescription\",\r",
											"        \"programStatus\",\r",
											"       \r",
											"    ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"    //using tv4 validatroty library and validate method\r",
											"    pm.expect(tv4.validate(jsonResponse[0],schema)).to.be.true\r",
											"})\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e21e64cf-cf1f-4386-a7f1-95b0497bf57f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"Selenium\",\r\n  \"programId\": *&,\r\n  \"programName\": \"Jun23-PostWomenTechies-SDET-0001\",\r\n  \"programStatus\": \"Active\"\r\n}\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{putprogram}}/2298",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{putprogram}}",
										"2298"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT Program(UpdateByProgramId)-Existing Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "48ce0ad1-3acd-4895-8c53-16a77db60b60",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "425511a7-bfa1-4bfd-8528-37591c8158f5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"{{Selenium}}\",\r\n  \"programId\": {{2299}},\r\n  \"programName\": \"{{Jun23-PostWomenTechies-SDET-0001}}\",\r\n  \"programStatus\": \"{{Active}}\"\r\n}\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}{{putprogram}}/717",
									"host": [
										"{{baseURL}}{{putprogram}}"
									],
									"path": [
										"717"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT Program(UpdateByProgramId)-DataDrivenTesting-csvfile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "82a74c82-4f02-4ab6-b16e-c6735e41f206",
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate Response body\r",
											"    pm.test(\"Validate Response body\", function() {\r",
											"         \r",
											"        pm.expect(jsonResponse.programId, pm.environment.get(\"programId\"));\r",
											"        pm.expect(jsonResponse. programName,pm.environment.get (\"programName\"));\r",
											"        pm.expect(jsonResponse.programDescription,pm.environment.get(\"programDescription\"));\r",
											"        pm.expect(jsonResponse.programStatus, pm.environment.get(\"programStatus\"));\r",
											"        pm.expect(jsonResponse.creationTime, pm.environment.get(\"creationTime\"));\r",
											"        pm.expect(jsonResponse.lastModTime, pm.environment.get(\"lastModTime\"));\r",
											"        \r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =  \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"   \r",
											"    \"programId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"programDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"programStatus\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"creationTime\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"lastModTime\": {\r",
											"      \"type\":  \"integer\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"     \"programId\",\r",
											"     \"programName\",\r",
											"     \"programDescription\",\r",
											"     \"programStatus\",\r",
											"     \"creationTime\",\r",
											"     \"lastModTime\",\r",
											"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"    \r",
											"\r",
											"\r",
											"    \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "73f9aa5f-b0a0-4327-af61-fbcb0d9f253e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"Selenium\",\r\n  \"programId\": 2299,\r\n  \"programName\": \"Jun23-PostWomenTechies-SDET-0001\",\r\n  \"programStatus\": \"Active\"\r\n}\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{putprogram}}/2298",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{putprogram}}",
										"2298"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT Program(UpdateByProgramId)-Invalid json Schema",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9bbffc1d-9a14-4164-b65e-cda1fa44cd80",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \r",
											"   \r",
											"        \"programName\": {\r",
											"            \"type\": \"string\"\r",
											"        },    \r",
											"        \"programDescription\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"programStatus\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"       \r",
											"    },\r",
											"    \"required\" :[\r",
											"        \r",
											"        \"programName\",\r",
											"        \"programDescription\",\r",
											"        \"programStatus\",\r",
											"       \r",
											"    ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c2054128-bfee-491d-9633-7323a7d0d9d5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"Selenium\",\r\n  \"programId\": 2299,\r\n  \"programNamee\": \"Jun23-PostWomenTechies-SDET-0001\",\r\n  \"programStatus\": \"Active\"\r\n}\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{putprogram}}/2298",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{putprogram}}",
										"2298"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT Program(UpdateByProgramId)-Status Null",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f0ebb75-e25c-4cf6-b690-4a6715dae579",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e20a3705-6dba-45fe-8bd6-1d47ad8d045d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"Selenium\",\r\n  \"programId\": 2199,\r\n  \"programName\": \"Jun23-PostWomenTechies-SDET-0001\",\r\n  \"programStatus\": null\r\n}\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{putprogram}}/2299",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{putprogram}}",
										"2299"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT Program(UpdateByProgramId)-Description Null",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "348f05b7-5d95-4641-b24a-39a7853cbc91",
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate Response body\r",
											"    pm.test(\"Validate Response body\", function() {\r",
											"         \r",
											"        pm.expect(jsonResponse.programId, pm.environment.get(\"programId\"));\r",
											"        pm.expect(jsonResponse. programName,pm.environment.get (\"programName\"));\r",
											"        pm.expect(jsonResponse.programDescription,pm.environment.get(\"programDescription\"));\r",
											"        pm.expect(jsonResponse.programStatus, pm.environment.get(\"programStatus\"));\r",
											"        pm.expect(jsonResponse.creationTime, pm.environment.get(\"creationTime\"));\r",
											"        pm.expect(jsonResponse.lastModTime, pm.environment.get(\"lastModTime\"));\r",
											"        \r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =  \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"   \r",
											"    \"programId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"programDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"programStatus\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"creationTime\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"lastModTime\": {\r",
											"      \"type\":  \"integer\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"     \"programId\",\r",
											"     \"programName\",\r",
											"     \"programDescription\",\r",
											"     \"programStatus\",\r",
											"     \"creationTime\",\r",
											"     \"lastModTime\",\r",
											"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"    \r",
											"\r",
											"\r",
											"    \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ef42797e-1fac-4a0e-aee4-0a116c41f08d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": null,\r\n  \"programId\": 2299,\r\n  \"programName\": \"Jun23-PostWomenTechies-SDET-0001\",\r\n  \"programStatus\": \"Active\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{putprogram}}/2298",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{putprogram}}",
										"2298"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "483b31a6-e1bb-4bd7-a232-4cf5e41e9d8d"
				},
				{
					"name": "DELETE by ProgramID",
					"item": [
						{
							"name": "DELETE by Valid End points",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e98b988f-98f3-49fa-bbfc-3e9e7d542afb",
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate Response body\r",
											"    pm.test(\"Validate Response body\", function() {\r",
											"         \r",
											"        pm.expect(jsonResponse.programId, pm.environment.get(\"programId\"));\r",
											"        pm.expect(jsonResponse. programName,pm.environment.get (\"programName\"));\r",
											"        pm.expect(jsonResponse.programDescription,pm.environment.get(\"programDescription\"));\r",
											"        pm.expect(jsonResponse.programStatus, pm.environment.get(\"programStatus\"));\r",
											"        pm.expect(jsonResponse.creationTime, pm.environment.get(\"creationTime\"));\r",
											"        pm.expect(jsonResponse.lastModTime, pm.environment.get(\"lastModTime\"));\r",
											"        \r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =  \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"   \r",
											"    \"programId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"programDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"programStatus\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"creationTime\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"lastModTime\": {\r",
											"      \"type\":  \"integer\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"     \"programId\",\r",
											"     \"programName\",\r",
											"     \"programDescription\",\r",
											"     \"programStatus\",\r",
											"     \"creationTime\",\r",
											"     \"lastModTime\",\r",
											"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"    \r",
											"\r",
											"\r",
											"    \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "df0c6767-5ecf-4c46-b8a9-fbdcb008c26b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{deletebyprogid}}/{programId}?programId",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{deletebyprogid}}",
										"{programId}"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										},
										{
											"key": "programId",
											"value": null,
											"type": "text"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE by ProgramId-Non Existing program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "91ef25a1-b5c0-4b2c-a2ab-0ad41cc0c2d1",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"\r",
											"        \r",
											"        \"programName\": {\r",
											"            \"type\": \"string\"\r",
											"        },    \r",
											"        \"programDescription\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"programStatus\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"       \r",
											"    },\r",
											"    \"required\" :[\r",
											"        \r",
											"        \"programName\",\r",
											"        \"programDescription\",\r",
											"        \"programStatus\",\r",
											"       \r",
											"    ]\r",
											"}\r",
											"\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"    //using tv4 validatroty library and validate method\r",
											"    pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "491937da-1607-41cb-a19d-604a78bda24d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n    \"programId\": 2307,\r\n    \"programName\": \"Jun23-PostWomenTechies-SDET-0002\",\r\n    \"programDescription\": \"selenium\",\r\n    \"programStatus\": \"Active\",\r\n    \"creationTime\": \"2023-06-25T07:14:26.017+00:00\",\r\n    \"lastModTime\": \"2023-06-25T07:14:26.017+00:00\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{deletebyprogid}}/{programId}?ProgramID=11",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{deletebyprogid}}",
										"{programId}"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										},
										{
											"key": "ProgramID",
											"value": "11"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE by ProgramId-Already deleted program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a740d3e4-1d9e-45b6-9e60-5676c9260a6c",
										"exec": [
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"\r",
											"        \r",
											"        \"programName\": {\r",
											"            \"type\": \"string\"\r",
											"        },    \r",
											"        \"programDescription\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"programStatus\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"       \r",
											"    },\r",
											"    \"required\" :[\r",
											"        \r",
											"        \"programName\",\r",
											"        \"programDescription\",\r",
											"        \"programStatus\",\r",
											"       \r",
											"    ]\r",
											"}\r",
											"\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"    //using tv4 validatroty library and validate method\r",
											"    pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											"})\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7bb26180-3df6-44de-873f-1bacc1f4088f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{deletebyprogid}}/programName?programID",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{deletebyprogid}}",
										"programName"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										},
										{
											"key": "programID",
											"value": null,
											"type": "text"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE by ProgramId-Without Program ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9c30772d-bcb7-45a5-84ca-97ba616bd212",
										"exec": [
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"\r",
											"        \r",
											"        \"programName\": {\r",
											"            \"type\": \"string\"\r",
											"        },    \r",
											"        \"programDescription\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"programStatus\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"       \r",
											"    },\r",
											"    \"required\" :[\r",
											"        \r",
											"        \"programName\",\r",
											"        \"programDescription\",\r",
											"        \"programStatus\",\r",
											"       \r",
											"    ]\r",
											"}\r",
											"\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"    //using tv4 validatroty library and validate method\r",
											"    pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											"})\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7dc52323-ba1f-41f5-bfca-5747a2c3bcae",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{deletebyprogid}}/",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{deletebyprogid}}",
										""
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE by ProgramId-Invalid Program ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2f72a567-188f-48ce-ab78-672c745a35de",
										"exec": [
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"\r",
											"        \r",
											"        \"programName\": {\r",
											"            \"type\": \"string\"\r",
											"        },    \r",
											"        \"programDescription\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"programStatus\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"       \r",
											"    },\r",
											"    \"required\" :[\r",
											"        \r",
											"        \"programName\",\r",
											"        \"programDescription\",\r",
											"        \"programStatus\",\r",
											"       \r",
											"    ]\r",
											"}\r",
											"\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"    //using tv4 validatroty library and validate method\r",
											"    pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											"})\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2a28ea99-f61d-4701-bc69-aa18a11fd4d1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}} /{{deletebyprogid}}/#",
									"host": [
										"{{baseURL}} "
									],
									"path": [
										"{{deletebyprogid}}",
										""
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									],
									"hash": ""
								}
							},
							"response": []
						},
						{
							"name": "DELETE by ProgramId-DataDrivenTesting",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9089987f-721c-4155-b736-f77c9d710ede",
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate Response body\r",
											"    pm.test(\"Validate Response body\", function() {\r",
											"         \r",
											"        pm.expect(jsonResponse.programId, pm.environment.get(\"programId\"));\r",
											"        pm.expect(jsonResponse. programName,pm.environment.get (\"programName\"));\r",
											"        pm.expect(jsonResponse.programDescription,pm.environment.get(\"programDescription\"));\r",
											"        pm.expect(jsonResponse.programStatus, pm.environment.get(\"programStatus\"));\r",
											"        pm.expect(jsonResponse.creationTime, pm.environment.get(\"creationTime\"));\r",
											"        pm.expect(jsonResponse.lastModTime, pm.environment.get(\"lastModTime\"));\r",
											"        \r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =  \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"   \r",
											"    \"programId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"programDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"programStatus\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"creationTime\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"lastModTime\": {\r",
											"      \"type\":  \"integer\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"     \"programId\",\r",
											"     \"programName\",\r",
											"     \"programDescription\",\r",
											"     \"programStatus\",\r",
											"     \"creationTime\",\r",
											"     \"lastModTime\",\r",
											"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"    \r",
											"\r",
											"\r",
											"    \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "53bce845-5877-4fa4-9b8a-c851531f3efb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}} /{{deletebyprogid}}/{programId}?ProgramID=11",
									"host": [
										"{{baseURL}} "
									],
									"path": [
										"{{deletebyprogid}}",
										"{programId}"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										},
										{
											"key": "ProgramID",
											"value": "11"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE by ProgramId-Invalid Request",
							"id": "f633cda3-e7d9-4310-b3e1-1d7e006de03a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{deletebyprogid}}/1122",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{deletebyprogid}}",
										"1122"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE by ProgramId-Invalid End point",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03275308-0ab5-4875-ab07-e5121a483861",
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate Response body\r",
											"    pm.test(\"Validate Response body\", function() {\r",
											"         \r",
											"        pm.expect(jsonResponse.programId, pm.environment.get(\"programId\"));\r",
											"        pm.expect(jsonResponse. programName,pm.environment.get (\"programName\"));\r",
											"        pm.expect(jsonResponse.programDescription,pm.environment.get(\"programDescription\"));\r",
											"        pm.expect(jsonResponse.programStatus, pm.environment.get(\"programStatus\"));\r",
											"        pm.expect(jsonResponse.creationTime, pm.environment.get(\"creationTime\"));\r",
											"        pm.expect(jsonResponse.lastModTime, pm.environment.get(\"lastModTime\"));\r",
											"        \r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =  \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"   \r",
											"    \"programId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"programDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"programStatus\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"creationTime\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"lastModTime\": {\r",
											"      \"type\":  \"integer\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"     \"programId\",\r",
											"     \"programName\",\r",
											"     \"programDescription\",\r",
											"     \"programStatus\",\r",
											"     \"creationTime\",\r",
											"     \"lastModTime\",\r",
											"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"    \r",
											"\r",
											"\r",
											"    \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c051f0c1-2254-4b8f-86e8-68f500d623f3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}} /{{deletebyprogid}}/1122",
									"host": [
										"{{baseURL}} "
									],
									"path": [
										"{{deletebyprogid}}",
										"1122"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE by ProgramId-Invalid Base Url",
							"id": "33af7f6c-581d-4eea-b29c-e2f9d2754b67",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/foo lms/ /{{deletebyprogid}}/1122",
									"protocol": "https",
									"host": [
										"lms-api-hackathon-june2023-930a8b0f895d",
										"herokuapp",
										"com"
									],
									"path": [
										"foo lms",
										" ",
										"{{deletebyprogid}}",
										"1122"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "872fff57-11c6-42cd-8f66-23952fa9b82c"
				},
				{
					"name": "DELETE by ProgramName",
					"item": [
						{
							"name": "DELETE by ProgramName",
							"id": "5241058a-1610-429d-b155-86455320754e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/deletebyprogname/{programName}?programName=Jun23-PostWomenTechies-SDET-0101",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"deletebyprogname",
										"{programName}"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										},
										{
											"key": "programName",
											"value": "Jun23-PostWomenTechies-SDET-0101",
											"type": "text"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE by ProgramName_Non Existing Program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "402c04bf-0573-438a-a7a2-b8a0b26322f0",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"\r",
											"        \r",
											"        \"programName\": {\r",
											"            \"type\": \"string\"\r",
											"        },    \r",
											"        \"programDescription\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"programStatus\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"       \r",
											"    },\r",
											"    \"required\" :[\r",
											"        \r",
											"        \"programName\",\r",
											"        \"programDescription\",\r",
											"        \"programStatus\",\r",
											"       \r",
											"    ]\r",
											"}\r",
											"\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"    //using tv4 validatroty library and validate method\r",
											"    pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "839e1dd0-551a-458c-8506-17188fde5feb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/deletebyprogname/{programName}?programName=%23",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"deletebyprogname",
										"{programName}"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										},
										{
											"key": "programName",
											"value": "#"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE by ProgramName_Already deleted progam",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "93ec2fa9-58fa-4ea1-b7ab-cd4c95237c74",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"\r",
											"        \r",
											"        \"programName\": {\r",
											"            \"type\": \"string\"\r",
											"        },    \r",
											"        \"programDescription\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"programStatus\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"       \r",
											"    },\r",
											"    \"required\" :[\r",
											"        \r",
											"        \"programName\",\r",
											"        \"programDescription\",\r",
											"        \"programStatus\",\r",
											"       \r",
											"    ]\r",
											"}\r",
											"\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"    //using tv4 validatroty library and validate method\r",
											"    pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "96b179fb-cbe9-4961-946c-d3d9dd196da0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/deletebyprogname/{programName}?programName=Jun23-PostWomenTechies-SDET-0101",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"deletebyprogname",
										"{programName}"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										},
										{
											"key": "programName",
											"value": "Jun23-PostWomenTechies-SDET-0101"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE by ProgramName_wothout program name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "657bffb7-c670-4eca-9203-eefb99beeaa1",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"\r",
											"        \r",
											"        \"programName\": {\r",
											"            \"type\": \"string\"\r",
											"        },    \r",
											"        \"programDescription\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"programStatus\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"       \r",
											"    },\r",
											"    \"required\" :[\r",
											"        \r",
											"        \"programName\",\r",
											"        \"programDescription\",\r",
											"        \"programStatus\",\r",
											"       \r",
											"    ]\r",
											"}\r",
											"\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"    //using tv4 validatroty library and validate method\r",
											"    pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2ddc255b-0c6f-49b0-96c4-333b5c015cd1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/deletebyprogname/{programName}?programName=",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"deletebyprogname",
										"{programName}"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										},
										{
											"key": "programName",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE by ProgramName_Invalid Program name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "479914d3-bf96-4dc4-abc9-c72868623c57",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"\r",
											"        \r",
											"        \"programName\": {\r",
											"            \"type\": \"string\"\r",
											"        },    \r",
											"        \"programDescription\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"programStatus\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"       \r",
											"    },\r",
											"    \"required\" :[\r",
											"        \r",
											"        \"programName\",\r",
											"        \"programDescription\",\r",
											"        \"programStatus\",\r",
											"       \r",
											"    ]\r",
											"}\r",
											"\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"    //using tv4 validatroty library and validate method\r",
											"    pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2652738e-3302-4198-9a37-2ca5872b1e20",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/deletebyprogname/{programName}?programName=%23",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"deletebyprogname",
										"{programName}"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										},
										{
											"key": "programName",
											"value": "%23"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE by ProgramName_DataDriven_file",
							"id": "ff225c1d-1805-4290-b0a2-cf55d22b4e41",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/deletebyprogname/{programName}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"deletebyprogname",
										"{programName}"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										},
										{
											"key": "programName",
											"value": "Jun23-PostWomenTechies-SDET-0101",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE by ProgramName_Invalid endpoint",
							"id": "1a079962-2ad6-4b0a-b9fa-23ff53108927",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/deletebyprogname/{programName}?programName=Jun23-PostWomenTechies-SDET-0101",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"deletebyprogname",
										"{programName}"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										},
										{
											"key": "programName",
											"value": "Jun23-PostWomenTechies-SDET-0101",
											"type": "text"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE by ProgramName_Invalid endpoint Copy",
							"id": "399e17e7-2f8c-48c0-9011-7a40e9fe7db4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/deletebyprogname/{programName}?programName=Jun23-PostWomenTechies-SDET-0101",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"deletebyprogname",
										"{programName}"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										},
										{
											"key": "programName",
											"value": "Jun23-PostWomenTechies-SDET-0101",
											"type": "text"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE by ProgramName_invalid BaseUrl",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "08dad21e-90a3-486d-95a6-73829934b149",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"\r",
											"        \r",
											"        \"programName\": {\r",
											"            \"type\": \"string\"\r",
											"        },    \r",
											"        \"programDescription\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"programStatus\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"       \r",
											"    },\r",
											"    \"required\" :[\r",
											"        \r",
											"        \"programName\",\r",
											"        \"programDescription\",\r",
											"        \"programStatus\",\r",
											"       \r",
											"    ]\r",
											"}\r",
											"\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"    //using tv4 validatroty library and validate method\r",
											"    pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "cf1c7d8d-316d-428f-a542-4954768f7bf3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lmsfoo/deletebyprogname/{programName}",
									"protocol": "https",
									"host": [
										"lms-api-hackathon-june2023-930a8b0f895d",
										"herokuapp",
										"com"
									],
									"path": [
										"lmsfoo",
										"deletebyprogname",
										"{programName}"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										},
										{
											"key": "programName",
											"value": "Jun23-PostWomenTechies-SDET-0101",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE by Program Name_Invalid Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bbefa5f9-5780-4009-a327-cb5d3c5551eb",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,405);\r",
											"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"\r",
											"       \"programId\": {\r",
											"      \"type\": \"integer\" \r",
											"      },\r",
											"    \r",
											"     \"programDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"     \"programName\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"creationTime\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"     \"lastModTime\": {\r",
											"      \"type\": \"integer\"\r",
											"    }\r",
											"  \r",
											"  },\r",
											"  \"required\": [\r",
											"     \"programId\",\r",
											"     \"programName\",\r",
											"     \"programDescription\",\r",
											"     \"programStatus\",\r",
											"     \"creationTime\",\r",
											"     \"lastModTime\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c8d922eb-2be8-4397-8f53-a28c13d3979d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n    \"programId\": ,\r\n    \"programName\": \"Jun23-PostWomenTechies-SDET0002\",\r\n    \"programDescription\": \"selenium\",\r\n    \"programStatus\": \"Active\",\r\n    \"creationTime\": \"2023-06-25T07:14:26.017+00:00\",\r\n    \"lastModTime\": \"2023-06-25T07:14:26.017+00:00\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/deletebyprogname/{programName}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"deletebyprogname",
										"{programName}"
									],
									"query": [
										{
											"key": "programName",
											"value": "Jun23-PostWomen Techies-SDET-101",
											"type": "text",
											"disabled": true
										},
										{
											"key": " programStatus",
											"value": "Active",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "477c7f8b-23b8-4f76-97c1-f81dfb383546"
				}
			],
			"id": "9f0d88c2-1094-400b-9b0a-14e0155ebeec"
		},
		{
			"name": "Program_Batch_Module",
			"item": [
				{
					"name": "GET Batch",
					"item": [
						{
							"name": "GET ALL Batches",
							"item": [
								{
									"name": "Program_Batch_TC_001_Valid_Endpoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5db72dad-9395-4a43-8a16-e534a5e8ebf8",
												"exec": [
													"//validate status code\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate Response body\r",
													"    pm.test(\"Validate Response body\", function() {\r",
													"         \r",
													"        pm.expect(jsonResponse.batchId, pm.environment.get(\"batchId\"));\r",
													"        pm.expect(jsonResponse.batchName,pm.environment.get(\"batchName\"));\r",
													"        pm.expect(jsonResponse.batchStatus,pm.environment.get(\"batchStatus\"));\r",
													"        pm.expect(jsonResponse.batchDescription, pm.environment.get(\"batchDescription\"));\r",
													"        pm.expect(jsonResponse.batchNoOfClasses, pm.environment.get(\"batchNoOfClasses\"));\r",
													"        pm.expect(jsonResponse.programId, pm.environment.get(\"programId\"));\r",
													"        pm.expect(jsonResponse.programName,pm.environment.get(\"programName\"));\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =  \r",
													" {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"batchId\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"batchName\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"batchDescription\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"batchStatus\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"batchNoOfClasses\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"programId\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"programName\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"batchId\",\r",
													"    \"batchName\",\r",
													"    \"batchDescription\",\r",
													"    \"batchStatus\",\r",
													"    \"batchNoOfClasses\",\r",
													"    \"programId\",\r",
													"    \"programName\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse[0],schema)).to.be.true\r",
													" })\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "55579412-90f0-41e3-b4af-152b89e7891d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/{{getAllBatches}}"
									},
									"response": [
										{
											"id": "056de03b-3b51-46ae-9519-4adb4216c80b",
											"name": "Program_Batch_TC_001_Valid_Endpoint",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseURL}}/{{getAllBatches}}"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Sun, 25 Jun 2023 11:23:40 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "[\n    {\n        \"batchId\": 128,\n        \"batchName\": \"1\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"string\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 53,\n        \"batchName\": \"101\",\n        \"batchDescription\": \"SQL BATCH 198\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 87,\n        \"batchName\": \"105\",\n        \"batchDescription\": \"SQL BATCH 199\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 138,\n        \"batchName\": \"108\",\n        \"batchDescription\": \"SQL\\ufffdBATCH\\ufffd199\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 139,\n        \"batchName\": \"109\",\n        \"batchDescription\": \"SQL\\ufffdBATCH\\ufffd200\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 140,\n        \"batchName\": \"110\",\n        \"batchDescription\": \"Selenium Batch 100\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 141,\n        \"batchName\": \"111\",\n        \"batchDescription\": \"SQL\\ufffdBATCH\\ufffd199\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 142,\n        \"batchName\": \"112\",\n        \"batchDescription\": \"SQL\\ufffdBATCH\\ufffd200\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 143,\n        \"batchName\": \"113\",\n        \"batchDescription\": \"Selenium Batch 100\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 146,\n        \"batchName\": \"114\",\n        \"batchDescription\": \"SQL\\ufffdBATCH\\ufffd199\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 147,\n        \"batchName\": \"115\",\n        \"batchDescription\": \"SQL\\ufffdBATCH\\ufffd200\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 148,\n        \"batchName\": \"116\",\n        \"batchDescription\": \"Selenium Batch 100\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 480,\n        \"batchName\": \"123\",\n        \"batchDescription\": \"Test Batch description\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 24,\n        \"programName\": \"APITesting7\"\n    },\n    {\n        \"batchId\": 772,\n        \"batchName\": \"125\",\n        \"batchDescription\": \"DA Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 1035,\n        \"programName\": \"Jun23-API Warriers-DA-Team9\"\n    },\n    {\n        \"batchId\": 330,\n        \"batchName\": \"4\",\n        \"batchDescription\": \"Test001\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 1367,\n        \"programName\": \"something003\"\n    },\n    {\n        \"batchId\": 149,\n        \"batchName\": \"52\",\n        \"batchDescription\": \"Selenium\",\n        \"batchStatus\": \"Not Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 661,\n        \"programName\": \"Sdet2\"\n    },\n    {\n        \"batchId\": 355,\n        \"batchName\": \"7\",\n        \"batchDescription\": \"Test001\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 1566,\n        \"programName\": \"something004\"\n    },\n    {\n        \"batchId\": 303,\n        \"batchName\": \"--750\",\n        \"batchDescription\": \"Batch SDET01 under program\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 1350,\n        \"programName\": \"UpdatedJun23-PostmanAcers-SDET-750\"\n    },\n    {\n        \"batchId\": 119,\n        \"batchName\": \"999\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"999\",\n        \"batchNoOfClasses\": 9,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 869,\n        \"batchName\": \"Adolph\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 842,\n        \"batchName\": \"Alia\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 843,\n        \"batchName\": \"Amaya\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 845,\n        \"batchName\": \"Andrew\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 206,\n        \"batchName\": \"API Hackathon\",\n        \"batchDescription\": null,\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 204,\n        \"batchName\": \"API Hackathon\",\n        \"batchDescription\": null,\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 205,\n        \"batchName\": \"API Hackathon\",\n        \"batchDescription\": null,\n        \"batchStatus\": \"string\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 209,\n        \"batchName\": \"API Hackathon1\",\n        \"batchDescription\": null,\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 38,\n        \"batchName\": \"API HACKATHON 2024\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"PASS\",\n        \"batchNoOfClasses\": 15,\n        \"programId\": 101,\n        \"programName\": \"Jun23-Hackers@API-Postman-05\"\n    },\n    {\n        \"batchId\": 99,\n        \"batchName\": \"API HACKATHON 2025\",\n        \"batchDescription\": \"API testing\",\n        \"batchStatus\": \"PASS\",\n        \"batchNoOfClasses\": 15,\n        \"programId\": 101,\n        \"programName\": \"Jun23-Hackers@API-Postman-05\"\n    },\n    {\n        \"batchId\": 197,\n        \"batchName\": \"asd \",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"string\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 49,\n        \"batchName\": \"batch-*****\",\n        \"batchDescription\": \"batch-*****\",\n        \"batchStatus\": \"batch-status2\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 54,\n        \"batchName\": \"Batch01\",\n        \"batchDescription\": \"API01\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 23,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 56,\n        \"batchName\": \"Batch02\",\n        \"batchDescription\": \"API1\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 223,\n        \"programName\": \" Jun23-PostmanPioneers-SDET-055 \"\n    },\n    {\n        \"batchId\": 55,\n        \"batchName\": \"Batch02\",\n        \"batchDescription\": \"API1\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 22,\n        \"programName\": \"Jun23-Postman Ninjas-SDET-NaN\"\n    },\n    {\n        \"batchId\": 353,\n        \"batchName\": \"batch1\",\n        \"batchDescription\": \"senior\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 100,\n        \"batchName\": \"{{BatchName}}\",\n        \"batchDescription\": \"fourth_batch\",\n        \"batchStatus\": \"pass\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 507,\n        \"batchName\": \"{{batchNameFormatted}}\",\n        \"batchDescription\": \"Selenium ,java,postman\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 527,\n        \"programId\": 1782,\n        \"programName\": \"Jun23-Postman Poineers-SDET-813\"\n    },\n    {\n        \"batchId\": 482,\n        \"batchName\": \"{{batchNameFormatted}}\",\n        \"batchDescription\": \"Selenium ,java,postman\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 337,\n        \"programId\": 1765,\n        \"programName\": \"Jun23-Postman Poineers-SDET-950\"\n    },\n    {\n        \"batchId\": 493,\n        \"batchName\": \"{{batchNameFormatted}}\",\n        \"batchDescription\": \"Selenium ,java,postman\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 302,\n        \"programId\": 1781,\n        \"programName\": \"Jun23-Postman Poineers-SDET-837\"\n    },\n    {\n        \"batchId\": 475,\n        \"batchName\": \"{{batchNameFormatted}}\",\n        \"batchDescription\": \"Selenium ,java,postman\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 70,\n        \"programId\": 1743,\n        \"programName\": \"Jun23-Postman Poineers-SDET-824\"\n    },\n    {\n        \"batchId\": 490,\n        \"batchName\": \"{{batchNameFormatted}}\",\n        \"batchDescription\": \"Selenium ,java,postman\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 174,\n        \"programId\": 1780,\n        \"programName\": \"Jun23-Postman Poineers-SDET-683\"\n    },\n    {\n        \"batchId\": 489,\n        \"batchName\": \"{{batchNameFormatted}}\",\n        \"batchDescription\": \"Selenium ,java,postman\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 76,\n        \"programId\": 1779,\n        \"programName\": \"Jun23-Postman Poineers-SDET-891\"\n    },\n    {\n        \"batchId\": 461,\n        \"batchName\": \"{{batchNameFormatted}}\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"string\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 1728,\n        \"programName\": \"Jun23-Postman Poineers-SDET-280\"\n    },\n    {\n        \"batchId\": 464,\n        \"batchName\": \"{{batchNameFormatted}}\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"string\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1735,\n        \"programName\": \"Jun23-Postman Poineers-SDET-388\"\n    },\n    {\n        \"batchId\": 50,\n        \"batchName\": \"batchNew\",\n        \"batchDescription\": \"batchNew\",\n        \"batchStatus\": \"batch-status2\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 52,\n        \"batchName\": \"batchNew2\",\n        \"batchDescription\": \"batchNew\",\n        \"batchStatus\": \"batch-status2\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 57,\n        \"batchName\": \"batchNewest\",\n        \"batchDescription\": \"batchNewest\",\n        \"batchStatus\": \"batch-status2\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 200,\n        \"programName\": \"Learn API\"\n    },\n    {\n        \"batchId\": 102,\n        \"batchName\": \"Batchupdate\",\n        \"batchDescription\": \"API4\",\n        \"batchStatus\": \"Active state\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 223,\n        \"programName\": \" Jun23-PostmanPioneers-SDET-055 \"\n    },\n    {\n        \"batchId\": 856,\n        \"batchName\": \"Bradley\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 850,\n        \"batchName\": \"Cara\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 221,\n        \"batchName\": \"CHECKING\",\n        \"batchDescription\": \"API-41\",\n        \"batchStatus\": \"ACTIVE\",\n        \"batchNoOfClasses\": 67,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 617,\n        \"batchName\": \"Clotilde\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 286,\n        \"batchName\": \"da\",\n        \"batchDescription\": \"nothing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 13,\n        \"programId\": 888,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-123\"\n    },\n    {\n        \"batchId\": 289,\n        \"batchName\": \"da\",\n        \"batchDescription\": \"nothing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 13,\n        \"programId\": 644,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-94197978\"\n    },\n    {\n        \"batchId\": 226,\n        \"batchName\": \"DA\",\n        \"batchDescription\": \"Data Analyst\",\n        \"batchStatus\": \"Running\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 284,\n        \"batchName\": \"DA\",\n        \"batchDescription\": \"DA Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 327,\n        \"batchName\": \"Ds\",\n        \"batchDescription\": \"Data Scientist\",\n        \"batchStatus\": \"Running\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 329,\n        \"batchName\": \"DS\",\n        \"batchDescription\": \"Data Science\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 22,\n        \"programId\": 111,\n        \"programName\": \"Jun23-Hackers@API-Postman-102\"\n    },\n    {\n        \"batchId\": 870,\n        \"batchName\": \"Haley\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 391,\n        \"batchName\": \"HugsForBugs\",\n        \"batchDescription\": \"BATCH19\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 846,\n        \"batchName\": \"Jon\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 744,\n        \"batchName\": \"Jun23-\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 311,\n        \"batchName\": \"Jun23-APIc Scripters-DA-25-006\",\n        \"batchDescription\": \"Learn Analysis\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 23,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 314,\n        \"batchName\": \"Jun23-APIc Scripters-DA-27-008\",\n        \"batchDescription\": \"Learn Analysis\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 1362,\n        \"programName\": \"Jun23-APIc Scripters-SDET5DA1-388\"\n    },\n    {\n        \"batchId\": 324,\n        \"batchName\": \"Jun23-APIc Scripters-DA-29-010\",\n        \"batchDescription\": \"Learn Analysis\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 1362,\n        \"programName\": \"Jun23-APIc Scripters-SDET5DA1-388\"\n    },\n    {\n        \"batchId\": 310,\n        \"batchName\": \"Jun23-APIc Scripters-SDET-24-005\",\n        \"batchDescription\": \"Learn Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 313,\n        \"batchName\": \"Jun23-APIc Scripters-SDET-26-007\",\n        \"batchDescription\": \"Learn Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 1362,\n        \"programName\": \"Jun23-APIc Scripters-SDET5DA1-388\"\n    },\n    {\n        \"batchId\": 323,\n        \"batchName\": \"Jun23-APIc Scripters-SDET-28-009\",\n        \"batchDescription\": \"Learn Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 1362,\n        \"programName\": \"Jun23-APIc Scripters-SDET5DA1-388\"\n    },\n    {\n        \"batchId\": 328,\n        \"batchName\": \"Jun23-APIc Scripters-SDET-30-011\",\n        \"batchDescription\": \"Learn Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 1362,\n        \"programName\": \"Jun23-APIc Scripters-SDET5DA1-388\"\n    },\n    {\n        \"batchId\": 616,\n        \"batchName\": \"Jun23-ApiExpliorers-SDET-205\",\n        \"batchDescription\": \"PostmanApi\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 22,\n        \"programName\": \"Jun23-Postman Ninjas-SDET-NaN\"\n    },\n    {\n        \"batchId\": 626,\n        \"batchName\": \"Jun23-ApiExplorers-SDET-205\",\n        \"batchDescription\": \"PostmanApi\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 8,\n        \"programId\": 23,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 619,\n        \"batchName\": \"Jun23-ApiExplorers-SDET-205\",\n        \"batchDescription\": \"PostmanApi\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 22,\n        \"programName\": \"Jun23-Postman Ninjas-SDET-NaN\"\n    },\n    {\n        \"batchId\": 383,\n        \"batchName\": \"Jun23-Api Explorers-sdetpostman-01\",\n        \"batchDescription\": \"Api Testing using Postman\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 243,\n        \"programId\": 101,\n        \"programName\": \"Jun23-Hackers@API-Postman-05\"\n    },\n    {\n        \"batchId\": 384,\n        \"batchName\": \"Jun23-Api Explorers-sdetpostman-01\",\n        \"batchDescription\": \"Api Testing using Postman\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 243,\n        \"programId\": 103,\n        \"programName\": \"Jun23-Hackers@API-Postman-07\"\n    },\n    {\n        \"batchId\": 756,\n        \"batchName\": \"Jun23-API-hackathon-SDET103-207\",\n        \"batchDescription\": \"Giving Marvelous SDET training at Numpy\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 2173,\n        \"programName\": \"Jun23-API Tracker-SDET-805\"\n    },\n    {\n        \"batchId\": 732,\n        \"batchName\": \"Jun23-API-hackathon-SDET103-497\",\n        \"batchDescription\": \"Giving Marvelous SDET traing at Numpy\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 2173,\n        \"programName\": \"Jun23-API Tracker-SDET-805\"\n    },\n    {\n        \"batchId\": 733,\n        \"batchName\": \"Jun23-API-hackathon-SDET103-618\",\n        \"batchDescription\": \"Giving Marvelous SDET traing at Numpy\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 2173,\n        \"programName\": \"Jun23-API Tracker-SDET-805\"\n    },\n    {\n        \"batchId\": 743,\n        \"batchName\": \"Jun23-API-hackathon-SDET103-806\",\n        \"batchDescription\": \"Giving Marvelous SDET traing at Numpy\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 2173,\n        \"programName\": \"Jun23-API Tracker-SDET-805\"\n    },\n    {\n        \"batchId\": 242,\n        \"batchName\": \"Jun23-API Hackers-DA-Team07-00762544\",\n        \"batchDescription\": \"Tableau62544\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 8,\n        \"programId\": 29,\n        \"programName\": \"{{programName}}\"\n    },\n    {\n        \"batchId\": 245,\n        \"batchName\": \"Jun23-API Hackers-DA-Team07-00762789\",\n        \"batchDescription\": \"Tableau62789\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 8,\n        \"programId\": 29,\n        \"programName\": \"{{programName}}\"\n    },\n    {\n        \"batchId\": 386,\n        \"batchName\": \"Jun23-API Hackers-DA-Team07-00769309\",\n        \"batchDescription\": \"Tableau69309\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 8,\n        \"programId\": 29,\n        \"programName\": \"{{programName}}\"\n    },\n    {\n        \"batchId\": 253,\n        \"batchName\": \"Jun23-API Hackers-DA-Team07-00784548\",\n        \"batchDescription\": \"Tableau84548\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 8,\n        \"programId\": 29,\n        \"programName\": \"{{programName}}\"\n    },\n    {\n        \"batchId\": 792,\n        \"batchName\": \"Jun23-API Hackers-DA-Team07-007-PUT update490\",\n        \"batchDescription\": \"Tableau-PUT update\",\n        \"batchStatus\": \"4\",\n        \"batchNoOfClasses\": 8,\n        \"programId\": 29,\n        \"programName\": \"{{programName}}\"\n    },\n    {\n        \"batchId\": 784,\n        \"batchName\": \"Jun23-API Hackers-DA-Team07-007-PUT update9698\",\n        \"batchDescription\": \"Tableau-PUT update\",\n        \"batchStatus\": \"4\",\n        \"batchNoOfClasses\": 8,\n        \"programId\": 29,\n        \"programName\": \"{{programName}}\"\n    },\n    {\n        \"batchId\": 241,\n        \"batchName\": \"Jun23-API Hackers-SDET-Team07-00711864\",\n        \"batchDescription\": \"java programming11864\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 717,\n        \"programName\": \"{{programName}}\"\n    },\n    {\n        \"batchId\": 252,\n        \"batchName\": \"Jun23-API Hackers-SDET-Team07-00713063\",\n        \"batchDescription\": \"java programming13063\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 717,\n        \"programName\": \"{{programName}}\"\n    },\n    {\n        \"batchId\": 385,\n        \"batchName\": \"Jun23-API Hackers-SDET-Team07-00714364\",\n        \"batchDescription\": \"java programming14364\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 717,\n        \"programName\": \"{{programName}}\"\n    },\n    {\n        \"batchId\": 244,\n        \"batchName\": \"Jun23-API Hackers-SDET-Team07-00722659\",\n        \"batchDescription\": \"java programming22659\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 717,\n        \"programName\": \"{{programName}}\"\n    },\n    {\n        \"batchId\": 240,\n        \"batchName\": \"Jun23-API Hackers-SDET-Team07-00725879\",\n        \"batchDescription\": \"java programming25879\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 717,\n        \"programName\": \"{{programName}}\"\n    },\n    {\n        \"batchId\": 239,\n        \"batchName\": \"Jun23-API Hackers-SDET-Team07-00783952\",\n        \"batchDescription\": \"java programming83952\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 717,\n        \"programName\": \"{{programName}}\"\n    },\n    {\n        \"batchId\": 782,\n        \"batchName\": \"Jun23-API Hackers-SDET-Team07-007-PUT update4332\",\n        \"batchDescription\": \"java programming-PUT update\",\n        \"batchStatus\": \"4\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 717,\n        \"programName\": \"{{programName}}\"\n    },\n    {\n        \"batchId\": 790,\n        \"batchName\": \"Jun23-API Hackers-SDET-Team07-007-PUT update7607\",\n        \"batchDescription\": \"java programming-PUT update\",\n        \"batchStatus\": \"4\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 717,\n        \"programName\": \"{{programName}}\"\n    },\n    {\n        \"batchId\": 387,\n        \"batchName\": \"Jun23-API Hackers-SF-Team07-0073054\",\n        \"batchDescription\": \"Salesforce3054\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 738,\n        \"programName\": \"Jun23-PostmanNinjas-SDET-511\"\n    },\n    {\n        \"batchId\": 243,\n        \"batchName\": \"Jun23-API Hackers-SF-Team07-00793384\",\n        \"batchDescription\": \"Salesforce93384\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 738,\n        \"programName\": \"Jun23-PostmanNinjas-SDET-511\"\n    },\n    {\n        \"batchId\": 786,\n        \"batchName\": \"Jun23-API Hackers-SF-Team07-007-PUT update132\",\n        \"batchDescription\": \"Salesforce-PUT update\",\n        \"batchStatus\": \"4\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 738,\n        \"programName\": \"Jun23-PostmanNinjas-SDET-511\"\n    },\n    {\n        \"batchId\": 794,\n        \"batchName\": \"Jun23-API Hackers-SF-Team07-007-PUT update3708\",\n        \"batchDescription\": \"Salesforce-PUT update\",\n        \"batchStatus\": \"4\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 738,\n        \"programName\": \"Jun23-PostmanNinjas-SDET-511\"\n    },\n    {\n        \"batchId\": 295,\n        \"batchName\": \"Jun23-ApiPixies--SDET-001\",\n        \"batchDescription\": \"Automation Testing Batch\",\n        \"batchStatus\": \"Ongoing\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 296,\n        \"batchName\": \"Jun23-ApiPixies-SDET-001\",\n        \"batchDescription\": \"Automation Testing Batch\",\n        \"batchStatus\": \"Ongoing\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 307,\n        \"batchName\": \"Jun23-ApiPixies-SDET-002\",\n        \"batchDescription\": \"Automation Testing Batch\",\n        \"batchStatus\": \"Ongoing\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 30,\n        \"batchName\": \"Jun23-API_PIXIES-SDET-SDET94-002\",\n        \"batchDescription\": \"batchstringg\",\n        \"batchStatus\": \"string\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 835,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-158\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 834,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-168\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 233,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-269\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 828,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-282\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 837,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-303\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 853,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-440\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 833,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-489\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 836,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-496\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 838,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-53\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 232,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-619\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 831,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-662\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 234,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-723\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 830,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-791\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 855,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-906\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 829,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-961\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 854,\n        \"batchName\": \"Jun23-APISlogger-SalesForce-98\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 840,\n        \"batchName\": \"Jun23-ApiSloggers-sql1-149\",\n        \"batchDescription\": \"SalesForce\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1005,\n        \"programName\": \"Jun23-ApiSloggers-sql1-149\"\n    },\n    {\n        \"batchId\": 523,\n        \"batchName\": \"Jun23-API Warriers-DA-DA001-605\",\n        \"batchDescription\": \"DA Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 1035,\n        \"programName\": \"Jun23-API Warriers-DA-Team9\"\n    },\n    {\n        \"batchId\": 518,\n        \"batchName\": \"Jun23-API Warriers-DA-DA01-226\",\n        \"batchDescription\": \"DA classes New Batches\",\n        \"batchStatus\": \"Inactive\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1035,\n        \"programName\": \"Jun23-API Warriers-DA-Team9\"\n    },\n    {\n        \"batchId\": 530,\n        \"batchName\": \"Jun23-API Warriers-ManualTesting-MT001-846\",\n        \"batchDescription\": \"Manual Testing Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 25,\n        \"programId\": 1042,\n        \"programName\": \"Jun23-API Warriers-Manual Testing-Team9\"\n    },\n    {\n        \"batchId\": 531,\n        \"batchName\": \"Jun23-API Warriers-ManualTesting-MT001-914\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 18,\n        \"programId\": 1037,\n        \"programName\": \"Jun23-API Warriers-SMPO-Team9\"\n    },\n    {\n        \"batchId\": 529,\n        \"batchName\": \"Jun23-API Warriers-SA-SA001-280\",\n        \"batchDescription\": \"Salesforce Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 30,\n        \"programId\": 1036,\n        \"programName\": \"Jun23-API Warriers-SalesForce-Team9\"\n    },\n    {\n        \"batchId\": 528,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET001-14\",\n        \"batchDescription\": \"SDET Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 15,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 409,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-114\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1035,\n        \"programName\": \"Jun23-API Warriers-DA-Team9\"\n    },\n    {\n        \"batchId\": 491,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-129\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 471,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-148\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 503,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-181\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1037,\n        \"programName\": \"Jun23-API Warriers-SMPO-Team9\"\n    },\n    {\n        \"batchId\": 504,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-196\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 509,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-216\",\n        \"batchDescription\": \"Salesforce Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1036,\n        \"programName\": \"Jun23-API Warriers-SalesForce-Team9\"\n    },\n    {\n        \"batchId\": 512,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-26\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 492,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-27\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 468,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-270\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 419,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-276\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1035,\n        \"programName\": \"Jun23-API Warriers-DA-Team9\"\n    },\n    {\n        \"batchId\": 470,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-386\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 455,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-402\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 438,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-467\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 469,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-487\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 405,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-516\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1037,\n        \"programName\": \"Jun23-API Warriers-SMPO-Team9\"\n    },\n    {\n        \"batchId\": 426,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-529\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1036,\n        \"programName\": \"Jun23-API Warriers-SalesForce-Team9\"\n    },\n    {\n        \"batchId\": 408,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-575\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1037,\n        \"programName\": \"Jun23-API Warriers-SMPO-Team9\"\n    },\n    {\n        \"batchId\": 505,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-615\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1037,\n        \"programName\": \"Jun23-API Warriers-SMPO-Team9\"\n    },\n    {\n        \"batchId\": 513,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-633\",\n        \"batchDescription\": \"DA Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1035,\n        \"programName\": \"Jun23-API Warriers-DA-Team9\"\n    },\n    {\n        \"batchId\": 511,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-640\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1066,\n        \"programName\": \"Jun23-SparkPlugs-SDET-362 \"\n    },\n    {\n        \"batchId\": 497,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-649\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 510,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-665\",\n        \"batchDescription\": \"Manual Testing Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1042,\n        \"programName\": \"Jun23-API Warriers-Manual Testing-Team9\"\n    },\n    {\n        \"batchId\": 334,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-69\",\n        \"batchDescription\": \"sdet classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 394,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-746\",\n        \"batchDescription\": \"Not SDET\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1037,\n        \"programName\": \"Jun23-API Warriers-SMPO-Team9\"\n    },\n    {\n        \"batchId\": 460,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-770\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 494,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-815\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 454,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-825\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 448,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-827\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 433,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-874\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 335,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-909\",\n        \"batchDescription\": \"sdet classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 457,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-912\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 447,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-928\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 508,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-971\",\n        \"batchDescription\": \"SDET Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 406,\n        \"batchName\": \"Jun23-API Warriers-SDET-SDET01-993\",\n        \"batchDescription\": \"{{Dynamic Batchdesc}}\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 1037,\n        \"programName\": \"Jun23-API Warriers-SMPO-Team9\"\n    },\n    {\n        \"batchId\": 627,\n        \"batchName\": \"Jun23-API Warriers-SMPO-SMPO001-174\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 18,\n        \"programId\": 1037,\n        \"programName\": \"Jun23-API Warriers-SMPO-Team9\"\n    },\n    {\n        \"batchId\": 532,\n        \"batchName\": \"Jun23-API Warriers-SMPO-SMPO001-181\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 18,\n        \"programId\": 1037,\n        \"programName\": \"Jun23-API Warriers-SMPO-Team9\"\n    },\n    {\n        \"batchId\": 809,\n        \"batchName\": \"Jun23-API Warriers-SMPO-SMPO001-46\",\n        \"batchDescription\": \" \",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 1035,\n        \"programName\": \"Jun23-API Warriers-DA-Team9\"\n    },\n    {\n        \"batchId\": 648,\n        \"batchName\": \"Jun23-API Warriers-SMPO-SMPO001-468\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 18,\n        \"programId\": 1037,\n        \"programName\": \"Jun23-API Warriers-SMPO-Team9\"\n    },\n    {\n        \"batchId\": 687,\n        \"batchName\": \"Jun23-API Warriers-SMPO-SMPO001-542\",\n        \"batchDescription\": \"SDET Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 15,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 630,\n        \"batchName\": \"Jun23-API Warriers-SMPO-SMPO001-64\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 18,\n        \"programId\": 1037,\n        \"programName\": \"Jun23-API Warriers-SMPO-Team9\"\n    },\n    {\n        \"batchId\": 727,\n        \"batchName\": \"Jun23-API Warriers-SMPO-SMPO001-662\",\n        \"batchDescription\": \"DA Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 1035,\n        \"programName\": \"Jun23-API Warriers-DA-Team9\"\n    },\n    {\n        \"batchId\": 789,\n        \"batchName\": \"Jun23-API Warriers-SMPO-SMPO001-750\",\n        \"batchDescription\": \"DA Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 67,\n        \"programId\": 1035,\n        \"programName\": \"Jun23-API Warriers-DA-Team9\"\n    },\n    {\n        \"batchId\": 538,\n        \"batchName\": \"Jun23-API Warriers-SMPO-SMPO001-751\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 18,\n        \"programId\": 1037,\n        \"programName\": \"Jun23-API Warriers-SMPO-Team9\"\n    },\n    {\n        \"batchId\": 773,\n        \"batchName\": \"Jun23-API Warriers-SMPO-SMPO001-800\",\n        \"batchDescription\": \"DA Classes\",\n        \"batchStatus\": \"123\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 1035,\n        \"programName\": \"Jun23-API Warriers-DA-Team9\"\n    },\n    {\n        \"batchId\": 632,\n        \"batchName\": \"Jun23-API Warriers-SMPO-SMPO001-838\",\n        \"batchDescription\": \"SMPO Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 18,\n        \"programId\": 1037,\n        \"programName\": \"Jun23-API Warriers-SMPO-Team9\"\n    },\n    {\n        \"batchId\": 633,\n        \"batchName\": \"Jun23-API Warriers-SMPO-SMPO001-942\",\n        \"batchDescription\": \"SDET Classes\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 15,\n        \"programId\": 1027,\n        \"programName\": \"Jun23-API Warriers-SDET-Team9\"\n    },\n    {\n        \"batchId\": 799,\n        \"batchName\": \"Jun23-API Warriers-SMPO-SMPO001-949\",\n        \"batchDescription\": null,\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 1035,\n        \"programName\": \"Jun23-API Warriers-DA-Team9\"\n    },\n    {\n        \"batchId\": 297,\n        \"batchName\": \"Jun23-EliteForce-DA-DA\",\n        \"batchDescription\": \"DA Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 1237,\n        \"programName\": \"Jun23-EliteForce-DA-001\"\n    },\n    {\n        \"batchId\": 304,\n        \"batchName\": \"Jun23-EliteForce-SDET-SDET\",\n        \"batchDescription\": \"SDET Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1352,\n        \"programName\": \"Jun23-EliteForce-SDET-001\"\n    },\n    {\n        \"batchId\": 565,\n        \"batchName\": \"Jun23-EliteForce-SDET-SDET655-655\",\n        \"batchDescription\": \"9zm3n2novy\",\n        \"batchStatus\": \"Ongoing\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 736,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-{{$}}\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 735,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-{{$random}}\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 734,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-{{$randomint}}\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 346,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-{{$randomint}}\",\n        \"batchDescription\": \"Sam\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 555,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-104\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 533,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-111\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 520,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-140\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 719,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-145\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 584,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-150\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 649,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-153\",\n        \"batchDescription\": \"Manual Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 868,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-28075770\"\n    },\n    {\n        \"batchId\": 699,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-167\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 825,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-187\",\n        \"batchDescription\": null,\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 752,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-190\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 527,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-196\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 688,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-197\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 677,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-199\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 600,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-2\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 536,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-206\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 681,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-21\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 625,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-212\",\n        \"batchDescription\": \"Manual Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 868,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-28075770\"\n    },\n    {\n        \"batchId\": 624,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-223\",\n        \"batchDescription\": \"Manual Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 868,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-28075770\"\n    },\n    {\n        \"batchId\": 613,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-228\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 748,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-231\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 541,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-233\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 594,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-235\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 602,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-24\",\n        \"batchDescription\": \"Junit testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 8,\n        \"programId\": 866,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 755,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-240\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 680,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-248\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 581,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-250\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 693,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-273\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 757,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-293\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"1\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 611,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-294\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 658,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-302\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 868,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-28075770\"\n    },\n    {\n        \"batchId\": 745,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-303\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 506,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-313\",\n        \"batchDescription\": \"\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 668,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-323\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 672,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-33\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 678,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-332\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 603,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-337\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 711,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-341\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 689,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-353\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 707,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-355\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 598,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-358\",\n        \"batchDescription\": \"Junit testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 8,\n        \"programId\": 866,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 599,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-367\",\n        \"batchDescription\": \"Soap UI testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 9,\n        \"programId\": 867,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-48299936\"\n    },\n    {\n        \"batchId\": 724,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-370\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 701,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-371\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 682,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-385\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 709,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-392\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 522,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-394\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 535,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-4\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 621,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-410\",\n        \"batchDescription\": \"Soap UI testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 9,\n        \"programId\": 867,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-48299936\"\n    },\n    {\n        \"batchId\": 545,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-416\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 706,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-417\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 501,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-424\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 614,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-43\",\n        \"batchDescription\": \"Soap UI testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 9,\n        \"programId\": 867,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-48299936\"\n    },\n    {\n        \"batchId\": 728,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-430\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 690,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-431\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 606,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-436\",\n        \"batchDescription\": \"Junit testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 8,\n        \"programId\": 866,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 499,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-444\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 578,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-445\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 746,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-445\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 657,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-467\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 868,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-28075770\"\n    },\n    {\n        \"batchId\": 749,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-473\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 675,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-479\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 601,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-486\",\n        \"batchDescription\": \"Manual Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 868,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-28075770\"\n    },\n    {\n        \"batchId\": 670,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-491\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 673,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-497\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 550,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-498\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 716,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-499\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 685,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-503\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 694,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-508\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 659,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-509\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 702,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-510\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 710,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-511\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 661,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-518\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 713,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-52\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 695,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-53\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 622,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-533\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 722,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-540\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 597,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-551\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 636,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-551\",\n        \"batchDescription\": \"Manual Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 868,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-28075770\"\n    },\n    {\n        \"batchId\": 666,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-553\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 546,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-561\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 663,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-571\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 496,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-577\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 679,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-582\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 676,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-583\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 595,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-588\",\n        \"batchDescription\": \"Junit testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 8,\n        \"programId\": 866,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 623,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-591\",\n        \"batchDescription\": \"Junit testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 8,\n        \"programId\": 866,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 686,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-593\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 660,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-606\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 747,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-608\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 592,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-610\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 867,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-48299936\"\n    },\n    {\n        \"batchId\": 726,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-616\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 750,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-628\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 586,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-629\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 721,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-648\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 495,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-651\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 604,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-652\",\n        \"batchDescription\": \"Soap UI testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 9,\n        \"programId\": 867,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-48299936\"\n    },\n    {\n        \"batchId\": 654,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-653\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 868,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-28075770\"\n    },\n    {\n        \"batchId\": 717,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-655\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 665,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-656\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 767,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-659\",\n        \"batchDescription\": \"\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 700,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-660\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 544,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-675\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 348,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-68\",\n        \"batchDescription\": \"Sam\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 534,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-681\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 669,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-684\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 583,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-690\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 514,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-693\",\n        \"batchDescription\": \"\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 615,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-698\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 588,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-716\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 753,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-72\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 667,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-736\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 524,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-746\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 696,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-76\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 715,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-760\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 664,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-768\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 662,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-779\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 684,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-784\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 612,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-786\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 543,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-787\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 607,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-79\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 723,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-797\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 585,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-799\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 683,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-80\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 653,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-802\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 868,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-28075770\"\n    },\n    {\n        \"batchId\": 620,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-803\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 609,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-814\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 714,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-825\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 519,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-825\",\n        \"batchDescription\": \"\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 692,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-830\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 498,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-830\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 771,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-831\",\n        \"batchDescription\": null,\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 718,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-835\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 596,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-854\",\n        \"batchDescription\": \"Junit testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 8,\n        \"programId\": 866,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 655,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-861\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 868,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-28075770\"\n    },\n    {\n        \"batchId\": 751,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-862\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 712,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-873\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 863,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-88666483\"\n    },\n    {\n        \"batchId\": 608,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-876\",\n        \"batchDescription\": \"Soap UI testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 9,\n        \"programId\": 867,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-48299936\"\n    },\n    {\n        \"batchId\": 708,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-883\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 656,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-887\",\n        \"batchDescription\": \"Beginners Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 868,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-28075770\"\n    },\n    {\n        \"batchId\": 766,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-89\",\n        \"batchDescription\": null,\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 691,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-890\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 593,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-894\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 866,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 725,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-895\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 671,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-913\",\n        \"batchDescription\": \"Cucumber testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 865,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-29647853\"\n    },\n    {\n        \"batchId\": 754,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-919\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 540,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-924\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 589,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-931\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 868,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-28075770\"\n    },\n    {\n        \"batchId\": 548,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-94\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 634,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-942\",\n        \"batchDescription\": \"Manual Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 868,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-28075770\"\n    },\n    {\n        \"batchId\": 605,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-953\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 582,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-969\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 587,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-97\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 610,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-974\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 580,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-982\",\n        \"batchDescription\": \"Advanced Level API Testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 720,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-984\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 537,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-985\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 862,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-84523547\"\n    },\n    {\n        \"batchId\": 674,\n        \"batchName\": \"Jun23-Hackers@API-API-Hackathon-API01-999\",\n        \"batchDescription\": \"Enterprise testing\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 864,\n        \"programName\": \"Jun23-Hackers@API-API-Hackathon-UpdatedName\"\n    },\n    {\n        \"batchId\": 98,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET02-\",\n        \"batchDescription\": \"second_batch\",\n        \"batchStatus\": \"inactive\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 371,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-113\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 104,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-120\",\n        \"batchDescription\": \"six_batch\",\n        \"batchStatus\": \"failed\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 372,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-138\",\n        \"batchDescription\": \"six_batch\",\n        \"batchStatus\": \"failed\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 404,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-167\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 442,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-175\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1681,\n        \"programName\": \"Jun23-HugsForBugs-SDET-788\"\n    },\n    {\n        \"batchId\": 443,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-175\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 437,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-239\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 393,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-245\",\n        \"batchDescription\": \"six_batch\",\n        \"batchStatus\": \"failed\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 397,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-324\",\n        \"batchDescription\": \"six_batch\",\n        \"batchStatus\": \"failed\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 103,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-334\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 551,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-516\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1865,\n        \"programName\": \"Jun23-HugsForBugs-SDET-489\"\n    },\n    {\n        \"batchId\": 413,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-620\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 424,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-663\",\n        \"batchDescription\": \"six_batch\",\n        \"batchStatus\": \"failed\",\n        \"batchNoOfClasses\": 6,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 392,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-67\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 396,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-673\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 398,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-683\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 430,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-715\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 425,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-756\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 120,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-769\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 399,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-811\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 445,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-888\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1682,\n        \"programName\": \"Jun23-HugsForBugs-SDET-833\"\n    },\n    {\n        \"batchId\": 423,\n        \"batchName\": \"Jun23-HugsForBugs-SDET-SDET94-961\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 13,\n        \"batchName\": \"Jun23-LightningAPIHackers-SDET102-13\",\n        \"batchDescription\": \"bDesc2\",\n        \"batchStatus\": \"bSt2\",\n        \"batchNoOfClasses\": 13,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 16,\n        \"batchName\": \"Jun23-LightningAPIHackers-SDET102-16\",\n        \"batchDescription\": \"bDesc3\",\n        \"batchStatus\": \"bSt3\",\n        \"batchNoOfClasses\": 16,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 17,\n        \"batchName\": \"Jun23-LightningAPIHackers-SDET102-17\",\n        \"batchDescription\": \"bDesc3\",\n        \"batchStatus\": \"bSt3\",\n        \"batchNoOfClasses\": 17,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 19,\n        \"batchName\": \"Jun23-LightningAPIHackers-SDET102-19\",\n        \"batchDescription\": \"bDesc1\",\n        \"batchStatus\": \"bSt1\",\n        \"batchNoOfClasses\": 19,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 572,\n        \"batchName\": \"Jun23-LightningAPIHackers-SDET102-7\",\n        \"batchDescription\": \"Evening\",\n        \"batchStatus\": \"In progress\",\n        \"batchNoOfClasses\": 7,\n        \"programId\": 357,\n        \"programName\": \"Jun23-LightningAPIHackers-SDET-003\"\n    },\n    {\n        \"batchId\": 8,\n        \"batchName\": \"Jun23-LightningAPIHackers-SDET102-8\",\n        \"batchDescription\": \"Weekend\",\n        \"batchStatus\": \"Lighening Speed\",\n        \"batchNoOfClasses\": 8,\n        \"programId\": 1111,\n        \"programName\": \"Jun23-Postman Poineers-SDET-397\"\n    },\n    {\n        \"batchId\": 465,\n        \"batchName\": \"Jun23-LightningAPIHackers-SDET102-{{counter}}\",\n        \"batchDescription\": \"Evening\",\n        \"batchStatus\": \"In progress\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 357,\n        \"programName\": \"Jun23-LightningAPIHackers-SDET-003\"\n    },\n    {\n        \"batchId\": 542,\n        \"batchName\": \"Jun23-LightningAPIHackers-SDET102-UpdatedName\",\n        \"batchDescription\": \"changed batch description\",\n        \"batchStatus\": \"changed batch status\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 662,\n        \"programName\": \"Jun23-Lightning API Hackers-SDET-null\"\n    },\n    {\n        \"batchId\": 9,\n        \"batchName\": \"Jun23-LightningAPIHackers-SDET-9\",\n        \"batchDescription\": \"trialBatch\",\n        \"batchStatus\": \"batch-status2\",\n        \"batchNoOfClasses\": 9,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 651,\n        \"batchName\": \"Jun23-NinjaGeeks-SDET-POSTMAN-12\",\n        \"batchDescription\": \"POSTMAN Learning 479\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 621,\n        \"programId\": 1485,\n        \"programName\": \"Jun23-API Trackers-SDET-698\"\n    },\n    {\n        \"batchId\": 650,\n        \"batchName\": \"Jun23-NinjaGeeks-SDET-POSTMAN-491\",\n        \"batchDescription\": \"POSTMAN Learning 959\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 437,\n        \"programId\": 1485,\n        \"programName\": \"Jun23-API Trackers-SDET-698\"\n    },\n    {\n        \"batchId\": 762,\n        \"batchName\": \"Jun23-PostmanAcers-DA-012-SDET01-001\",\n        \"batchDescription\": \"DA Batch DA01\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 2206,\n        \"programName\": \"Jun23-PostmanAcers-DA-012\"\n    },\n    {\n        \"batchId\": 305,\n        \"batchName\": \"Jun23-PostmanAcers-DA-100--001\",\n        \"batchDescription\": \"SDET Second Batch SDET02\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 1350,\n        \"programName\": \"UpdatedJun23-PostmanAcers-SDET-750\"\n    },\n    {\n        \"batchId\": 84,\n        \"batchName\": \"Jun23-PostmanAcers-DA-100-SDET01-\",\n        \"batchDescription\": \"SDET Second Batch SDET02\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 301,\n        \"programName\": \"Jun23-PostmanAcers-SDET-300\"\n    },\n    {\n        \"batchId\": 61,\n        \"batchName\": \"Jun23-PostmanAcers-DA-DA01-200\",\n        \"batchDescription\": \"DA First Batch DA01\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 261,\n        \"programName\": \"Jun23-PostmanAcers-DA-200\"\n    },\n    {\n        \"batchId\": 73,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-100-SDET01-\",\n        \"batchDescription\": \"SDET First Batch SDET01\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 315,\n        \"programName\": \"Updated_Jun23-PostmanAcers-SDET-500\"\n    },\n    {\n        \"batchId\": 89,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-100-SDET01-001\",\n        \"batchDescription\": \"SDET First Batch SDET01\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 315,\n        \"programName\": \"Updated_Jun23-PostmanAcers-SDET-500\"\n    },\n    {\n        \"batchId\": 82,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-100-SDET01-serialNumber\",\n        \"batchDescription\": \"SDET First Batch SDET01\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 315,\n        \"programName\": \"Updated_Jun23-PostmanAcers-SDET-500\"\n    },\n    {\n        \"batchId\": 74,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-100-SDET01-serialNumber\",\n        \"batchDescription\": \"SDET First Batch SDET01\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 315,\n        \"programName\": \"Updated_Jun23-PostmanAcers-SDET-500\"\n    },\n    {\n        \"batchId\": 83,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-100-SDET01-{serialNumber}\",\n        \"batchDescription\": \"SDET First Batch SDET01\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 315,\n        \"programName\": \"Updated_Jun23-PostmanAcers-SDET-500\"\n    },\n    {\n        \"batchId\": 320,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-750--001\",\n        \"batchDescription\": \"SDET Second Batch SDET02\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 1350,\n        \"programName\": \"UpdatedJun23-PostmanAcers-SDET-750\"\n    },\n    {\n        \"batchId\": 322,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-750-SDET01-001\",\n        \"batchDescription\": \"SDET Second Batch SDET02\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 1350,\n        \"programName\": \"UpdatedJun23-PostmanAcers-SDET-750\"\n    },\n    {\n        \"batchId\": 113,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-SDET01-001\",\n        \"batchDescription\": \"Batch SDET\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 498,\n        \"programName\": \"Jun23-PostmanAcers-SDET-001\"\n    },\n    {\n        \"batchId\": 131,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-SDET01--002\",\n        \"batchDescription\": \"Batch DA\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 554,\n        \"programName\": \"Jun23-PostmanAcers-SDET-002\"\n    },\n    {\n        \"batchId\": 130,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-SDET01-002\",\n        \"batchDescription\": \"Batch SDET\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 498,\n        \"programName\": \"Jun23-PostmanAcers-SDET-001\"\n    },\n    {\n        \"batchId\": 216,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-SDET01--007\",\n        \"batchDescription\": \"Batch SDET01 under program 007\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 946,\n        \"programName\": \"Jun23-PostmanAcers-SDET-007\"\n    },\n    {\n        \"batchId\": 217,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-SDET01-007\",\n        \"batchDescription\": \"Batch SDET01 under program 007\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 946,\n        \"programName\": \"Jun23-PostmanAcers-SDET-007\"\n    },\n    {\n        \"batchId\": 220,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-SDET01-008\",\n        \"batchDescription\": \"Batch SDET01 under program 008\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 947,\n        \"programName\": \"Jun23-PostmanAcers-SDET-008\"\n    },\n    {\n        \"batchId\": 60,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-SDET01-200\",\n        \"batchDescription\": \"SDET First Batch SDET01\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 257,\n        \"programName\": \"Jun23-PostmanAcers-SDET-200\"\n    },\n    {\n        \"batchId\": 64,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-SDET01-300\",\n        \"batchDescription\": \"SDET First Batch SDET01\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 301,\n        \"programName\": \"Jun23-PostmanAcers-SDET-300\"\n    },\n    {\n        \"batchId\": 66,\n        \"batchName\": \"Jun23-PostmanAcers-SDET-SDET02-300\",\n        \"batchDescription\": \"SDET Second Batch SDET02\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 301,\n        \"programName\": \"Jun23-PostmanAcers-SDET-300\"\n    },\n    {\n        \"batchId\": 868,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-170\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 839,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-219\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 774,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-228\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 863,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-301\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 860,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-406\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 826,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-478\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 827,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-492\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 862,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-616\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 861,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-62\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 851,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-630\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 859,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-637\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 866,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-677\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 864,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-684\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 832,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-685\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 865,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-718\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 852,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-745\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 652,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-748\",\n        \"batchDescription\": \"API07\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 13,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 153,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-75\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 824,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-784\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 867,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-86\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 2,\n        \"batchName\": \"Jun23-PostmanNinjas-SDET-914\",\n        \"batchDescription\": \"API07\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 13,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 525,\n        \"batchName\": \"Jun23-Postman Poineers-SDET-SDET01-36\",\n        \"batchDescription\": \"Selenium ,java,postman\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 830,\n        \"programId\": 1808,\n        \"programName\": \"Jun23-Postman Poineers-SDET-134\"\n    },\n    {\n        \"batchId\": 539,\n        \"batchName\": \"Jun23-Postman Poineers-SDET-SDET01-65\",\n        \"batchDescription\": \"Selenium ,java,postman\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 372,\n        \"programId\": 1855,\n        \"programName\": \"Jun23-Postman Poineers-SDET-256\"\n    },\n    {\n        \"batchId\": 526,\n        \"batchName\": \"Jun23-Postman Poineers-SDET-SDET01-846\",\n        \"batchDescription\": \"Selenium ,java,postman\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 122,\n        \"programId\": 1812,\n        \"programName\": \"Jun23-Postman Poineers-SDET-211\"\n    },\n    {\n        \"batchId\": 26,\n        \"batchName\": \"Jun23-sparkplugs-SDET-001\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 212,\n        \"batchName\": \"Jun23-sparkplugs-SDET-0010\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 95,\n        \"batchName\": \"Jun23-sparkplugs-SDET-002\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 275,\n        \"batchName\": \"Jun23-sparkplugs-SDET-002\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 28,\n        \"batchName\": \"Jun23-sparkplugs-SDET-003\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 29,\n        \"batchName\": \"Jun23-sparkplugs-SDET-004\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 210,\n        \"batchName\": \"Jun23-sparkplugs-SDET-005\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 208,\n        \"batchName\": \"Jun23-sparkplugs-SDET-005\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 211,\n        \"batchName\": \"Jun23-sparkplugs-SDET-006\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 213,\n        \"batchName\": \"Jun23-sparkplugs-SDET-011\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 97,\n        \"batchName\": \"Jun23-sparkplugs-SDET-100\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 96,\n        \"batchName\": \"Jun23-sparkplugs-SDET-100\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 271,\n        \"batchName\": \"Jun23-sparkplugs-SDET-110\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 15,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 250,\n        \"batchName\": \"Jun23-sparkplugs-SDET1735\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 432,\n        \"batchName\": \"Jun23-sparkplugs-SDET-200\",\n        \"batchDescription\": \"API Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 15,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 247,\n        \"batchName\": \"Jun23-sparkplugs-SDET2344\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 219,\n        \"batchName\": \"Jun23-sparkplugs-SDET-52\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 218,\n        \"batchName\": \"Jun23-sparkplugs-SDET-55\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 248,\n        \"batchName\": \"Jun23-sparkplugs-SDET683\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 249,\n        \"batchName\": \"Jun23-sparkplugs-SDET940\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 358,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET01-1041\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 361,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET01-1395\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 449,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET01-1448\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 22,\n        \"programName\": \"Jun23-Postman Ninjas-SDET-NaN\"\n    },\n    {\n        \"batchId\": 367,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET01-186\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 65,\n        \"programName\": \"Hackton4\"\n    },\n    {\n        \"batchId\": 416,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET01-1892\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 24,\n        \"programName\": \"APITesting7\"\n    },\n    {\n        \"batchId\": 338,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET01-2383\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 274,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET01-2595\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 458,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET01-2647\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 71,\n        \"programName\": \"Jun23-postman-pioneer-SDET104\"\n    },\n    {\n        \"batchId\": 277,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET01-278\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 336,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET01-2940\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 291,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET01-3357\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 365,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET01-3741\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 628,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET01-{{SerialNo}}\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 366,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET02-1458\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 451,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET02-1462\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 59,\n        \"programName\": \"history\"\n    },\n    {\n        \"batchId\": 418,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET02-1841\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 87,\n        \"programName\": \"Jun23-Testing-SDET-012\"\n    },\n    {\n        \"batchId\": 276,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET02-21\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 359,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET02-238\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 407,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET02-2459\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 93,\n        \"programName\": \"Jun23-Testing-SDET-016\"\n    },\n    {\n        \"batchId\": 278,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET02-250\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 368,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET02-2580\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 49,\n        \"programName\": \"Jun23-apiexplorer-updated2byid-sdet-103\"\n    },\n    {\n        \"batchId\": 450,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET02-2661\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 65,\n        \"programName\": \"Hackton4\"\n    },\n    {\n        \"batchId\": 362,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET02-2805\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 337,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET02-3476\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 292,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET02-3915\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 339,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET02-646\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 629,\n        \"batchName\": \"Jun23-sparkplugs-SDET-SDET02-{{SerialNo}}\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 214,\n        \"batchName\": \"Jun23-sparkplugs-SDET-xx\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 215,\n        \"batchName\": \"Jun23-sparkplugs-SDET-xy\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Completed\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 196,\n        \"batchName\": \"Jun23-Status200-SDET-SDET108-001\",\n        \"batchDescription\": \"Learn Postman newman and api testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 344,\n        \"programName\": \"Apiforhackathon\"\n    },\n    {\n        \"batchId\": 317,\n        \"batchName\": \"June23_APIDagger_SDET_SDET01_001598\",\n        \"batchDescription\": \"APIDagger_SDET\",\n        \"batchStatus\": \"Started\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 316,\n        \"batchName\": \"June23_APIDagger_SDET_SDET01_001634\",\n        \"batchDescription\": \"APIDagger_SDET\",\n        \"batchStatus\": \"Started\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 318,\n        \"batchName\": \"June23_APIDagger_SDET_SDET01_001693\",\n        \"batchDescription\": \"APIDagger_SDET\",\n        \"batchStatus\": \"Started\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 321,\n        \"batchName\": \"June23_APIDagger_SDET_SDET01_001757\",\n        \"batchDescription\": \"APIDagger_SDET\",\n        \"batchStatus\": \"Started\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 319,\n        \"batchName\": \"June23_APIDagger_SDET_SDET01_001903\",\n        \"batchDescription\": \"APIDagger_SDET\",\n        \"batchStatus\": \"Started\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 848,\n        \"batchName\": \"June23_APIDagger_SDET_SDET01_001995\",\n        \"batchDescription\": \"APIDagger_SDET\",\n        \"batchStatus\": \"Started\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 287,\n        \"batchName\": \"June23-APIExplorers-SDET-100\",\n        \"batchDescription\": \"String\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 101,\n        \"programName\": \"Jun23-Hackers@API-Postman-05\"\n    },\n    {\n        \"batchId\": 431,\n        \"batchName\": \"June23-APIExplorers-SDET-100\",\n        \"batchDescription\": \"String\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 102,\n        \"programName\": \"Jun23-Hackers@API-Postman-06\"\n    },\n    {\n        \"batchId\": 301,\n        \"batchName\": \"June23-APIExplorers-SDET-100\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"pass\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 66,\n        \"programName\": \"Api1\"\n    },\n    {\n        \"batchId\": 123,\n        \"batchName\": \"June23-APIExplorers-SDET-100\",\n        \"batchDescription\": \"String\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 305,\n        \"programName\": \"Jun23-PostmanAcers-DA-300\"\n    },\n    {\n        \"batchId\": 5,\n        \"batchName\": \"June23-APIExplorers-SDET-114\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 349,\n        \"batchName\": \"June23-APIExplorers-SDET-114\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"strinActive\",\n        \"batchNoOfClasses\": 25,\n        \"programId\": 167,\n        \"programName\": \"Jun23-HugsForBugs-SDET-793\"\n    },\n    {\n        \"batchId\": 326,\n        \"batchName\": \"June23-APIExplorers-SDET-114\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 25,\n        \"programId\": 67,\n        \"programName\": \"SeleniuminJavabyvijaybharathi\"\n    },\n    {\n        \"batchId\": 101,\n        \"batchName\": \"June23-DebugSquad-SDET-SDET106-001\",\n        \"batchDescription\": \"Software Testing\",\n        \"batchStatus\": \"PASS\",\n        \"batchNoOfClasses\": 15,\n        \"programId\": 453,\n        \"programName\": \"Jun23-DebugSquad-SDET-001\"\n    },\n    {\n        \"batchId\": 462,\n        \"batchName\": \"June23-DebugSquad-SDET-SDET106-555\",\n        \"batchDescription\": \"Software Testing\",\n        \"batchStatus\": \"PASS\",\n        \"batchNoOfClasses\": 25,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 871,\n        \"batchName\": \"Kendra\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 872,\n        \"batchName\": \"Ladarius\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 579,\n        \"batchName\": \"Madge\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 847,\n        \"batchName\": \"Novella\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 382,\n        \"batchName\": \"null\",\n        \"batchDescription\": \"five_batch\",\n        \"batchStatus\": \"passed\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 459,\n        \"batchName\": \"P1B1\",\n        \"batchDescription\": \"API-collectors-Batch1\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 1725,\n        \"programName\": \"API-Phase1\"\n    },\n    {\n        \"batchId\": 463,\n        \"batchName\": \"P1B1\",\n        \"batchDescription\": \"API-collectors-Batch1\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 1734,\n        \"programName\": \"API-Phase1-P1\"\n    },\n    {\n        \"batchId\": 105,\n        \"batchName\": \"Post_batch\",\n        \"batchDescription\": \"Create_Batch\",\n        \"batchStatus\": \"Pass\",\n        \"batchNoOfClasses\": 51,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 222,\n        \"batchName\": \"QA\",\n        \"batchDescription\": \"Newcomers\",\n        \"batchStatus\": \"Comleted\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 841,\n        \"batchName\": \"Quinton\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 858,\n        \"batchName\": \"Ramiro\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 849,\n        \"batchName\": \"Rhianna\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 618,\n        \"batchName\": \"Rowan\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 844,\n        \"batchName\": \"Ruthie\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 228,\n        \"batchName\": \"SalesForce\",\n        \"batchDescription\": \"SMPO\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 990,\n        \"programName\": \"Sales Force\"\n    },\n    {\n        \"batchId\": 283,\n        \"batchName\": \"Salseforce\",\n        \"batchDescription\": \"Salseforce Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 25,\n        \"batchName\": \"SDET\",\n        \"batchDescription\": \"APITesting\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2023,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 299,\n        \"batchName\": \"-SDET01-001\",\n        \"batchDescription\": \"SDET Second Batch SDET02\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 1052,\n        \"programName\": \"UpdatedJun23-PostmanAcers-SDET-004\"\n    },\n    {\n        \"batchId\": 341,\n        \"batchName\": \"SDET 230\",\n        \"batchDescription\": \"SDET BATCH-937\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 356,\n        \"programId\": 1485,\n        \"programName\": \"Jun23-API Trackers-SDET-698\"\n    },\n    {\n        \"batchId\": 343,\n        \"batchName\": \"SDET 241\",\n        \"batchDescription\": \"SDET BATCH-723\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 948,\n        \"programId\": 1485,\n        \"programName\": \"Jun23-API Trackers-SDET-698\"\n    },\n    {\n        \"batchId\": 635,\n        \"batchName\": \"SDET 329\",\n        \"batchDescription\": \"SDET BATCH-207\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 36,\n        \"programId\": 1485,\n        \"programName\": \"Jun23-API Trackers-SDET-698\"\n    },\n    {\n        \"batchId\": 344,\n        \"batchName\": \"SDET 353\",\n        \"batchDescription\": \"SDET BATCH-687\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 496,\n        \"programId\": 1485,\n        \"programName\": \"Jun23-API Trackers-SDET-698\"\n    },\n    {\n        \"batchId\": 340,\n        \"batchName\": \"SDET 488\",\n        \"batchDescription\": \"SDET BATCH-968\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 328,\n        \"programId\": 1485,\n        \"programName\": \"Jun23-API Trackers-SDET-698\"\n    },\n    {\n        \"batchId\": 637,\n        \"batchName\": \"SDET 637\",\n        \"batchDescription\": \"SDET BATCH-590\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 838,\n        \"programId\": 1485,\n        \"programName\": \"Jun23-API Trackers-SDET-698\"\n    },\n    {\n        \"batchId\": 360,\n        \"batchName\": \"SDET 677\",\n        \"batchDescription\": \"SDET BATCH-437\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 924,\n        \"programId\": 1485,\n        \"programName\": \"Jun23-API Trackers-SDET-698\"\n    },\n    {\n        \"batchId\": 342,\n        \"batchName\": \"SDET 686\",\n        \"batchDescription\": \"SDET BATCH-88\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 128,\n        \"programId\": 1485,\n        \"programName\": \"Jun23-API Trackers-SDET-698\"\n    },\n    {\n        \"batchId\": 638,\n        \"batchName\": \"SDET 771\",\n        \"batchDescription\": \"SDET BATCH-980\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 243,\n        \"programId\": 1485,\n        \"programName\": \"Jun23-API Trackers-SDET-698\"\n    },\n    {\n        \"batchId\": 345,\n        \"batchName\": \"SDET 84\",\n        \"batchDescription\": \"SDET BATCH-735\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 267,\n        \"programId\": 1485,\n        \"programName\": \"Jun23-API Trackers-SDET-698\"\n    },\n    {\n        \"batchId\": 133,\n        \"batchName\": \"SDET API HACKATHON1 2023\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"PASS\",\n        \"batchNoOfClasses\": 15,\n        \"programId\": 101,\n        \"programName\": \"Jun23-Hackers@API-Postman-05\"\n    },\n    {\n        \"batchId\": 39,\n        \"batchName\": \"SDET API HACKATHON 2022\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"PASS\",\n        \"batchNoOfClasses\": 15,\n        \"programId\": 101,\n        \"programName\": \"Jun23-Hackers@API-Postman-05\"\n    },\n    {\n        \"batchId\": 58,\n        \"batchName\": \"SDET API Hackathon 2023\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"pass\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 220,\n        \"programName\": \"Saleforce\"\n    },\n    {\n        \"batchId\": 34,\n        \"batchName\": \"SDET API HACKATHON 2023\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"PASS\",\n        \"batchNoOfClasses\": 15,\n        \"programId\": 101,\n        \"programName\": \"Jun23-Hackers@API-Postman-05\"\n    },\n    {\n        \"batchId\": 41,\n        \"batchName\": \"SDET API HACKATHON 2023\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"FAIL\",\n        \"batchNoOfClasses\": 15,\n        \"programId\": 100,\n        \"programName\": \"Jun1-postman-pioneer-SDET104\"\n    },\n    {\n        \"batchId\": 40,\n        \"batchName\": \"SDET API HACKATHON 2025\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"PASS\",\n        \"batchNoOfClasses\": 15,\n        \"programId\": 101,\n        \"programName\": \"Jun23-Hackers@API-Postman-05\"\n    },\n    {\n        \"batchId\": 198,\n        \"batchName\": \"sdf\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"string\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 199,\n        \"batchName\": \"sdfdsf\",\n        \"batchDescription\": \"sdf\",\n        \"batchStatus\": \"string\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 200,\n        \"batchName\": \"sdfdsfrt\",\n        \"batchDescription\": \"sdf\",\n        \"batchStatus\": \"string\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 37,\n        \"batchName\": \"selenium\",\n        \"batchDescription\": \"summer weekday Batch\",\n        \"batchStatus\": \"string\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 24,\n        \"programName\": \"APITesting7\"\n    },\n    {\n        \"batchId\": 202,\n        \"batchName\": \"selenium hackathon\",\n        \"batchDescription\": \"summer weekday Batch\",\n        \"batchStatus\": \"string\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 24,\n        \"programName\": \"APITesting7\"\n    },\n    {\n        \"batchId\": 115,\n        \"batchName\": \"selenium hackathon updated the description1\",\n        \"batchDescription\": null,\n        \"batchStatus\": \"InnActive\",\n        \"batchNoOfClasses\": 101,\n        \"programId\": 24,\n        \"programName\": \"APITesting7\"\n    },\n    {\n        \"batchId\": 332,\n        \"batchName\": \"Smart\",\n        \"batchDescription\": \"Good To Learn\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 1,\n        \"batchName\": \"sparkplugs\",\n        \"batchDescription\": \"batch-decs1\",\n        \"batchStatus\": \"batch-status4\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 23,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 500,\n        \"batchName\": \"sparkplugs\",\n        \"batchDescription\": \"batch-decs1\",\n        \"batchStatus\": \"batch-status4\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 23,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 106,\n        \"batchName\": \"sparkplugs\",\n        \"batchDescription\": \"batch-decs1\",\n        \"batchStatus\": \"batch-status4\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 23,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 45,\n        \"batchName\": \"sparkplugs\",\n        \"batchDescription\": \"batch-decs1\",\n        \"batchStatus\": \"batch-status4\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 23,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 151,\n        \"batchName\": \"Spring ACT June Batch\",\n        \"batchDescription\": \"WeekDay June Medicine Batch \",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 20,\n        \"programId\": 55,\n        \"programName\": \"ACT\"\n    },\n    {\n        \"batchId\": 10,\n        \"batchName\": \"Spring SAT Batch\",\n        \"batchDescription\": \"Weekend June Batch \",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 54,\n        \"programName\": \"SAT\"\n    },\n    {\n        \"batchId\": 294,\n        \"batchName\": \"string\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 318,\n        \"programName\": \"Jun23-PostmanAcers-DA-100\"\n    },\n    {\n        \"batchId\": 137,\n        \"batchName\": \"string\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"string\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 69,\n        \"batchName\": \"string\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 10,\n        \"programId\": 317,\n        \"programName\": \"Learn Java\"\n    },\n    {\n        \"batchId\": 112,\n        \"batchName\": \"string\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"string\",\n        \"batchNoOfClasses\": 9,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 117,\n        \"batchName\": \"string2\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"string\",\n        \"batchNoOfClasses\": 9,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 118,\n        \"batchName\": \"string3\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"string\",\n        \"batchNoOfClasses\": 9,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 227,\n        \"batchName\": \"string567\",\n        \"batchDescription\": \"string 678\",\n        \"batchStatus\": \"string345\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 229,\n        \"batchName\": \"string5678\",\n        \"batchDescription\": \"string 678\",\n        \"batchStatus\": \"string345\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 231,\n        \"batchName\": \"string567890\",\n        \"batchDescription\": \"string 6789\",\n        \"batchStatus\": \"string345\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 309,\n        \"batchName\": \"string89\",\n        \"batchDescription\": \"nmj\",\n        \"batchStatus\": \"stringmn\",\n        \"batchNoOfClasses\": 9,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 363,\n        \"batchName\": \"S/w\",\n        \"batchDescription\": \"Software Learning\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 364,\n        \"batchName\": \"SW\",\n        \"batchDescription\": \"Software Testing\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 517,\n        \"batchName\": \"SW1\",\n        \"batchDescription\": \"Software Testing\",\n        \"batchStatus\": \"Not Active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 109,\n        \"batchName\": \"team\",\n        \"batchDescription\": \"hackathon\",\n        \"batchStatus\": \"pass\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 132,\n        \"batchName\": \"test\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"pass\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 220,\n        \"programName\": \"Saleforce\"\n    },\n    {\n        \"batchId\": 285,\n        \"batchName\": \"test\",\n        \"batchDescription\": \"something\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 999,\n        \"programName\": \"Updated by ID by Path-Jun23-Lightning API Hackers-DA-14\"\n    },\n    {\n        \"batchId\": 281,\n        \"batchName\": \"test\",\n        \"batchDescription\": \"something\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 156,\n        \"programName\": \"June 8euejx39m6g postman_pioneer_sdet104\"\n    },\n    {\n        \"batchId\": 280,\n        \"batchName\": \"test\",\n        \"batchDescription\": \"something\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 155,\n        \"programName\": \"Jun23-SparkPlugs-SDET-004\"\n    },\n    {\n        \"batchId\": 91,\n        \"batchName\": \"test\",\n        \"batchDescription\": \"something\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 355,\n        \"programName\": \"something\"\n    },\n    {\n        \"batchId\": 126,\n        \"batchName\": \"test\",\n        \"batchDescription\": \"something\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 230,\n        \"programName\": \"string\"\n    },\n    {\n        \"batchId\": 127,\n        \"batchName\": \"test\",\n        \"batchDescription\": \"something\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 450,\n        \"programName\": \"SDET-Sel\"\n    },\n    {\n        \"batchId\": 194,\n        \"batchName\": \"test\",\n        \"batchDescription\": \"something\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 150,\n        \"programName\": \"June xlqi29zumt postman_pioneer_sdet104\"\n    },\n    {\n        \"batchId\": 567,\n        \"batchName\": \"test\",\n        \"batchDescription\": \"test\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 288,\n        \"batchName\": \"test\",\n        \"batchDescription\": \"something\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 599,\n        \"programName\": \"Jun23-spark plugs-SDET-278\"\n    },\n    {\n        \"batchId\": 93,\n        \"batchName\": \"test\",\n        \"batchDescription\": \"something\",\n        \"batchStatus\": \"active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 356,\n        \"programName\": \"Jun23-PostWomenTechies-S5\"\n    },\n    {\n        \"batchId\": 162,\n        \"batchName\": \"test\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"pass\",\n        \"batchNoOfClasses\": 12,\n        \"programId\": 66,\n        \"programName\": \"Api1\"\n    },\n    {\n        \"batchId\": 356,\n        \"batchName\": \"Test001\",\n        \"batchDescription\": \"Test001\",\n        \"batchStatus\": \"3\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 1566,\n        \"programName\": \"something004\"\n    },\n    {\n        \"batchId\": 347,\n        \"batchName\": \"Test001\",\n        \"batchDescription\": \"Test001\",\n        \"batchStatus\": \"3\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 1367,\n        \"programName\": \"something003\"\n    },\n    {\n        \"batchId\": 282,\n        \"batchName\": \"test5\",\n        \"batchDescription\": \"nothing\",\n        \"batchStatus\": \"train\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 49,\n        \"programName\": \"Jun23-apiexplorer-updated2byid-sdet-103\"\n    },\n    {\n        \"batchId\": 195,\n        \"batchName\": \"test5\",\n        \"batchDescription\": \"nothing\",\n        \"batchStatus\": \"train\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 410,\n        \"programName\": \"Jun23-Postmanpioneer-SDET-104\"\n    },\n    {\n        \"batchId\": 94,\n        \"batchName\": \"test5\",\n        \"batchDescription\": \"nothing\",\n        \"batchStatus\": \"train\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    },\n    {\n        \"batchId\": 92,\n        \"batchName\": \"test5\",\n        \"batchDescription\": \"nothing\",\n        \"batchStatus\": \"train\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 467,\n        \"batchName\": \"Test Batch description update\",\n        \"batchDescription\": \"Test Batch description update\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 4,\n        \"programId\": 24,\n        \"programName\": \"APITesting7\"\n    },\n    {\n        \"batchId\": 483,\n        \"batchName\": \"Test Batch Name1\",\n        \"batchDescription\": \"Test Batch description\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 24,\n        \"programName\": \"APITesting7\"\n    },\n    {\n        \"batchId\": 238,\n        \"batchName\": \"Testname\",\n        \"batchDescription\": \"BatchAPI6\",\n        \"batchStatus\": \"pass\",\n        \"batchNoOfClasses\": 3,\n        \"programId\": 3,\n        \"programName\": \"API Testing\"\n    },\n    {\n        \"batchId\": 568,\n        \"batchName\": \"testP\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 156,\n        \"batchName\": \"TestTesting1\",\n        \"batchDescription\": \"Test001\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 688,\n        \"programName\": \"something002\"\n    },\n    {\n        \"batchId\": 129,\n        \"batchName\": \"TestTesting1\",\n        \"batchDescription\": \"Test001\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 2,\n        \"programId\": 570,\n        \"programName\": \"something001\"\n    },\n    {\n        \"batchId\": 857,\n        \"batchName\": \"Thaddeus\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 577,\n        \"batchName\": \"Tremaine\",\n        \"batchDescription\": \"Postman\",\n        \"batchStatus\": \"test\",\n        \"batchNoOfClasses\": 1,\n        \"programId\": 1,\n        \"programName\": \"\"\n    },\n    {\n        \"batchId\": 18,\n        \"batchName\": \"updatedbatchs\",\n        \"batchDescription\": \"string\",\n        \"batchStatus\": \"Active\",\n        \"batchNoOfClasses\": 5,\n        \"programId\": 2,\n        \"programName\": \"Jun23-SparkPlugs-SDET-011\"\n    }\n]"
										}
									]
								},
								{
									"name": "Program_Batch_TC_002_Invalid_Endpoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3a025fa-7591-4442-a35b-a6fb8685649e",
												"exec": [
													"//validate status code \r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,404);\r",
													"    pm.expect(jsonResponse.error,\"Not Found\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "b125841a-73b3-4939-ae86-fa6fd43cdd32",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/{{invalidEndpointGetAllBatches}}"
									},
									"response": [
										{
											"id": "5f748bc7-4765-46c1-97c8-c61d5a36b9f8",
											"name": "Program_Batch_TC_002_Invalid_Endpoint",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseURL}}/{{invalidEndpointGetAllBatches}}"
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Sun, 25 Jun 2023 11:23:11 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-25T11:23:11.149+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batch\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_003_Without_Endpoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a2a494d-3bd2-41b0-8a25-e113b9a79ef4",
												"exec": [
													"//validate status code \r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,404);\r",
													"    pm.expect(jsonResponse.error,\"Not Found\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c71abbb2-5e56-4bcd-a085-083424417b0b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/"
									},
									"response": [
										{
											"id": "51740c1e-87e4-449c-9fb4-d1cae52f6190",
											"name": "Program_Batch_TC_003_Without_Endpoint",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseURL}}/"
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Sun, 25 Jun 2023 11:28:08 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-25T11:28:08.441+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_004_Invalid_Request_POST",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e04d7133-63da-4509-acfb-938892daf50d",
												"exec": [
													"//validate status code \r",
													"pm.test(\"Status code is 415\", function () {\r",
													"    pm.response.to.have.status(415);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Unsupported Media Type\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,415);\r",
													"    pm.expect(jsonResponse.error,\"Unsupported Media Type\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "a7b8db63-13f2-4f88-811e-602c2c2e9b4e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"url": "{{baseURL}}/{{getAllBatches}}"
									},
									"response": [
										{
											"id": "f59d8330-dd31-4cdd-b7c9-b359a29f2084",
											"name": "Program_Batch_TC_004_Invalid_Request_POST",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": "{{baseURL}}/{{getAllBatches}}"
											},
											"status": "Unsupported Media Type",
											"code": 415,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Accept",
													"value": "application/json"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Sun, 25 Jun 2023 11:29:20 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-25T11:29:20.348+00:00\",\n    \"status\": 415,\n    \"error\": \"Unsupported Media Type\",\n    \"path\": \"/lms/batches\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_004_Invalid_Request_PUT_DELETE",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e04d7133-63da-4509-acfb-938892daf50d",
												"exec": [
													"//validate status code \r",
													"pm.test(\"Status code is 405\", function () {\r",
													"    pm.response.to.have.status(405);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Method Not Allowed\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,405);\r",
													"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "860e2b01-1abd-4bc2-bfab-78e679945fd5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"url": "{{baseURL}}/{{getAllBatches}}"
									},
									"response": [
										{
											"id": "fd8621e4-d022-4f69-8922-6551e864dda7",
											"name": "Program_Batch_TC_004_Invalid_Request_POST",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": "{{baseURL}}/{{getAllBatches}}"
											},
											"status": "Unsupported Media Type",
											"code": 415,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Accept",
													"value": "application/json"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Sun, 25 Jun 2023 11:29:20 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-25T11:29:20.348+00:00\",\n    \"status\": 415,\n    \"error\": \"Unsupported Media Type\",\n    \"path\": \"/lms/batches\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_005_Invalid_Request_PUT_DELETE",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b8ea0f87-27c3-4004-81f4-0c0810551bd0",
												"exec": [
													"//validate status code \r",
													"pm.test(\"Status code is 405\", function () {\r",
													"    pm.response.to.have.status(405);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Method Not Allowed\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,405);\r",
													"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c3434853-1007-456e-ba73-b7685916bd2d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"url": "{{baseURL}}/{{getAllBatches}}"
									},
									"response": [
										{
											"id": "edf07a6b-5cdf-4f97-8afe-dc2c492f7039",
											"name": "Program_Batch_TC_005_Invalid_Request_GET_DELETE",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": "{{baseURL}}/{{getAllBatches}}"
											},
											"status": "Method Not Allowed",
											"code": 405,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Allow",
													"value": "GET, POST"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Sun, 25 Jun 2023 11:32:15 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-25T11:32:15.395+00:00\",\n    \"status\": 405,\n    \"error\": \"Method Not Allowed\",\n    \"path\": \"/lms/batches\"\n}"
										},
										{
											"id": "94bd9ccd-2eba-4464-bc81-e10f56b225ff",
											"name": "Program_Batch_TC_005_Invalid_Request_GET_DELETE",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": "{{baseURL}}/{{getAllBatches}}"
											},
											"status": "Method Not Allowed",
											"code": 405,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Allow",
													"value": "GET, POST"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Sun, 25 Jun 2023 11:33:06 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-25T11:33:06.896+00:00\",\n    \"status\": 405,\n    \"error\": \"Method Not Allowed\",\n    \"path\": \"/lms/batches\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_006_Invalid_Base_URL",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
												"exec": [
													"console.log(\"Due to application error displays XML code, response body validation cannot be done\");\r",
													"console.log(\"JSONError: Unexpected token '<' at 1:1<!DOCTYPE html>^\");\r",
													"\r",
													"//validate status code \r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.expect(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c47ea663-71d5-4667-b43d-c39e98e7f02c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{invalidBaseUrl}}"
									},
									"response": [
										{
											"id": "d2f8b17e-82c1-4ef0-9c56-8f502c39af6d",
											"name": "New Request",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Fri, 23 Jun 2023 19:13:05 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
										}
									]
								}
							],
							"id": "59201829-a390-4117-8670-725a988faab8"
						},
						{
							"name": "GET Batch By ID",
							"item": [
								{
									"name": "Program_Batch_TC_007_Valid_Batch_ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3ccc7565-6778-4447-909d-b0c23660724e",
												"exec": [
													"//validate status code\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"    \r",
													"//validate Response body\r",
													"    pm.test(\"Validate Response body\", function() {\r",
													"         \r",
													"        pm.expect(jsonResponse.batchId, pm.environment.get(\"batchId\"));\r",
													"        pm.expect(jsonResponse.batchName,pm.environment.get(\"batchName\"));\r",
													"        pm.expect(jsonResponse.batchStatus,pm.environment.get(\"batchStatus\"));\r",
													"        pm.expect(jsonResponse.batchDescription, pm.environment.get(\"batchDescription\"));;\r",
													"        pm.expect(jsonResponse.batchNoOfClasses, pm.environment.get(\"batchNoOfClasses\"));;\r",
													"        pm.expect(jsonResponse.programId, pm.environment.get(\"programId\"));;\r",
													"        pm.expect(jsonResponse.programName,pm.environment.get(\"programName\"));;\r",
													"})\r",
													"\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =  \r",
													" {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"batchId\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"batchName\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"batchDescription\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"batchStatus\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"batchNoOfClasses\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"programId\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"programName\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"batchId\",\r",
													"    \"batchName\",\r",
													"    \"batchDescription\",\r",
													"    \"batchStatus\",\r",
													"    \"batchNoOfClasses\",\r",
													"    \"programId\",\r",
													"    \"programName\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate Schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema))\r",
													" })\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "6f909ea0-2195-4950-98f4-ab2ecffed82d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "{{baseURL}}/{{getBatchById}}/{{batchId}}"
									},
									"response": [
										{
											"id": "96c0597e-c37a-42d5-9827-54f4036a65bc",
											"name": "Program_Batch_TC_007_Valid_Batch_ID",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseURL}}/{{getBatchById}}/{{batchId}}"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Mon, 26 Jun 2023 05:20:56 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"batchId\": 1504,\n    \"batchName\": \"Jun23-PostWomenTechies-SDET-100-001\",\n    \"batchDescription\": \"This batch is for Postman hackathon\",\n    \"batchStatus\": \"Active\",\n    \"batchNoOfClasses\": 10,\n    \"programId\": 3168,\n    \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_008_Without_Endpoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3a025fa-7591-4442-a35b-a6fb8685649e",
												"exec": [
													"//validate status code \r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,404);\r",
													"    pm.expect(jsonResponse.error,\"Not Found\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "19e5897f-d468-4ae6-a0bc-8f4e20e2ceb5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/"
									},
									"response": []
								},
								{
									"name": "Program_Batch_TC_009_Invalid_Request_POST_PUT_DELETE",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e04d7133-63da-4509-acfb-938892daf50d",
												"exec": [
													"//validate status code \r",
													"pm.test(\"Status code is 405\", function () {\r",
													"    pm.response.to.have.status(405);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Method Not Allowed\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,405);\r",
													"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c6d48834-de10-4c34-a2d6-89d6620ffd62",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"url": "{{baseURL}}/{{getBatchById}}/1504"
									},
									"response": [
										{
											"id": "b25a4bda-b5ee-4d54-832b-d3cef1b52d9e",
											"name": "Program_Batch_TC_004_Invalid_Request_POST",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": "{{baseURL}}/{{getAllBatches}}"
											},
											"status": "Unsupported Media Type",
											"code": 415,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Accept",
													"value": "application/json"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Sun, 25 Jun 2023 11:29:20 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-25T11:29:20.348+00:00\",\n    \"status\": 415,\n    \"error\": \"Unsupported Media Type\",\n    \"path\": \"/lms/batches\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_009_Invalid_Request_POST_PUT_DELETE",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e04d7133-63da-4509-acfb-938892daf50d",
												"exec": [
													"//validate status code \r",
													"pm.test(\"Status code is 405\", function () {\r",
													"    pm.response.to.have.status(405);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Method Not Allowed\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,405);\r",
													"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d778437f-d3f5-41de-af0e-136c98f1dab1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"url": "{{baseURL}}/{{getBatchById}}/1504"
									},
									"response": [
										{
											"id": "27b677fd-0d4b-4537-a424-e7c617140ef0",
											"name": "Program_Batch_TC_004_Invalid_Request_POST",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": "{{baseURL}}/{{getAllBatches}}"
											},
											"status": "Unsupported Media Type",
											"code": 415,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Accept",
													"value": "application/json"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Sun, 25 Jun 2023 11:29:20 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-25T11:29:20.348+00:00\",\n    \"status\": 415,\n    \"error\": \"Unsupported Media Type\",\n    \"path\": \"/lms/batches\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_009_Invalid_Request_POST_PUT_DELETE",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e04d7133-63da-4509-acfb-938892daf50d",
												"exec": [
													"//validate status code \r",
													"pm.test(\"Status code is 405\", function () {\r",
													"    pm.response.to.have.status(405);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Method Not Allowed\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,405);\r",
													"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "89a75139-fc04-4962-b47f-15a279b73d47",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"url": "{{baseURL}}/{{getBatchById}}/1504"
									},
									"response": [
										{
											"id": "15daf418-ad14-44de-b86e-8c657e3b4099",
											"name": "Program_Batch_TC_009_Invalid_Request_POST_GET_DELETE",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": "{{baseURL}}/{{getBatchById}}/1504"
											},
											"status": "Method Not Allowed",
											"code": 405,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Allow",
													"value": "GET"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Mon, 26 Jun 2023 07:15:23 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-26T07:15:23.393+00:00\",\n    \"status\": 405,\n    \"error\": \"Method Not Allowed\",\n    \"path\": \"/lms/batches/batchId/1504\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_010_Non numeric_Batch_ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
												"exec": [
													"\r",
													"\r",
													"//validate status code \r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,400);\r",
													"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "7bd6541f-6d31-4621-88f5-ee0ac81940e3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/{{getBatchById}}/{{Program_Batch_TC_010}}"
									},
									"response": []
								},
								{
									"name": "Program_Batch_TC_011_Special_Characters_Batch_ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
												"exec": [
													"\r",
													"\r",
													"//validate status code \r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,400);\r",
													"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "a8989798-f698-4a73-86f7-92090cf1817e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/{{getBatchById}}/{{Program_Batch_TC_011}}"
									},
									"response": [
										{
											"id": "cacd2a27-cab2-4cf6-a2a9-a4b2a7f064dd",
											"name": "Program_Batch_TC_011_Special_Characters_Batch_ID",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseURL}}/{{getBatchById}}/{{Program_Batch_TC_011}}"
											},
											"status": "Method Not Allowed",
											"code": 405,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Allow",
													"value": "DELETE, PUT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Mon, 26 Jun 2023 07:58:35 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-26T07:58:35.958+00:00\",\n    \"status\": 405,\n    \"error\": \"Method Not Allowed\",\n    \"path\": \"/lms/batches/batchId/\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_012_Alphanumeric_Batch_ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
												"exec": [
													"\r",
													"\r",
													"//validate status code \r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,400);\r",
													"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "19d74885-a521-48a5-89fa-78f8e0328d3d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/{{getBatchById}}/{{Program_Batch_TC_012}}"
									},
									"response": [
										{
											"id": "6f1eedb1-39cf-4c46-be51-7f12a42b4eac",
											"name": "Program_Batch_TC_011_Special_Characters_Batch_ID",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseURL}}/{{getBatchById}}/{{Program_Batch_TC_011}}"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Mon, 26 Jun 2023 07:48:11 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-26T07:48:11.002+00:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"path\": \"/lms/batches/batchId/PostWomenTechies\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_013_Non_Existing_Batch_ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
												"exec": [
													"\r",
													"\r",
													"//validate status code \r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    var environmentVar = pm.environment.get(\"Program_Batch_TC_013\");\r",
													"    //pm.expect(jsonResponse.message,\"Batch not found with Id :  \" +environmentVar+ \" \").to.be.true;\r",
													"    pm.expect(jsonResponse.message,'Batch not found with Id : 12345678 ');\r",
													"    pm.expect(jsonResponse.success,\"false\")\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"message\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"success\": {\r",
													"      \"type\": \"boolean\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"message\",\r",
													"    \"success\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "0c7c47b3-398b-4cbf-bf49-1f2990b5134d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/{{getBatchById}}/{{Program_Batch_TC_013}}"
									},
									"response": [
										{
											"id": "5a89937f-3193-4800-8c72-99e66dfb0558",
											"name": "Program_Batch_TC_011_Special_Characters_Batch_ID",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseURL}}/{{getBatchById}}/{{Program_Batch_TC_011}}"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Mon, 26 Jun 2023 07:48:11 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-26T07:48:11.002+00:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"path\": \"/lms/batches/batchId/PostWomenTechies\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_014_Invalid_Endpoints",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
												"exec": [
													"\r",
													"\r",
													"//validate status code \r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,404);\r",
													"    pm.expect(jsonResponse.error,\"Not Found\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "b089f212-6dde-4d76-aed0-c2d5d2a527c8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/{{Program_Batch_TC_014}}}/{{batchID}}"
									},
									"response": [
										{
											"id": "ea49f77d-3402-4214-bd1c-b057df558d44",
											"name": "Program_Batch_TC_011_Special_Characters_Batch_ID",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseURL}}/{{getBatchById}}/{{Program_Batch_TC_011}}"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Mon, 26 Jun 2023 07:48:11 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-26T07:48:11.002+00:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"path\": \"/lms/batches/batchId/PostWomenTechies\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_015_Invalid_Base_URL",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
												"exec": [
													"console.log(\"Due to application error displays XML code, response body validation cannot be done\");\r",
													"console.log(\"JSONError: Unexpected token '<' at 1:1<!DOCTYPE html>^\");\r",
													"\r",
													"//validate status code \r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.expect(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f3fb870e-b867-4565-86f6-2849893d4389",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{invalidBaseUrl}}"
									},
									"response": [
										{
											"id": "09288a84-d34d-4b7f-bbb7-70084fad5a80",
											"name": "New Request",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Fri, 23 Jun 2023 19:13:05 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
										}
									]
								}
							],
							"id": "eab4365f-a7e9-445b-bfc6-94aafda685b1"
						},
						{
							"name": "GET Batch By Name",
							"item": [
								{
									"name": "Program_Batch_TC_016_Valid_Batch_Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3ccc7565-6778-4447-909d-b0c23660724e",
												"exec": [
													"//validate status code\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"    \r",
													"//validate Response body\r",
													"    pm.test(\"Validate Response body\", function() {\r",
													"         \r",
													"        pm.expect(jsonResponse.batchId, pm.environment.get(\"batchId\"));\r",
													"        pm.expect(jsonResponse.batchName,pm.environment.get(\"batchName\"));\r",
													"        pm.expect(jsonResponse.batchStatus,pm.environment.get(\"batchStatus\"));\r",
													"        pm.expect(jsonResponse.batchDescription, pm.environment.get(\"batchDescription\"));;\r",
													"        pm.expect(jsonResponse.batchNoOfClasses, pm.environment.get(\"batchNoOfClasses\"));;\r",
													"        pm.expect(jsonResponse.programId, pm.environment.get(\"programId\"));;\r",
													"        pm.expect(jsonResponse.programName,pm.environment.get(\"programName\"));;\r",
													"})\r",
													"\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =  \r",
													" {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"batchId\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"batchName\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"batchDescription\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"batchStatus\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"batchNoOfClasses\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"programId\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"programName\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"batchId\",\r",
													"    \"batchName\",\r",
													"    \"batchDescription\",\r",
													"    \"batchStatus\",\r",
													"    \"batchNoOfClasses\",\r",
													"    \"programId\",\r",
													"    \"programName\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema))\r",
													" })\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ca543b93-8479-415f-9e07-b1857093ed4c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/{{getBatchByName}}/{{batchName}}"
									},
									"response": [
										{
											"id": "c98e3b0f-0cc6-4878-bbea-b75631cb64dc",
											"name": "Program_Batch_TC_007_Valid_Batch_ID",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseURL}}/{{getBatchById}}/{{batchId}}"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Mon, 26 Jun 2023 05:20:56 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"batchId\": 1504,\n    \"batchName\": \"Jun23-PostWomenTechies-SDET-100-001\",\n    \"batchDescription\": \"This batch is for Postman hackathon\",\n    \"batchStatus\": \"Active\",\n    \"batchNoOfClasses\": 10,\n    \"programId\": 3168,\n    \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_017_Without_Endpoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3a025fa-7591-4442-a35b-a6fb8685649e",
												"exec": [
													"//validate status code \r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,404);\r",
													"    pm.expect(jsonResponse.error,\"Not Found\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "77f2583d-9d96-47a0-acf3-bc0a972df396",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/"
									},
									"response": []
								},
								{
									"name": "Program_Batch_TC_018_Invalid_Endpoint_Alphanumeric_Batch_Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
												"exec": [
													"\r",
													"\r",
													"//validate status code \r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    var environmentVar = pm.environment.get(\"Program_Batch_TC_012\");\r",
													"    pm.expect(jsonResponse.message,\"Batch not found with Name : \"+ environmentVar).to.be.true\r",
													"    pm.expect(jsonResponse.success,\"false\")\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"message\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"success\": {\r",
													"      \"type\": \"boolean\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"message\",\r",
													"    \"success\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "52adb197-e961-4d6c-aab5-0d155c1ae5a5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/{{getBatchByName}}/{{Program_Batch_TC_012}}"
									},
									"response": [
										{
											"id": "0acf3687-38a2-423f-95a5-bd549719b8c2",
											"name": "Program_Batch_TC_011_Special_Characters_Batch_ID",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseURL}}/{{getBatchById}}/{{Program_Batch_TC_011}}"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Mon, 26 Jun 2023 07:48:11 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-26T07:48:11.002+00:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"path\": \"/lms/batches/batchId/PostWomenTechies\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_019_Invalid_Endpoint_Non_Existing_Batch_ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
												"exec": [
													"\r",
													"\r",
													"//validate status code \r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    var environmentVar = pm.environment.get(\"Program_Batch_TC_013\");\r",
													"    pm.expect(jsonResponse.message,\"Batch not found with Id :  \" +environmentVar+ \" \").to.be.true;\r",
													"    pm.expect(jsonResponse.success,\"false\")\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"message\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"success\": {\r",
													"      \"type\": \"boolean\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"message\",\r",
													"    \"success\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "61a0b83e-bdf2-4976-8a10-b2e42bbcc22c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/{{getBatchByName}}/{{Program_Batch_TC_013}}"
									},
									"response": [
										{
											"id": "85d7c753-b466-4347-bda0-080369da0555",
											"name": "Program_Batch_TC_011_Special_Characters_Batch_ID",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseURL}}/{{getBatchById}}/{{Program_Batch_TC_011}}"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Mon, 26 Jun 2023 07:48:11 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-26T07:48:11.002+00:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"path\": \"/lms/batches/batchId/PostWomenTechies\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_020_Invalid_Endpoints",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
												"exec": [
													"\r",
													"\r",
													"//validate status code \r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,404);\r",
													"    pm.expect(jsonResponse.error,\"Not Found\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "a875be9f-42c3-4e12-bc25-b8a77586de40",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/{{Program_Batch_TC_014}}}/{{batchName}}"
									},
									"response": [
										{
											"id": "b3ea000c-5f3d-4cab-a53f-4c87fff2e6fb",
											"name": "Program_Batch_TC_011_Special_Characters_Batch_ID",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseURL}}/{{getBatchById}}/{{Program_Batch_TC_011}}"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Mon, 26 Jun 2023 07:48:11 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-26T07:48:11.002+00:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"path\": \"/lms/batches/batchId/PostWomenTechies\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_021_Invalid_Request_POST_PUT_DELETE",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e04d7133-63da-4509-acfb-938892daf50d",
												"exec": [
													"//validate status code \r",
													"pm.test(\"Status code is 405\", function () {\r",
													"    pm.response.to.have.status(405);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Method Not Allowed\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,405);\r",
													"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "6ac24788-3c80-46a3-be6f-12f284cad4a0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"url": "{{baseURL}}/{{getBatchByName}}/{{batchName}}"
									},
									"response": [
										{
											"id": "fffa2625-bf1d-46b2-81cd-9df5dabaea88",
											"name": "Program_Batch_TC_004_Invalid_Request_POST",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": "{{baseURL}}/{{getAllBatches}}"
											},
											"status": "Unsupported Media Type",
											"code": 415,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Accept",
													"value": "application/json"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Sun, 25 Jun 2023 11:29:20 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-25T11:29:20.348+00:00\",\n    \"status\": 415,\n    \"error\": \"Unsupported Media Type\",\n    \"path\": \"/lms/batches\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_021_Invalid_Request_POST_PUT_DELETE",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e04d7133-63da-4509-acfb-938892daf50d",
												"exec": [
													"//validate status code \r",
													"pm.test(\"Status code is 405\", function () {\r",
													"    pm.response.to.have.status(405);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Method Not Allowed\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,405);\r",
													"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "454ef3fe-13bb-4a0b-a6d3-b2616a0c8e68",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"url": "{{baseURL}}/{{getBatchByName}}/{{batchName}}"
									},
									"response": [
										{
											"id": "fb546e5d-6f8d-4d73-af8a-0a437c459593",
											"name": "Program_Batch_TC_009_Invalid_Request_POST_GET_DELETE",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": "{{baseURL}}/{{getBatchById}}/1504"
											},
											"status": "Method Not Allowed",
											"code": 405,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Allow",
													"value": "GET"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Mon, 26 Jun 2023 07:15:23 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-26T07:15:23.393+00:00\",\n    \"status\": 405,\n    \"error\": \"Method Not Allowed\",\n    \"path\": \"/lms/batches/batchId/1504\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_021_Invalid_Request_POST_PUT_DELETE",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e04d7133-63da-4509-acfb-938892daf50d",
												"exec": [
													"//validate status code \r",
													"pm.test(\"Status code is 405\", function () {\r",
													"    pm.response.to.have.status(405);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Method Not Allowed\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,405);\r",
													"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "28c7f5ff-a933-4416-95e2-a4eacc9d7ba8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"url": "{{baseURL}}/{{getBatchByName}}/{{batchName}}"
									},
									"response": [
										{
											"id": "ac650dd5-30ee-4be2-b866-675c478b7a99",
											"name": "Program_Batch_TC_004_Invalid_Request_POST",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": "{{baseURL}}/{{getAllBatches}}"
											},
											"status": "Unsupported Media Type",
											"code": 415,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Accept",
													"value": "application/json"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Sun, 25 Jun 2023 11:29:20 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-25T11:29:20.348+00:00\",\n    \"status\": 415,\n    \"error\": \"Unsupported Media Type\",\n    \"path\": \"/lms/batches\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_022_Invalid_Base_URL",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
												"exec": [
													"console.log(\"Due to application error displays XML code, response body validation cannot be done\");\r",
													"console.log(\"JSONError: Unexpected token '<' at 1:1<!DOCTYPE html>^\");\r",
													"\r",
													"//validate status code \r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.expect(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "cf7404f4-5a44-429d-a8b6-06b76ac809cf",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{invalidBaseUrl}}"
									},
									"response": [
										{
											"id": "d3da2821-3ece-472a-9dc7-784c14875467",
											"name": "New Request",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Fri, 23 Jun 2023 19:13:05 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
										}
									]
								}
							],
							"id": "bff5d345-72f5-423c-9607-66eb391ecb6d"
						},
						{
							"name": "GET Batch By Program Id",
							"item": [
								{
									"name": "Program_Batch_TC_023_Valid_Program ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3ccc7565-6778-4447-909d-b0c23660724e",
												"exec": [
													"//validate status code\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"    \r",
													"//validate Response body\r",
													"    pm.test(\"Validate Response body\", function() {\r",
													"         \r",
													"        pm.expect(jsonResponse.batchId, pm.environment.get(\"batchId\"));\r",
													"        pm.expect(jsonResponse.batchName,pm.environment.get(\"batchName\"));\r",
													"        pm.expect(jsonResponse.batchStatus,pm.environment.get(\"batchStatus\"));\r",
													"        pm.expect(jsonResponse.batchDescription, pm.environment.get(\"batchDescription\"));;\r",
													"        pm.expect(jsonResponse.batchNoOfClasses, pm.environment.get(\"batchNoOfClasses\"));;\r",
													"        pm.expect(jsonResponse.programId, pm.environment.get(\"programId\"));;\r",
													"        pm.expect(jsonResponse.programName,pm.environment.get(\"programName\"));;\r",
													"})\r",
													"\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =  \r",
													" {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"batchId\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"batchName\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"batchDescription\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"batchStatus\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"batchNoOfClasses\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"programId\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"programName\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"batchId\",\r",
													"    \"batchName\",\r",
													"    \"batchDescription\",\r",
													"    \"batchStatus\",\r",
													"    \"batchNoOfClasses\",\r",
													"    \"programId\",\r",
													"    \"programName\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test(\"Validate Schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema))\r",
													" })\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "33cd95bc-e1ae-4a73-9db7-b28e32a477a0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/{{getBatchByProgramId}}/{{programID}}"
									},
									"response": [
										{
											"id": "ae381930-ce8e-4cc4-b748-2617cb872d1b",
											"name": "Program_Batch_TC_007_Valid_Batch_ID",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseURL}}/{{getBatchById}}/{{batchId}}"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Mon, 26 Jun 2023 05:20:56 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"batchId\": 1504,\n    \"batchName\": \"Jun23-PostWomenTechies-SDET-100-001\",\n    \"batchDescription\": \"This batch is for Postman hackathon\",\n    \"batchStatus\": \"Active\",\n    \"batchNoOfClasses\": 10,\n    \"programId\": 3168,\n    \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_024_Invalid_Endpoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "31cc4368-7ac4-4c95-95b4-e5c2a979022e",
												"exec": [
													"\r",
													"//validate status code \r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,404);\r",
													"    pm.expect(jsonResponse.error,\"Not Found\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "40775e22-0e66-4aec-b8d5-a1e981d7070c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/{{invalidEndpointGetAllBatches}}/{{programID}}"
									},
									"response": []
								},
								{
									"name": "Program_Batch_TC_025_Invalid_Request_POST_GET_DELETE",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e04d7133-63da-4509-acfb-938892daf50d",
												"exec": [
													"//validate status code \r",
													"pm.test(\"Status code is 405\", function () {\r",
													"    pm.response.to.have.status(405);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Method Not Allowed\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,405);\r",
													"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f5977af4-9f18-4047-9cb1-0f465b9b6de0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"url": "{{baseURL}}/{{getBatchByProgramId}}/{{batchName}}"
									},
									"response": [
										{
											"id": "bcc9c0ed-941e-4447-929a-8b0515bf29e5",
											"name": "Program_Batch_TC_004_Invalid_Request_POST",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": "{{baseURL}}/{{getAllBatches}}"
											},
											"status": "Unsupported Media Type",
											"code": 415,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Accept",
													"value": "application/json"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Sun, 25 Jun 2023 11:29:20 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-25T11:29:20.348+00:00\",\n    \"status\": 415,\n    \"error\": \"Unsupported Media Type\",\n    \"path\": \"/lms/batches\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_025_Invalid_Request_POST_GET_DELETE",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e04d7133-63da-4509-acfb-938892daf50d",
												"exec": [
													"//validate status code \r",
													"pm.test(\"Status code is 405\", function () {\r",
													"    pm.response.to.have.status(405);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Method Not Allowed\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,405);\r",
													"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "adb93bf4-40d7-4ccf-8472-2865454c7b53",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"url": "{{baseURL}}/{{getBatchByProgramId}}/{{batchName}}"
									},
									"response": [
										{
											"id": "912cf571-b0c6-489f-9fb3-ede33d4e1b9c",
											"name": "Program_Batch_TC_004_Invalid_Request_POST",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": "{{baseURL}}/{{getAllBatches}}"
											},
											"status": "Unsupported Media Type",
											"code": 415,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Accept",
													"value": "application/json"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Sun, 25 Jun 2023 11:29:20 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-25T11:29:20.348+00:00\",\n    \"status\": 415,\n    \"error\": \"Unsupported Media Type\",\n    \"path\": \"/lms/batches\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_025_Invalid_Request_POST_GET_DELETE",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e04d7133-63da-4509-acfb-938892daf50d",
												"exec": [
													"//validate status code \r",
													"pm.test(\"Status code is 405\", function () {\r",
													"    pm.response.to.have.status(405);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Method Not Allowed\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,405);\r",
													"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "93e8df7b-2010-4129-b75d-ac8b15d52fdb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"url": "{{baseURL}}/{{getBatchByProgramId}}/{{batchName}}"
									},
									"response": [
										{
											"id": "fe10d8fb-b771-4e05-9998-231c57c41719",
											"name": "Program_Batch_TC_009_Invalid_Request_POST_GET_DELETE",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": "{{baseURL}}/{{getBatchById}}/1504"
											},
											"status": "Method Not Allowed",
											"code": 405,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Allow",
													"value": "GET"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Mon, 26 Jun 2023 07:15:23 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-26T07:15:23.393+00:00\",\n    \"status\": 405,\n    \"error\": \"Method Not Allowed\",\n    \"path\": \"/lms/batches/batchId/1504\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_026_Program ID_in_Non numeric",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
												"exec": [
													"\r",
													"\r",
													"//validate status code \r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,400);\r",
													"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ab744b55-1e82-47f4-bebc-e6783ae2dc36",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/{{getBatchByProgramId}}/{{Program_Batch_TC_010}}"
									},
									"response": [
										{
											"id": "dda8071f-3efa-45d9-928c-05ee2cccbe73",
											"name": "New Request",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Fri, 23 Jun 2023 19:13:05 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_027__Program ID_in_Special_Characters",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
												"exec": [
													"//validate status code \r",
													"pm.test(\"Status code is 405\", function () {\r",
													"    pm.response.to.have.status(405);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Method Not Allowed\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,405);\r",
													"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "33cfdc4b-3dce-4e95-98d4-6e01fa651f9e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/{{getBatchByProgramId}}/{{Program_Batch_TC_011}}"
									},
									"response": [
										{
											"id": "7ef30b7b-46a0-472f-b92b-dfaa74532819",
											"name": "Program_Batch_TC_011_Special_Characters_Batch_ID",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseURL}}/{{getBatchById}}/{{Program_Batch_TC_011}}"
											},
											"status": "Method Not Allowed",
											"code": 405,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Allow",
													"value": "DELETE, PUT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Mon, 26 Jun 2023 07:58:35 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-26T07:58:35.958+00:00\",\n    \"status\": 405,\n    \"error\": \"Method Not Allowed\",\n    \"path\": \"/lms/batches/batchId/\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_028__Program ID_in_Alphanumeric",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
												"exec": [
													"//validate status code \r",
													"pm.test(\"Status code is 405\", function () {\r",
													"    pm.response.to.have.status(405);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Method Not Allowed\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,405);\r",
													"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "22ad5cf2-4a9f-460b-98c0-fe1ef966bfab",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/{{getBatchByProgramId}}/{{Program_Batch_TC_011}}"
									},
									"response": [
										{
											"id": "797fa5b5-fcd6-49e4-a348-496485dcd6c0",
											"name": "New Request",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Fri, 23 Jun 2023 19:13:05 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_029_Without_Endpoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "412781c0-e268-4edd-ae09-fe228093482a",
												"exec": [
													"\r",
													"\r",
													"//validate status code \r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    pm.expect(jsonResponse.status,404);\r",
													"    pm.expect(jsonResponse.error,\"Not Found\");\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"     \r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"timestamp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"path\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"timestamp\",\r",
													"    \"status\",\r",
													"    \"error\",\r",
													"    \"path\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "fb0a112a-8c8b-45d6-8003-b549dd629ec4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/"
									},
									"response": []
								},
								{
									"name": "Program_Batch_TC_030_Non_Existing_Batch_ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
												"exec": [
													"\r",
													"\r",
													"//validate status code \r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"//Get the response result\r",
													"var jsonResponse = pm.response.json();\r",
													"\r",
													"//validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    var environmentVar = pm.environment.get(\"Program_Batch_TC_013\");\r",
													"    pm.expect(jsonResponse.message,\"Batch with this Program Id \" +environmentVar+ \"not found \").to.be.true;\r",
													"    //pm.expect(jsonResponse.message,'Batch not found with Id : 12345678 ');\r",
													"    pm.expect(jsonResponse.success,\"false\")\r",
													"})\r",
													"\r",
													" //validate response json schema\r",
													"//Using json to json schema converter\r",
													"var schema =   \r",
													" {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"message\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"success\": {\r",
													"      \"type\": \"boolean\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"message\",\r",
													"    \"success\"\r",
													"  ]\r",
													"}\r",
													"//validate schema \r",
													"pm.test(\"Validate schema\", () => {\r",
													"  //using tv4 validatory library and validate method\r",
													" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
													" })\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "77626c73-0804-4cd6-8bc1-67bb39eb4e70",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseURL}}/{{getBatchByProgramId}}/{{Program_Batch_TC_013}}"
									},
									"response": [
										{
											"id": "8b044e6f-6484-493c-b4f1-1fb2516add04",
											"name": "New Request",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Fri, 23 Jun 2023 19:13:05 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
										}
									]
								},
								{
									"name": "Program_Batch_TC_031_Invalid_Base_URL",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
												"exec": [
													"console.log(\"Due to application error displays XML code, response body validation cannot be done\");\r",
													"console.log(\"JSONError: Unexpected token '<' at 1:1<!DOCTYPE html>^\");\r",
													"\r",
													"//validate status code \r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"//validate status message\r",
													"pm.test(\"Status code name has string\", function() {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"\r",
													"//validate response header - Content-type\r",
													"pm.test(\"Content-type is application/json\",function(){\r",
													"     pm.expect(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "04774069-fad9-4b1e-b664-78ac02146b21",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{invalidBaseUrl}}"
									},
									"response": [
										{
											"id": "74e581e4-a455-4024-a015-b4bbd8123e39",
											"name": "New Request",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Fri, 23 Jun 2023 19:13:05 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
										}
									]
								}
							],
							"id": "ed7cbdc7-21df-42a9-b3f7-936595d82ff0"
						}
					],
					"id": "7384b97b-c35e-41d7-b2a3-52f0ee2846a9"
				},
				{
					"name": "POST Batch - Create Batch",
					"item": [
						{
							"name": "Program_Batch_TC_032_Create Batch",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0b597a45-7a08-408b-a45f-2490b3020190",
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate Response body\r",
											"    pm.test(\"Validate Response body\", function() {\r",
											"         \r",
											"        pm.expect(jsonResponse.batchId, pm.environment.get(\"batchId\"));\r",
											"        pm.expect(jsonResponse.batchName,pm.environment.get(\"createbatchNamedata1\"));\r",
											"        pm.expect(jsonResponse.batchName,pm.environment.get(\"createbatchNamedata2\"));\r",
											"        pm.expect(jsonResponse.batchStatus,pm.environment.get(\"createbatchStatusdata1\"));\r",
											"        pm.expect(jsonResponse.batchStatus,pm.environment.get(\"createbatchStatusdata2\"));\r",
											"        pm.expect(jsonResponse.batchDescription, pm.environment.get(\"createbatchDescriptiondata1\"));\r",
											"        pm.expect(jsonResponse.batchNoOfClasses, pm.environment.get(\"createbatchNoOfClassesdata1\"));\r",
											"        pm.expect(jsonResponse.programId, pm.environment.get(\"createprogramIdata1\"));\r",
											"        pm.expect(jsonResponse.programName,pm.environment.get(\"createprogramIddata2\"));\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =  \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"batchName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchNoOfClasses\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"batchName\",\r",
											"    \"batchDescription\",\r",
											"    \"batchStatus\",\r",
											"    \"batchNoOfClasses\",\r",
											"    \"programId\",\r",
											"    \"programName\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse[0],schema))\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "534fb472-3d82-4330-89a5-0f0e64a92471",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n {\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-11\",\r\n  \"batchDescription\": \"This batch is for Postman hackathon\",\r\n  \"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{createBatch}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_033_Create Batch_with_existing_program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0b597a45-7a08-408b-a45f-2490b3020190",
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate Response body\r",
											"    pm.test(\"Validate Response body\", function() {\r",
											"         \r",
											"        pm.expect(jsonResponse.batchId, pm.environment.get(\"batchId\"));\r",
											"        pm.expect(jsonResponse.batchName,pm.environment.get(\"createbatchNamedata1\"));\r",
											"        pm.expect(jsonResponse.batchName,pm.environment.get(\"createbatchNamedata2\"));\r",
											"        pm.expect(jsonResponse.batchStatus,pm.environment.get(\"createbatchStatusdata1\"));\r",
											"        pm.expect(jsonResponse.batchStatus,pm.environment.get(\"createbatchStatusdata2\"));\r",
											"        pm.expect(jsonResponse.batchDescription, pm.environment.get(\"createbatchDescriptiondata1\"));\r",
											"        pm.expect(jsonResponse.batchNoOfClasses, pm.environment.get(\"createbatchNoOfClassesdata1\"));\r",
											"        pm.expect(jsonResponse.programId, pm.environment.get(\"createprogramIdata1\"));\r",
											"        pm.expect(jsonResponse.programName,pm.environment.get(\"createprogramIddata2\"));\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =  \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"batchName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchNoOfClasses\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"batchName\",\r",
											"    \"batchDescription\",\r",
											"    \"batchStatus\",\r",
											"    \"batchNoOfClasses\",\r",
											"    \"programId\",\r",
											"    \"programName\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse[0],schema))\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a8e452fe-0db9-4451-814e-9e88f83a89b1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n {\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-10\",\r\n  \"batchDescription\": \"This batch is for Postman hackathon\",\r\n  \"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{createBatch}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_034_Data_Driven_Testing_Valid_data_from_CSV_file",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7088ba93-39ff-4a69-87b9-d79198aa5f20",
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate Response body\r",
											"\r",
											"\r",
											"        pm.test(\"Validate Response body\", function() {\r",
											"         pm.expect(jsonResponse.data.batchId).to.equal.pm.iterationData.get(\"batchId\");\r",
											"         pm.expect(jsonResponse.data.batchName).to.eql.pm.iterationData.get(\"batchName\");\r",
											"         pm.expect(jsonResponse.data.batchDescription).to.eql.pm.iterationData.get(\"batchDescription\");\r",
											"         pm.expect(jsonResponse.data.batchNoOfClasses).to.eql.pm.iterationData.get(\"batchNoOfClasses\");\r",
											"         pm.expect(jsonResponse.data.programId).to.eql.pm.iterationData.get(\"programId\");\r",
											"         pm.expect(jsonResponse.data.programName).to.eql.pm.iterationData.get(\"programName\");\r",
											"         \r",
											"        }\r",
											"\r",
											"    /*pm.test(\"Validate Response body\", function() {\r",
											"         \r",
											"        pm.expect(jsonResponse.batchId, pm.environment.get(\"batchId\"));\r",
											"        pm.expect(jsonResponse.batchName,pm.environment.get(\"createbatchNamedata1\"));\r",
											"        pm.expect(jsonResponse.batchName,pm.environment.get(\"createbatchNamedata2\"));\r",
											"        pm.expect(jsonResponse.batchStatus,pm.environment.get(\"createbatchStatusdata1\"));\r",
											"        pm.expect(jsonResponse.batchStatus,pm.environment.get(\"createbatchStatusdata2\"));\r",
											"        pm.expect(jsonResponse.batchDescription, pm.environment.get(\"createbatchDescriptiondata1\"));\r",
											"        pm.expect(jsonResponse.batchNoOfClasses, pm.environment.get(\"createbatchNoOfClassesdata1\"));\r",
											"        pm.expect(jsonResponse.programId, pm.environment.get(\"createprogramIdata1\"));\r",
											"        pm.expect(jsonResponse.programName,pm.environment.get(\"createprogramIddata2\"));\r",
											"})*/\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =  \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"batchName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchNoOfClasses\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"batchName\",\r",
											"    \"batchDescription\",\r",
											"    \"batchStatus\",\r",
											"    \"batchNoOfClasses\",\r",
											"    \"programId\",\r",
											"    \"programName\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse[0],schema))\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1114369e-f5a8-4319-8b46-6be4b3d774c6",
										"exec": [
											"//get the 'value' field from the data file for this request run\r",
											"pm.iterationData.get(\"value\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "db84709c-228e-432e-b4c2-38fd80615cf6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n        \"batchName\": \"{{batchName}}\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{programId}}\r\n        \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{createBatch}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_035_Multiple_batch_same_program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "87e92917-b12a-423b-92f4-901bbfb3c08c",
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate Response body\r",
											"    pm.test(\"Validate Response body\", function() {\r",
											"         console.log(\"batchId\");\r",
											"        pm.expect(jsonResponse.batchId, pm.environment.get(\"batchId\"));\r",
											"        pm.expect(jsonResponse.batchName,pm.environment.get(\"createbatchNamedata1\"));\r",
											"        pm.expect(jsonResponse.batchName,pm.environment.get(\"createbatchNamedata2\"));\r",
											"        pm.expect(jsonResponse.batchStatus,pm.environment.get(\"createbatchStatusdata1\"));\r",
											"        pm.expect(jsonResponse.batchStatus,pm.environment.get(\"createbatchStatusdata2\"));\r",
											"        pm.expect(jsonResponse.batchDescription, pm.environment.get(\"createbatchDescriptiondata1\"));\r",
											"        pm.expect(jsonResponse.batchNoOfClasses, pm.environment.get(\"createbatchNoOfClassesdata1\"));\r",
											"        pm.expect(jsonResponse.programId, pm.environment.get(\"createprogramIdata1\"));\r",
											"        pm.expect(jsonResponse.programName,pm.environment.get(\"createprogramIddata2\"));\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =  \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"batchName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchNoOfClasses\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"batchName\",\r",
											"    \"batchDescription\",\r",
											"    \"batchStatus\",\r",
											"    \"batchNoOfClasses\",\r",
											"    \"programId\",\r",
											"    \"programName\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse[7],schema))\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ad8f91c2-d6ea-4335-a717-e6289498b91c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n        \"batchName\": \"{{batchName}}\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{programId}}\r\n        \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{createBatch}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_036_Without_Endpoints",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e938d82b-c7f4-48c1-98e0-42dc4977face",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a33b60d5-772d-4c95-bb42-a939fe63c5a6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": "{{baseURL}}/"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_037_Invalid_Endpoints",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "0e1bb0cf-f84f-4328-890c-9ed9b744051a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": "{{baseURL}}/{{invalidEndpointGetAllBatches}}"
							},
							"response": [
								{
									"id": "c352896f-1e8f-47bc-aac5-a64c484f8673",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_038_Invalid_Request_PUT_GET_DELETE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dab9668c-30f5-4205-8b21-1f21b77d6eb4",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,405);\r",
											"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2c09c454-4bd5-498a-bee7-c355891a9df4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n {\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-10\",\r\n  \"batchDescription\": \"This batch is for Postman hackathon\",\r\n  \"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{createBatch}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_038_Invalid_Request_PUT_GET_DELETE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dab9668c-30f5-4205-8b21-1f21b77d6eb4",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,405);\r",
											"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a2497d29-7578-40dc-b640-e6665289d372",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n {\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-10\",\r\n  \"batchDescription\": \"This batch is for Postman hackathon\",\r\n  \"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{createBatch}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_038_Invalid_Request_PUT_GET_DELETE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dab9668c-30f5-4205-8b21-1f21b77d6eb4",
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"    \r",
											"//validate Response body\r",
											"    pm.test(\"Validate Response body\", function() {\r",
											"         \r",
											"        pm.expect(jsonResponse.batchId, pm.environment.get(\"batchId\"));\r",
											"        pm.expect(jsonResponse.batchName,pm.environment.get(\"batchName\"));\r",
											"        pm.expect(jsonResponse.batchStatus,pm.environment.get(\"batchStatus\"));\r",
											"        pm.expect(jsonResponse.batchDescription, pm.environment.get(\"batchDescription\"));;\r",
											"        pm.expect(jsonResponse.batchNoOfClasses, pm.environment.get(\"batchNoOfClasses\"));;\r",
											"        pm.expect(jsonResponse.programId, pm.environment.get(\"programId\"));;\r",
											"        pm.expect(jsonResponse.programName,pm.environment.get(\"programName\"));;\r",
											"})\r",
											"\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =  \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"batchName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchNoOfClasses\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"batchName\",\r",
											"    \"batchDescription\",\r",
											"    \"batchStatus\",\r",
											"    \"batchNoOfClasses\",\r",
											"    \"programId\",\r",
											"    \"programName\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate Schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema))\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "1a91c1ad-94af-48b2-946c-b418f033c5e6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n {\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-10\",\r\n  \"batchDescription\": \"This batch is for Postman hackathon\",\r\n  \"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{createBatch}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_039_Invalid_Base_URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"console.log(\"Due to application error displays XML code, response body validation cannot be done\");\r",
											"console.log(\"JSONError: Unexpected token '<' at 1:1<!DOCTYPE html>^\");\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.expect(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "68ff7913-5208-4bdf-bf0c-1f26d6b7f91c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": "{{invalidBaseUrl}}"
							},
							"response": [
								{
									"id": "5a3b5fbd-9037-4c7b-9b2d-2224e1217bfe",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_040_Non_Existing_Program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    var environmentVar = pm.variables.get(\"programId\");\r",
											"    \r",
											"   pm.expect(jsonResponse.message,'Program not found with Id :' + environmentVar);\r",
											"    pm.expect(jsonResponse.success,\"false\")\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "37ec453d-6825-4106-b2be-b7fc86585564",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/*{\r\n\r\n        \"batchName\": \"{{batchName}}\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{programId}}\r\n}*/\r\n {\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-1\",\r\n  \"batchDescription\": \"This batch is for Postman hackathon\",\r\n  \"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"programId\": 123456,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}       \r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{createBatch}}"
							},
							"response": [
								{
									"id": "01211edc-ed8b-4c48-bb69-2fd89e9feeec",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_041_Without_Request_body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 415\", function () {\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Unsupported Media Type\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,415);\r",
											"    pm.expect(jsonResponse.error,\"Unsupported Media Type\");\r",
											"})\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema))\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "52efb0ca-3a25-4fe7-9aa9-77240aa89767",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "{{baseURL}}/{{createBatch}}"
							},
							"response": [
								{
									"id": "3b58cbb7-1d2c-4ba6-b3d5-bfee544be29a",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_042_Already_Existing_Program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.message,\"Program \"+ pm.variables.get(\"programID\") +\"with\" + pm.variables.get(\"batchId\")+\"already exists: ; Please give a different batch Name or Choose a different Program\");\r",
											"    pm.expect(jsonResponse.success,\"false\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "bb619a7d-4887-43b9-89b6-73a9340f494f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/*{\r\n\r\n        \"batchName\": \"{{batchName}}\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{programId}}\r\n        \r\n}*/\r\n\r\n{\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100-001\",\r\n  \"batchDescription\": \"This batch is for Postman hackathon\",\r\n  \"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{createBatch}}"
							},
							"response": [
								{
									"id": "3c61376b-ef75-4289-97e0-2dcff7b95d11",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_043_Without_Batch_Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.message,\"Batch Name is mandatory\");\r",
											"    pm.expect(jsonResponse.success,\"false\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "69104b07-1955-4c99-a212-685fb2d9123c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchId\": 0,\r\n  //\"batchName\": \"Jun23-PostWomenTechies-SDET-100-001\",\r\n  \"batchDescription\": \"This batch is for Postman hackathon\",\r\n  \"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{createBatch}}"
							},
							"response": [
								{
									"id": "b6d5bee7-aa1e-4dfc-aab9-adf6a3ee6b7f",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_044_Without_Batch_Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.message,\"Batch status is needed\");\r",
											"    pm.expect(jsonResponse.success,\"false\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "458adfc9-0fa4-4e69-a752-98129e390301",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100-001\",\r\n  \"batchDescription\": \"This batch is for Postman hackathon\",\r\n  //\"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{createBatch}}"
							},
							"response": [
								{
									"id": "a7b3fd27-854e-4e7e-bbc0-7ffc749ef91b",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_045_Without_Program_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.message,\" ProgramId field is needed; It should be a positive number \");\r",
											"    pm.expect(jsonResponse.success,\"false\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "583aa2a5-5000-481f-90b0-92d2244a6b67",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100-001\",\r\n  \"batchDescription\": \"This batch is for Postman hackathon\",\r\n  \"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\": 10,\r\n  //\"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{createBatch}}"
							},
							"response": [
								{
									"id": "f1917477-a10b-4afc-98f3-50517c5b1a8c",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_046_Without_Batch_No_Of_Classes",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.message,\" No of Classes is needed; It should be a positive number \");\r",
											"    pm.expect(jsonResponse.success,\"false\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "90dfe3c1-3422-44a1-bbd3-6aa0ad76a0e5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100-001\",\r\n  \"batchDescription\": \"This batch is for Postman hackathon\",\r\n  \"batchStatus\": \"Active\",\r\n  //\"batchNoOfClasses\": 10,\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{createBatch}}"
							},
							"response": [
								{
									"id": "165d6893-be26-4add-8623-57224978f0f2",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_047_Negative_value_Batch_No_Of_Classes",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.message,\" No of Classes is needed; It should be a positive number \");\r",
											"    pm.expect(jsonResponse.success,\"false\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e109b1c7-d594-464c-8e63-fb3e53031a19",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100-001\",\r\n  \"batchDescription\": \"This batch is for Postman hackathon\",\r\n  \"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\":-1,\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{createBatch}}"
							},
							"response": [
								{
									"id": "db77246e-d1e3-4961-ba1a-0354ce12fbf3",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_048_Batch_No_Of_Classes_as_zero",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.message,\" No of Classes is needed; It should be a positive number \");\r",
											"    pm.expect(jsonResponse.success,\"false\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2d503e7d-cd63-4152-856c-c3b30031aaec",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100-001\",\r\n  \"batchDescription\": \"This batch is for Postman hackathon\",\r\n  \"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\":0,\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{createBatch}}"
							},
							"response": [
								{
									"id": "a302404d-f7a4-4b04-8bde-573700f3e530",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_049_Without_Batch_Description",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate Response body\r",
											"    pm.test(\"Validate Response body\", function() {\r",
											"         \r",
											"        pm.expect(jsonResponse.batchId, pm.environment.get(\"batchId\"));\r",
											"        pm.expect(jsonResponse.batchName,pm.environment.get(\"createbatchNamedata1\"));\r",
											"        pm.expect(jsonResponse.batchName,pm.environment.get(\"createbatchNamedata2\"));\r",
											"        pm.expect(jsonResponse.batchStatus,pm.environment.get(\"createbatchStatusdata1\"));\r",
											"        pm.expect(jsonResponse.batchStatus,pm.environment.get(\"createbatchStatusdata2\"));\r",
											"        pm.expect(jsonResponse.batchDescription, pm.environment.get(\"createbatchDescriptiondata1\"));\r",
											"        pm.expect(jsonResponse.batchNoOfClasses, pm.environment.get(\"createbatchNoOfClassesdata1\"));\r",
											"        pm.expect(jsonResponse.programId, pm.environment.get(\"createprogramIdata1\"));\r",
											"        pm.expect(jsonResponse.programName,pm.environment.get(\"createprogramIddata2\"));\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =  \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"batchName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchNoOfClasses\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"batchName\",\r",
											"    \"batchDescription\",\r",
											"    \"batchStatus\",\r",
											"    \"batchNoOfClasses\",\r",
											"    \"programId\",\r",
											"    \"programName\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema))\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "326c152b-86c3-4d4d-a308-245b9b4b503a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-DA-1\",\r\n  //\"batchDescription\": \" \",\r\n  \"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\":10,\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{createBatch}}"
							},
							"response": [
								{
									"id": "a158dd98-99fd-4956-92bf-863888a28aec",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_050_Program_Id_Invalid_negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "254510f2-b5f4-4223-86ab-6d2fca99a8e9",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.message,\"Program not found with Id : \" + pm.variables.get(\"programID\")+\" \");\r",
											"    pm.expect(jsonResponse.success,\"false\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema))\r",
											" })\r",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e52887a7-b619-4c07-b6ef-95eacb57a926",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \r\n  \"batchName\": \"Jun23-PostWomenTechies1\",\r\n  \"batchDescription\": \"This batch is for Postman hackathon\",\r\n  \"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"programId\": -3168\r\n  \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{createBatch}}"
							},
							"response": [
								{
									"id": "3b627b85-0229-4fc8-9799-a73bf97b4236",
									"name": "Program_Batch_TC_050_Program_Id_Invalid_negative",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \r\n  \"batchName\": \"Jun23-PostWomenTechies1\",\r\n  \"batchDescription\": \"This batch is for Postman hackathon\",\r\n  \"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"programId\": -3168\r\n  \r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/{{createBatch}}"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Tue, 27 Jun 2023 06:46:22 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"message\": \"Program not found with Id : -3168 \",\n    \"success\": false\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_051_Empty_Batch_name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7064fec6-144b-4fbf-944c-a1007b668198",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n        \"batchName\": \"{{batchName}}\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{programId}}\r\n        \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{createBatch}}"
							},
							"response": [
								{
									"id": "0e56a01e-3dae-4eb8-8210-040739ad71ae",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_052_Empty_Batch_status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3d8cd5e7-3c74-4dc5-891b-de33baf47d99",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n        \"batchName\": \"{{batchName}}\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{programId}}\r\n        \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{createBatch}}"
							},
							"response": [
								{
									"id": "7574e342-57fb-4212-b618-437207a5bd7a",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_053_Empty_Batch_Description",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate Response body\r",
											"    pm.test(\"Validate Response body\", function() {\r",
											"         \r",
											"        pm.expect(jsonResponse.batchId, \"batchId\");\r",
											"        pm.expect(jsonResponse.batchName,pm.environment.get(\"createbatchNamedata1\"));\r",
											"        pm.expect(jsonResponse.batchName,pm.environment.get(\"createbatchNamedata2\"));\r",
											"        pm.expect(jsonResponse.batchStatus,pm.environment.get(\"createbatchStatusdata1\"));\r",
											"        pm.expect(jsonResponse.batchStatus,pm.environment.get(\"createbatchStatusdata2\"));\r",
											"        pm.expect(jsonResponse.batchDescription, pm.environment.get(\"createbatchDescriptiondata1\"));\r",
											"        pm.expect(jsonResponse.batchNoOfClasses, pm.environment.get(\"createbatchNoOfClassesdata1\"));\r",
											"        pm.expect(jsonResponse.programId, pm.environment.get(\"createprogramIdata1\"));\r",
											"        pm.expect(jsonResponse.programName,pm.environment.get(\"createprogramIddata2\"));\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =  \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"batchName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchNoOfClasses\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"batchName\",\r",
											"    \"batchDescription\",\r",
											"    \"batchStatus\",\r",
											"    \"batchNoOfClasses\",\r",
											"    \"programId\",\r",
											"    \"programName\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema))\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "133d7995-538b-44fa-a340-90a87895b018",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n        \"batchName\": \"{{batchName}}\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{programId}}\r\n        \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{createBatch}}"
							},
							"response": [
								{
									"id": "0477072d-1f5a-4116-a6f9-2c640394cf07",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_054_Same_batch_multiple_program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17571bda-3a44-4517-9529-b54308f1c591",
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate Response body\r",
											"    pm.test(\"Validate Response body\", function() {\r",
											"         \r",
											"        pm.expect(jsonResponse.batchId, \"batchId\");\r",
											"         pm.expect(jsonResponse.batchName, \"batchName\");\r",
											"          pm.expect(jsonResponse.batchStatus, \"batchStatus\");\r",
											"           pm.expect(jsonResponse.batchDescription, \"batchDescription\");\r",
											"            pm.expect(jsonResponse.batchNoOfClasses, \"batchNoOfClasses\");\r",
											"             pm.expect(jsonResponse.programId, \"programId\");\r",
											"             \r",
											"\r",
											"        /*pm.expect(jsonResponse.batchName,pm.environment.get(\"createbatchNamedata1\"));\r",
											"        pm.expect(jsonResponse.batchName,pm.environment.get(\"createbatchNamedata2\"));\r",
											"        pm.expect(jsonResponse.batchStatus,pm.environment.get(\"createbatchStatusdata1\"));\r",
											"        pm.expect(jsonResponse.batchStatus,pm.environment.get(\"createbatchStatusdata2\"));\r",
											"        pm.expect(jsonResponse.batchDescription, pm.environment.get(\"createbatchDescriptiondata1\"));\r",
											"        pm.expect(jsonResponse.batchNoOfClasses, pm.environment.get(\"createbatchNoOfClassesdata1\"));\r",
											"        pm.expect(jsonResponse.programId, pm.environment.get(\"createprogramIdata1\"));\r",
											"        pm.expect(jsonResponse.programName,pm.environment.get(\"createprogramIddata2\"));*/\r",
											"\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =  \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"batchName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchNoOfClasses\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"batchName\",\r",
											"    \"batchDescription\",\r",
											"    \"batchStatus\",\r",
											"    \"batchNoOfClasses\",\r",
											"    \"programId\",\r",
											"    \"programName\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse[6],schema))\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "936bf30c-a059-42ec-8914-08d5b831d9d4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n        \"batchName\": \"{{batchName}}\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{programId}}\r\n        \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{createBatch}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_055_Invalid_Json_format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eee790c1-e530-4720-935b-1c06cc2df843",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c6395917-9c35-47cf-b3ca-10af260b2212",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n    \r\n    \"batchNamee\": \"Jun23-PostWomenTechies-SDET-100-100\",\r\n    \"batchDescription\": \"This Batch is for Postman Hackathon\",\r\n    \"batchStatus\": \"Active\",\r\n    \"batchNoOfClasses\": 10,\r\n    \"programId\": 3168,\r\n    \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n  }\r\n  ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{createBatch}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_053_Empty_Program_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse[3],schema))\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "79a3a3b0-ea57-4bdb-b897-84a8910d34ff",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n        \"batchName\": \"{{batchName}}\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{programId}}\r\n        \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{createBatch}}"
							},
							"response": [
								{
									"id": "e0e10971-0555-4f53-8fb8-e32272f36172",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						}
					],
					"id": "206b4607-3fa6-40b9-a30a-4ab2a3fb7fec"
				},
				{
					"name": "PUT Batch - Update Batch",
					"item": [
						{
							"name": "Program_Batch_TC_056_Update Batch",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ae77862-191e-4397-851d-dd1813141f98",
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//random batchName serial number generation\r",
											"\r",
											"var random = Math.random().toString(36).substring(2);\r",
											"//batchName = Jun23-EliteForce-SDET-SDET01-001\r",
											"//Jun23-TeamName-ProgramName-BatchName-serialnumber \r",
											"/*var batchDescription = \"This batch is for Postman hackathon update-\"+random;\r",
											"pm.environment.set(\"batchDescription\",batchDescription)*/\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"    \r",
											"//validate Response body\r",
											"    pm.test(\"Validate Response body\", function() {\r",
											"        console.log(jsonResponse.batchId);\r",
											"        console.log(jsonResponse.batchName);\r",
											"        console.log(jsonResponse.batchDescription);\r",
											"        pm.expect(jsonResponse.batchId).to.eql(3130);\r",
											"        pm.expect(jsonResponse.batchName).to.eql(\"Jun23-PostWomenTechies-SDET-100\");\r",
											"        pm.expect(jsonResponse.batchDescription).to.eql(\"This program is for participating in API Hackathon\");\r",
											"        pm.expect(jsonResponse.batchNoOfClasses).to.eql(10);\r",
											"        pm.expect(jsonResponse.programId).to.eql(3168);\r",
											"        pm.expect(jsonResponse.programName).to.eql(\"Jun26-PostWomenTechies-SDET-100\");     \r",
											"})\r",
											"\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =  \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"batchName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchNoOfClasses\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"batchName\",\r",
											"    \"batchDescription\",\r",
											"    \"batchStatus\",\r",
											"    \"batchNoOfClasses\",\r",
											"    \"programId\",\r",
											"    \"programName\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate Schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema))\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b59d6bc6-2a84-4a3b-99f0-460330678116",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_057_Update Multiple Batches",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5aad067e-d9ba-49e5-bee4-22d8020d3880",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "dcef43c8-a952-4eed-8274-a38cb1dc3e5c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n[{\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-10\",\r\n  \"batchDescription\": \"This batch is for Postman hackathon\",\r\n  \"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n},\r\n\r\n {\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-10\",\r\n  \"batchDescription\": \"This batch is for Postman hackathon\",\r\n  \"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"programId\": 3739,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_058_Data_Driven_Testing_Valid_Batches",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "99796661-877e-4b93-af1a-2496d53c15c0",
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//random batchName serial number generation\r",
											"\r",
											"var random = Math.random().toString(36).substring(2);\r",
											"//batchName = Jun23-EliteForce-SDET-SDET01-001\r",
											"//Jun23-TeamName-ProgramName-BatchName-serialnumber \r",
											"/*var batchDescription = \"This batch is for Postman hackathon update-\"+random;\r",
											"pm.environment.set(\"batchDescription\",batchDescription)*/\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"    \r",
											"//validate Response body\r",
											"    pm.test(\"Validate Response body\", function() {\r",
											"        console.log(jsonResponse.batchId);\r",
											"        console.log(jsonResponse.batchName);\r",
											"        console.log(jsonResponse.batchDescription);\r",
											"        pm.expect(jsonResponse.batchId).to.eql(3130);\r",
											"        pm.expect(jsonResponse.batchName).to.eql(\"Jun23-PostWomenTechies-SDET-100\");\r",
											"        pm.expect(jsonResponse.batchDescription).to.eql(\"This program is for participating in API Hackathon\");\r",
											"        pm.expect(jsonResponse.batchNoOfClasses).to.eql(10);\r",
											"        pm.expect(jsonResponse.programId).to.eql(3168);\r",
											"        pm.expect(jsonResponse.programName).to.eql(\"Jun26-PostWomenTechies-SDET-100\");     \r",
											"})\r",
											"\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =  \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"batchName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchNoOfClasses\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"batchName\",\r",
											"    \"batchDescription\",\r",
											"    \"batchStatus\",\r",
											"    \"batchNoOfClasses\",\r",
											"    \"programId\",\r",
											"    \"programName\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate Schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema))\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "9bebc4bd-e5c3-48ad-89dd-89679b5ef479",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"batchId\": {{updateBatchId}},\r\n        \"batchName\": \"{{batchName}}\",\r\n        \"batchDescription\": \"{{batchDescription}}\",\r\n        \"batchStatus\": \"{{batchStatus}}\",\r\n        \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n        \"programId\": {{programId}},\r\n        \"programName\": {{programName}}\r\n        \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_059_Update_Multiple_Batch_for_same_program",
							"id": "eb997484-ed27-4b7b-a48c-06474bf72a40",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_060_Invalid_Batch_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0752eb1d-de80-4151-8c21-edbfcd1e0293",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "eee1b1f6-b63c-4893-8074-31fba66288cd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n  \"batchId\": \"U3130\",\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchDescription\": \"This batch is for Postman hackathon\",\r\n  \"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_061_Non-Existing_Batch_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "77d3d028-f310-4b78-8f1f-546e274064c4",
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//random batchName serial number generation\r",
											"\r",
											"var random = Math.random().toString(36).substring(2);\r",
											"//batchName = Jun23-EliteForce-SDET-SDET01-001\r",
											"//Jun23-TeamName-ProgramName-BatchName-serialnumber \r",
											"/*var batchDescription = \"This batch is for Postman hackathon update-\"+random;\r",
											"pm.environment.set(\"batchDescription\",batchDescription)*/\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"    \r",
											"//validate Response body\r",
											"    pm.test(\"Validate Response body\", function() {\r",
											"        console.log(jsonResponse.batchId);\r",
											"        console.log(jsonResponse.batchName);\r",
											"        console.log(jsonResponse.batchDescription);\r",
											"        pm.expect(jsonResponse.batchId).to.not.eql(123123);\r",
											"        pm.expect(jsonResponse.batchName).to.eql(\"Jun23-PostWomenTechies-SDET-100\");\r",
											"        pm.expect(jsonResponse.batchDescription).to.eql(\"This batch is for Postman hackathon\");\r",
											"        pm.expect(jsonResponse.batchNoOfClasses).to.eql(10);\r",
											"        pm.expect(jsonResponse.programId).to.eql(3168);\r",
											"        pm.expect(jsonResponse.programName).to.eql(\"Jun26-PostWomenTechies-SDET-100\");     \r",
											"})\r",
											"\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =  \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"batchName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchNoOfClasses\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"batchName\",\r",
											"    \"batchDescription\",\r",
											"    \"batchStatus\",\r",
											"    \"batchNoOfClasses\",\r",
											"    \"programId\",\r",
											"    \"programName\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate Schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema))\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "5f446f4e-4dc1-43fd-97e9-aeb7a4e7729d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n  \"batchId\": \"123123\",\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchDescription\": \"This batch is for Postman hackathon\",\r\n  \"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_062_Batch_Id_in_Special_characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c8ba6ae8-0c00-4f7e-9027-8cf0258e6652",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d5214df9-0690-429d-aeb1-e9273ed0cf72",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n  \"batchId\": \"3130#\",\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchDescription\": \"This batch is for Postman hackathon\",\r\n  \"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_063_Batch_Id_in_Alphanumeric",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0026711b-7889-47b7-aa24-e137cd376736",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "fe3a43f3-aecb-4e9c-8b25-d734e260f446",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n  \"batchId\": \"3130\",\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchDescription\": \"This batch is for Postman hackathon\",\r\n  \"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_064_Without_Endpoints",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed48da9d-ec77-4755-b827-362cdb0cf333",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c7d4926a-55ab-4a6f-bc49-47667b55deba",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"url": "{{baseURL}}/"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_065_Invalid_Endpoints",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1dac0b27-eb03-47b5-ba39-01b01b3b9050",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,404);\r",
											"    pm.expect(jsonResponse.error,\"Not Found\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c1535080-33f7-4919-8693-da774007fe47",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n {\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-10\",\r\n  \"batchDescription\": \"This batch is for Postman hackathon\",\r\n  \"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{invalidEndpointGetAllBatches}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_067_Invalid_baseURL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "21bb2abe-1181-4312-a919-f590cde7882f",
										"exec": [
											"console.log(\"Due to application error displays XML code, response body validation cannot be done\");\r",
											"console.log(\"JSONError: Unexpected token '<' at 1:1<!DOCTYPE html>^\");\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.expect(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "86bac963-9032-4915-b7c7-8d12e78ed9a3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"url": "{{invalidBaseUrl}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_068_non_existing_Program_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ac38a94e-19a9-4c7e-ba3d-1642b4f47109",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    var environmentVar = pm.variables.get(\"programId\");\r",
											"    \r",
											"   pm.expect(jsonResponse.message,'Program not found with Id :' + environmentVar);\r",
											"    pm.expect(jsonResponse.success,\"false\")\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "92dbd6e9-c88e-4ee9-820e-7299bf76e8ca",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-10000-002\",\r\n  \"batchDescription\": \"This batch is for Postman hackathon\",\r\n  \"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"programId\": 23568923,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{nonExistingProgramId}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_069_Without_Request_body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ca33b3cc-9065-47b7-9f7c-b92ded09c68d",
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 415\", function () {\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Unsupported Media Type\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,415);\r",
											"    pm.expect(jsonResponse.error,\"Unsupported Media Type\");\r",
											"})\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema))\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "16bf9c65-ba07-4592-a492-366f908f14c6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_070_Without_Batch_name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.message,\"Batch Name is mandatory\");\r",
											"    pm.expect(jsonResponse.success,\"false\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "95f1d813-8965-4410-9ba8-5d91d894ae9a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  //\"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n  \r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": [
								{
									"id": "2e04f928-afbe-4460-9b42-33d660936eae",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_071_Without_Batch_Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ccbf66f5-97e4-4c8f-9ce3-02cf0235d236",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  //\"batchStatus\": \"Active\",\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n  \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": [
								{
									"id": "a2f18d18-dae3-4e2f-98ab-455dbfb33a5a",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_072_Without_Batch_No_Of_Classes",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.message,\" No of Classes is needed; It should be a positive number \");\r",
											"    pm.expect(jsonResponse.success,\"false\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "fb06bd0d-f6e9-468e-8a84-3575c9315924",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  //\"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n  \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": [
								{
									"id": "6d44ffaa-65c8-41d6-bbf6-30cc07197e37",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_073_Without_Program_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.message,\" ProgramId field is needed; It should be a positive number \");\r",
											"    pm.expect(jsonResponse.success,\"false\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "702e901f-1ef4-4f1e-89a1-86face55e085",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  //\"programId\": 3168\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": [
								{
									"id": "dcffe489-a91e-4dd6-a00f-f9d2b2d8591d",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_074_Batch_No_Of_Classes_as_zero",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.message,\"Program not found with Id : \" + pm.variables.get(\"programID\")+\" \");\r",
											"    pm.expect(jsonResponse.success,\"false\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema))\r",
											" })\r",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "49f0ef6b-0a61-4820-9715-35983844ad0b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 0,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100-update\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": [
								{
									"id": "320d5cf2-da82-4280-b7d2-a54fe0dc7c51",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_075_Negative_value_Batch_No_Of_Classes",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d46ae907-eda4-4843-b231-4890b68bef50",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": [
								{
									"id": "5284a2f3-d3ab-47dc-b8d9-933731cc818c",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_076_Without_Batch_Description",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//random batchName serial number generation\r",
											"\r",
											"var random = Math.random().toString(36).substring(2);\r",
											"//batchName = Jun23-EliteForce-SDET-SDET01-001\r",
											"//Jun23-TeamName-ProgramName-BatchName-serialnumber \r",
											"/*var batchDescription = \"This batch is for Postman hackathon update-\"+random;\r",
											"pm.environment.set(\"batchDescription\",batchDescription)*/\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"    \r",
											"//validate Response body\r",
											"    pm.test(\"Validate Response body\", function() {\r",
											"        console.log(jsonResponse.batchId);\r",
											"        console.log(jsonResponse.batchName);\r",
											"        console.log(jsonResponse.batchDescription);\r",
											"        pm.expect(jsonResponse.batchId).to.eql(3130);\r",
											"        pm.expect(jsonResponse.batchName).to.eql(\"Jun23-PostWomenTechies-SDET-100\");\r",
											"        pm.expect(jsonResponse.batchDescription).to.eql(null);\r",
											"        pm.expect(jsonResponse.batchNoOfClasses).to.eql(10);\r",
											"        pm.expect(jsonResponse.programId).to.eql(3168);\r",
											"        pm.expect(jsonResponse.programName).to.eql(\"Jun26-PostWomenTechies-SDET-100\");     \r",
											"})\r",
											"\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =  \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"batchName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchNoOfClasses\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"batchName\",\r",
											"    \"batchDescription\",\r",
											"    \"batchStatus\",\r",
											"    \"batchNoOfClasses\",\r",
											"    \"programId\",\r",
											"    \"programName\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate Schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema))\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "71f30996-5fb8-4986-9788-a4c89730253b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  //\"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n  \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": [
								{
									"id": "45364646-1a13-48ba-9eaf-e071cf2b94ea",
									"name": "Program_Batch_TC_076_Without_Batch_Description",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  //\"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n  \r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Tue, 27 Jun 2023 13:39:14 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"batchId\": 3130,\n    \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\n    \"batchDescription\": null,\n    \"batchStatus\": \"Active\",\n    \"batchNoOfClasses\": 10,\n    \"programId\": 3168,\n    \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_077_Program_Id_as_zero_negative_value_incorrectValue",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.message,\"Program not found with Id : \" + pm.variables.get(\"programID\")+\" \");\r",
											"    pm.expect(jsonResponse.success,\"false\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema))\r",
											" })\r",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "0be77876-219f-4435-a7f1-dac6a9935bb2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": -10,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100-update\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": [
								{
									"id": "c50c5522-0675-4b23-83a2-fdcbe7ce2144",
									"name": "Program_Batch_TC_077_Program_Id_as_zero_negative_value",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": -3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100-update\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Tue, 27 Jun 2023 14:04:07 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"message\": \"Program not found with Id : -3168 \",\n    \"success\": false\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_78_Empty_Batch_name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.message,\"Batch Name is mandatory\");\r",
											"    pm.expect(jsonResponse.success,\"false\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "05a4a7ae-fc6b-43de-a48e-2ddd86a26146",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \" \",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 0,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100-update\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": [
								{
									"id": "a39e321b-eba7-4183-869b-0810d2e74d1e",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_079_Empty_Batch_status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.message,\"Batch Name is mandatory\");\r",
											"    pm.expect(jsonResponse.success,\"false\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "55ccfd8b-81c1-46d2-bab8-c5bb343845fc",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \" \",\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": [
								{
									"id": "c15307bb-d559-4012-bc35-b212acbb5623",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_080_Empty_Batch_Description",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3095c08-4d12-4d60-8de0-7571f671fc51",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.message,\"Batch status is needed\");\r",
											"    pm.expect(jsonResponse.success,\"false\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "35d7e616-06b1-4920-ae39-ae512ac94ac0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \" \",\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": [
								{
									"id": "c6dc7817-a21a-4a91-9dc4-6b28d6a0f978",
									"name": "New Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/batche"
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Fri, 23 Jun 2023 19:13:05 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"timestamp\": \"2023-06-23T19:13:06.410+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/lms/batche\"\n}"
								}
							]
						},
						{
							"name": "Program_Batch_TC_081_Invalid_Json_format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28ac5f49-6981-4be0-b1f1-c80c24f6ee02",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "70748bbf-a3a4-42b6-b629-9a1fe222a702",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n    \r\n    \"batchNamee\": \"Jun23-PostWomenTechies-SDET-100-100\",\r\n    \"batchDescription\": \"This Batch is for Postman Hackathon\",\r\n    \"batchStatus\": \"Active\",\r\n    \"batchNoOfClasses\": 10,\r\n    \"programId\": 3168,\r\n    \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n  }\r\n  ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_082_Multiple_batch_same_program",
							"id": "e30a15b5-de20-45d6-a9ad-5ddd15745dac",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_083_Same_batch_multiple_program",
							"id": "fca2578e-eb85-49eb-a15d-3e860ca86255",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_098_Without_Program_name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0437eddf-5db4-481d-9622-dc9d087bd549",
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//random batchName serial number generation\r",
											"\r",
											"var random = Math.random().toString(36).substring(2);\r",
											"//batchName = Jun23-EliteForce-SDET-SDET01-001\r",
											"//Jun23-TeamName-ProgramName-BatchName-serialnumber \r",
											"/*var batchDescription = \"This batch is for Postman hackathon update-\"+random;\r",
											"pm.environment.set(\"batchDescription\",batchDescription)*/\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"    \r",
											"//validate Response body\r",
											"    pm.test(\"Validate Response body\", function() {\r",
											"        console.log(jsonResponse.batchId);\r",
											"        console.log(jsonResponse.batchName);\r",
											"        console.log(jsonResponse.batchDescription);\r",
											"        pm.expect(jsonResponse.batchId).to.eql(3130);\r",
											"        pm.expect(jsonResponse.batchName).to.eql(\"Jun23-PostWomenTechies-SDET-100\");\r",
											"        pm.expect(jsonResponse.batchDescription).to.eql(\"This program is for participating in API Hackathon\");\r",
											"        pm.expect(jsonResponse.batchNoOfClasses).to.eql(10);\r",
											"        pm.expect(jsonResponse.programId).to.eql(3168);\r",
											"        pm.expect(jsonResponse.programName).to.eql(\"Jun26-PostWomenTechies-SDET-100\");     \r",
											"})\r",
											"\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =  \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"batchName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchNoOfClasses\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"batchName\",\r",
											"    \"batchDescription\",\r",
											"    \"batchStatus\",\r",
											"    \"batchNoOfClasses\",\r",
											"    \"programId\",\r",
											"    \"programName\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate Schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema))\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7627f7f5-45c4-4b66-992f-17a149abf2f5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_099_Program_Batch_TC_098_Update_Program_name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4838321e-2fb4-4853-bd24-38b48cefa08a",
										"exec": [
											"//validate status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//random batchName serial number generation\r",
											"\r",
											"var random = Math.random().toString(36).substring(2);\r",
											"//batchName = Jun23-EliteForce-SDET-SDET01-001\r",
											"//Jun23-TeamName-ProgramName-BatchName-serialnumber \r",
											"/*var batchDescription = \"This batch is for Postman hackathon update-\"+random;\r",
											"pm.environment.set(\"batchDescription\",batchDescription)*/\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"    \r",
											"//validate Response body\r",
											"    pm.test(\"Validate Response body\", function() {\r",
											"        console.log(jsonResponse.batchId);\r",
											"        console.log(jsonResponse.batchName);\r",
											"        console.log(jsonResponse.batchDescription);\r",
											"        console.log(jsonResponse.programName);\r",
											"        pm.expect(jsonResponse.batchId).to.eql(3130);\r",
											"        pm.expect(jsonResponse.batchName).to.eql(\"Jun23-PostWomenTechies-SDET-100\");\r",
											"        pm.expect(jsonResponse.batchDescription).to.eql(\"This program is for participating in API Hackathon\");\r",
											"        pm.expect(jsonResponse.batchNoOfClasses).to.eql(10);\r",
											"        pm.expect(jsonResponse.programId).to.eql(3168);\r",
											"        console.log(jsonResponse.programId)\r",
											"        pm.expect(jsonResponse.programName,\"Jun26-PostWomenTechies-SDET-100-update\").to.not.match;\r",
											"})\r",
											"\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =  \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"batchId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"batchName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchNoOfClasses\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"batchId\",\r",
											"    \"batchName\",\r",
											"    \"batchDescription\",\r",
											"    \"batchStatus\",\r",
											"    \"batchNoOfClasses\",\r",
											"    \"programId\",\r",
											"    \"programName\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate Schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema))\r",
											" })\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "10af7127-00ec-47c1-bca1-9ee661fd568d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\": \"This program is for participating in API Hackathon\",\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-100\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100-update\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_066_Invalid_Request_PUT_GET_DELETE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dab9668c-30f5-4205-8b21-1f21b77d6eb4",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.message,200);\r",
											"    pm.expect(jsonResponse.success,\"Batch with Id-\" + pm.variables.get(\"batchId\") + \" deleted Successfully!\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "291f7a23-48f4-4eff-b074-63ea677b762e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n {\r\n  \"batchId\": 0,\r\n  \"batchName\": \"Jun23-PostWomenTechies-SDET-10\",\r\n  \"batchDescription\": \"This batch is for Postman hackathon\",\r\n  \"batchStatus\": \"Active\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"programId\": 3168,\r\n  \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{invalidDelRequestBatch_Id}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_066_Invalid_Request_GET_POST",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "812f24b7-9300-4f7c-ae31-76ff48125264",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,405);\r",
											"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "95a4764e-6d01-4e41-a902-269725ab6912",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n    \r\n    \"batchNamee\": \"Jun23-PostWomenTechies-SDET-100-100\",\r\n    \"batchDescription\": \"This Batch is for Postman Hackathon\",\r\n    \"batchStatus\": \"Active\",\r\n    \"batchNoOfClasses\": 10,\r\n    \"programId\": 3168,\r\n    \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_066_Invalid_Request_GET_POST Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e8a9a188-417b-4a41-91f3-630d69993e85",
										"exec": [
											"//validate status code \r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,405);\r",
											"    pm.expect(jsonResponse.error,\"Method Not Allowed\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "23e9011b-a67f-4e63-8d65-e136e8a01b67",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n    \r\n    \"batchNamee\": \"Jun23-PostWomenTechies-SDET-100-100\",\r\n    \"batchDescription\": \"This Batch is for Postman Hackathon\",\r\n    \"batchStatus\": \"Active\",\r\n    \"batchNoOfClasses\": 10,\r\n    \"programId\": 3168,\r\n    \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_081_Invalid_Json_format Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28ac5f49-6981-4be0-b1f1-c80c24f6ee02",
										"exec": [
											"\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"//Get the response result\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"//validate response body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(jsonResponse.status,400);\r",
											"    pm.expect(jsonResponse.error,\"Bad Request\");\r",
											"})\r",
											"\r",
											" //validate response json schema\r",
											"//Using json to json schema converter\r",
											"var schema =   \r",
											" {\r",
											"     \r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"//validate schema \r",
											"pm.test(\"Validate schema\", () => {\r",
											"  //using tv4 validatory library and validate method\r",
											" pm.expect(tv4.validate(jsonResponse,schema)).to.be.true\r",
											" })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "4b06be6c-24fc-4f72-aad4-11d49d089323",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n    \r\n    \"batchNamee\": \"Jun23-PostWomenTechies-SDET-100-100\",\r\n    \"batchDescription\": \"This Batch is for Postman Hackathon\",\r\n    \"batchStatus\": \"Active\",\r\n    \"batchNoOfClasses\": 10,\r\n    \"programId\": 3168,\r\n    \"programName\": \"Jun26-PostWomenTechies-SDET-100\"\r\n  }\r\n  ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateBatch}}/{{updateBatchId}}"
							},
							"response": []
						}
					],
					"id": "0e1b252c-9817-40e4-8f1f-bfbcf83912d8"
				},
				{
					"name": "DELETE Batch",
					"item": [
						{
							"name": "Program_Batch_TC_084_Delete Batch",
							"id": "6c821924-58c5-4cd7-820f-e09390604b8e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": []
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_85_Delete Multiple Batches",
							"id": "c7e8d322-d163-45ed-8ab5-45cae0dcf338",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": []
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_086_Data_Driven_Testing_ Multiple Batches",
							"id": "7c54e59a-5b9a-4742-b837-cba3ffcfbf02",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": []
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_087_Multiple_Batches_same_Program",
							"id": "57906b35-8d12-48ef-bc44-710d5c1fc004",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": []
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_088_Invalid_Batch_Id",
							"id": "5d879718-2319-496d-ba53-e329644b431b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": []
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_089_Non_Existing_Batch_Id",
							"id": "be97324e-5e6c-43eb-9be8-a99908acfc77",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": []
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_090_Already_Deleted_Batch_Id",
							"id": "b18e77bc-bf1c-42ea-9494-4cbe92a14ccf",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": []
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_091_Batch_Id_in_Special_characters",
							"id": "cfa4cab5-7c7a-4b3a-ad94-00709d83e78b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": []
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_092_Batch_Id_in_Alphanumeric",
							"id": "5e7099e9-9182-43c5-9062-6c414e310b07",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": []
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_093_Without_Endpoints",
							"id": "fdb5d7e7-2bad-4d70-8a9e-b08bf11c65c0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": []
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_094_Invalid_Endpoints",
							"id": "7de66250-ba4a-4859-b5d3-6aa373c74e1b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": []
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_067_Without_endpoint_only_Batch_Id",
							"id": "9301ed13-ad0f-4c0d-a0a7-603e8e087f4f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": []
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_096_Invalid_Request_GET_POST_PUT",
							"id": "151bd855-d04d-480d-8773-d343663182e6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": []
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_097_Invalid_Endpoints",
							"id": "a13c25b9-c0fa-4e92-a11e-cebda304b099",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": []
							},
							"response": []
						},
						{
							"name": "Program_Batch_TC_098_Invalid_baseURL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "21bb2abe-1181-4312-a919-f590cde7882f",
										"exec": [
											"console.log(\"Due to application error displays XML code, response body validation cannot be done\");\r",
											"console.log(\"JSONError: Unexpected token '<' at 1:1<!DOCTYPE html>^\");\r",
											"\r",
											"//validate status code \r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validate status message\r",
											"pm.test(\"Status code name has string\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//validate response header - Content-type\r",
											"pm.test(\"Content-type is application/json\",function(){\r",
											"     pm.expect(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "0465f663-bc63-4463-855a-eb9f90efa86d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{invalidBaseUrl}}"
							},
							"response": []
						}
					],
					"id": "ca04cf5c-2845-4d02-9588-a6a01e585727"
				},
				{
					"name": "One single data flow - check",
					"id": "4e808934-c400-44d4-91b1-7819e9837882",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n        \"programName\": \"{{batchName}}\",\r\n        \"programDescription\": \"{{batchDescription}}\",\r\n        \"programStatus\": \"{{batchStatus}}\"\r\n        \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/{{createProgram}}"
					},
					"response": []
				}
			],
			"id": "f417f1a3-3782-43f5-b3cb-1734feeaac38"
		},
		{
			"name": "User Module",
			"item": [
				{
					"name": "Get Users",
					"item": [
						{
							"name": "TC_Get All users",
							"id": "09418cee-59d3-4c0b-bcd0-3711116cb727",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}{{GetAllUsers}}"
							},
							"response": []
						},
						{
							"name": "Get User Info by userId",
							"id": "065e9a5d-5acb-4187-ad16-3cea7a81a7ce",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/{{GetUserWithValidUserId}}",
								"description": "Get User info by userId"
							},
							"response": []
						},
						{
							"name": "Get all users with roles",
							"id": "b8b7f922-a65a-4002-b119-189d7e9841fb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "{{baseURL}}/{{GetUsersByRoles}}"
							},
							"response": []
						},
						{
							"name": "Bug-Get Alll staff",
							"id": "a765ca13-6868-468c-8a06-158e1f4a053e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/{{GetAllStaff}}"
							},
							"response": []
						},
						{
							"name": "Get All users with invalid endpoint",
							"id": "4d1c5b17-f8c3-4754-9956-48f95c9bd2e8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/users/user"
							},
							"response": []
						},
						{
							"name": "Get userInfo with invalid userId",
							"id": "d4528806-7666-4589-9536-af8d9cd4c191",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/{{GetUserWIthInvalidUserId}}"
							},
							"response": []
						},
						{
							"name": "Get All Staff with invalid endpoint",
							"id": "e667bc36-0866-4c36-8016-4f95c4ce239d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/users/user/getAllStaf"
							},
							"response": []
						}
					],
					"id": "eb03416f-8c81-4e1a-96b1-b8becd512997"
				},
				{
					"name": "Put Request",
					"item": [
						{
							"name": "update user with correct field",
							"id": "5fbf3023-ab67-4bfc-a7f1-8bc1d3629d7e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"userId\": \"U19\",\r\n        \"userFirstName\": \"NewRakesh\",\r\n        \"userLastName\": \"NewSharma\",\r\n        \"userMiddleName\": \"\",\r\n        \"userPhoneNumber\": 5555666640,\r\n        \"userLocation\": \"India\",\r\n        \"userTimeZone\": \"PST\",\r\n        \"userLinkedinUrl\": \"www.linkedin.com/Rakesh1234\",\r\n        \"userEduUg\": \"mca\",\r\n        \"userEduPg\": \"mba\",\r\n        \"userComments\": \"creating new user with multiple role \",\r\n        \"userVisaStatus\": \"NA\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{updateUserCorrectFields}}"
							},
							"response": []
						},
						{
							"name": "Update user with invalid visa status",
							"id": "01776fe7-2118-41ba-9384-6f596c8fd4b2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n        \"userId\": \"U19\",\r\n        \"userFirstName\": \"NewRakesh\",\r\n        \"userLastName\": \"NewSharma\",\r\n        \"userMiddleName\": \"\",\r\n        \"userPhoneNumber\": 5555666640,\r\n        \"userLocation\": \"India\",\r\n        \"userTimeZone\": \"PST\",\r\n        \"userLinkedinUrl\": \"www.linkedin.com/Rakesh1234\",\r\n        \"userEduUg\": \"mca\",\r\n        \"userEduPg\": \"mba\",\r\n        \"userComments\": \"creating new user with multiple role \",\r\n        \"userVisaStatus\": \"L2\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/users/users/U19"
							},
							"response": []
						},
						{
							"name": "Update user without FirstName",
							"id": "078c9360-4591-4e9f-aa46-51631204c191",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n        \"userId\": \"U21\",\r\n        \"userLastName\": \"NewSharma\",\r\n        \"userMiddleName\": \"\",\r\n        \"userPhoneNumber\": 5555666640,\r\n        \"userLocation\": \"India\",\r\n        \"userTimeZone\": \"PST\",\r\n        \"userLinkedinUrl\": \"www.linkedin.com/Rakesh1234\",\r\n        \"userEduUg\": \"mca\",\r\n        \"userEduPg\": \"mba\",\r\n        \"userComments\": \"creating new user with multiple role \",\r\n        \"userVisaStatus\": \"NA\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/users/users/U21"
							},
							"response": []
						},
						{
							"name": "Update user role status with correct userID",
							"id": "223b4c82-2205-4393-a39f-38f0f25dcee1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"roleId\": \"R02\",\r\n  \"userRoleStatus\": \"Not Active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/users/users/roleStatus/U24"
							},
							"response": []
						},
						{
							"name": "Update user role status with incorrect userId",
							"id": "d628c3c8-2798-48be-bc22-187e446a180a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"roleId\": \"R02\",\r\n  \"userRoleStatus\": \"Active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/users/users/roleStatus/U20"
							},
							"response": []
						},
						{
							"name": "Update user role program batch status with incorrect detail",
							"id": "91300943-2761-4b12-826b-27b14aec40b9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programId\": 1,\r\n  \"roleId\": \"R03\",\r\n  \"userId\": \"U21\",\r\n  \"userRoleProgramBatches\": [\r\n    {\r\n      \"batchId\": 1,\r\n      \"userRoleProgramBatchStatus\": \"Active\"\r\n    }\r\n  ]\r\n  }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/users/users/roleProgramBatchStatus/U21"
							},
							"response": []
						},
						{
							"name": "Update user with invalid timezone",
							"id": "dfde38fd-c71a-433e-9363-42164e7e2591",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n        \"userId\": \"U1254\",\r\n        \"userFirstName\": \"API trackers 001\",\r\n        \"userLastName\": \"bhatt\",\r\n        \"userPhoneNumber\": 909499494,\r\n        \"userLocation\": null,\r\n        \"userTimeZone\": \"PDT\",\r\n        \"userLinkedinUrl\": null,\r\n        \"userEduUg\": null,\r\n        \"userEduPg\": null,\r\n        \"userVisaStatus\": \"H4\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}{{userEndpoint}}/U1254"
							},
							"response": []
						},
						{
							"name": "Update user with empty first name",
							"id": "7226df3f-7ed9-4f95-80f2-7d29f294aa12",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"userId\": \"U1254\",\r\n        \"userFirstName\": \"\",\r\n        \"userLastName\": \"bhatt\",\r\n        \"userPhoneNumber\": 909499494,\r\n        \"userLocation\": null,\r\n        \"userTimeZone\": \"PST\",\r\n        \"userLinkedinUrl\": null,\r\n        \"userEduUg\": null,\r\n        \"userEduPg\": null,\r\n        \"userVisaStatus\": \"H4\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}{{userEndpoint}}/U1254"
							},
							"response": []
						},
						{
							"name": "Update user with null Last Name",
							"id": "bed661ac-9bac-491f-84d9-07be00ecf808",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"userId\": \"U1254\",\r\n        \"userFirstName\": \"API trackers 001\",\r\n        \"userLastName\": null,\r\n        \"userPhoneNumber\": 909499494,\r\n        \"userLocation\": null,\r\n        \"userTimeZone\": \"PDT\",\r\n        \"userLinkedinUrl\": null,\r\n        \"userEduUg\": null,\r\n        \"userEduPg\": null,\r\n        \"userVisaStatus\": \"H4\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}{{userEndpoint}}/U1254"
							},
							"response": []
						}
					],
					"id": "6c54ddef-9459-4a14-9f82-4b6dd4ce6f2c"
				},
				{
					"name": "Delete Request",
					"item": [
						{
							"name": "Delete Student user valid userId",
							"id": "14b0b7e4-a4ca-4a2e-be29-5c88ca3014df",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/users/users/U19"
							},
							"response": []
						},
						{
							"name": "Delete Admin user valid userId",
							"id": "3477f7f8-03e1-4674-8861-d76301dcf426",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/users/users/U958"
							},
							"response": []
						},
						{
							"name": "Delete Staff user valid userId",
							"id": "cb56ccea-3bc9-427e-9477-34cf54be1e41",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/users/users/U959"
							},
							"response": []
						},
						{
							"name": "Delete user when userId is invalid",
							"id": "0156b43e-6226-435c-b827-81ca20fa07a4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/users/users/U0"
							},
							"response": []
						},
						{
							"name": "{{baseURL}}/{{GetAllUsers}}/U998",
							"id": "76052771-3bdf-488a-8685-c20953b2ba8a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{baseURL}}/{{GetAllUsers}}/U998"
							},
							"response": []
						}
					],
					"id": "19fcc1bb-2729-429b-a83c-6535e6eaf186"
				},
				{
					"name": "Post Request",
					"item": [
						{
							"name": "Create a student user with unique ph,pst time and Visa status",
							"id": "28bb8460-5f33-492e-a769-5a7a6fa50e5a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"userComments\": \"string\",\r\n\"userEduPg\": \"BE\",\r\n\"userEduUg\": \"MCA\",\r\n\"userFirstName\": \"Krish-SDET-280\",\r\n\"userLastName\": \"William-SDET-280\",\r\n\"userLinkedinUrl\": \"www.linkedin.com/Krish002\",\r\n\"userLocation\": \"string\",\r\n\"userMiddleName\": \"string\",\r\n\"userPhoneNumber\": 3689345664281,\r\n\"userRoleMaps\": [\r\n{\r\n\"roleId\": \"R03\",\r\n\"userRoleStatus\": \"ROLE_STUDENT\"\r\n}\r\n],\r\n\"userTimeZone\": \"PST\",\r\n\"userVisaStatus\": \"Not-Specified\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/users/users/roleStatus"
							},
							"response": []
						},
						{
							"name": "Create a Admin user with unique ph, mst and NA visa status",
							"id": "047da6e2-4c81-41cc-8ee3-b0f9e083fd41",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"userComments\": \"string\",\r\n\"userEduPg\": \"BA\",\r\n\"userEduUg\": \"MCA\",\r\n\"userFirstName\": \"Krishna-SDET-280\",\r\n\"userLastName\": \"William-SDET-280\",\r\n\"userLinkedinUrl\": \"www.linkedin.com/Krishna002\",\r\n\"userLocation\": \"string\",\r\n\"userMiddleName\": \"string\",\r\n\"userPhoneNumber\": 3689345664283,\r\n\"userRoleMaps\": [\r\n{\r\n\"roleId\": \"R01\",\r\n\"userRoleStatus\": \"ROLE_ADMIN\"\r\n}\r\n],\r\n\"userTimeZone\": \"MST\",\r\n\"userVisaStatus\": \"NA\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/users/users/roleStatus"
							},
							"response": []
						},
						{
							"name": "Create Staff user with unique ph,cst and GC-EAD",
							"id": "491d4dc2-f9f1-4dec-a84e-ad7471e8484d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"userComments\": \"string\",\r\n\"userEduPg\": \"MA\",\r\n\"userEduUg\": \"MCA\",\r\n\"userFirstName\": \"John-SDET-281\",\r\n\"userLastName\": \"DOe-SDET-281\",\r\n\"userLinkedinUrl\": \"www.linkedin.com/John002\",\r\n\"userLocation\": \"string\",\r\n\"userMiddleName\": \"string\",\r\n\"userPhoneNumber\": 3689345664288,\r\n\"userRoleMaps\": [\r\n{\r\n\"roleId\": \"R02\",\r\n\"userRoleStatus\": \"ROLE_STAFF\"\r\n}\r\n],\r\n\"userTimeZone\": \"CST\",\r\n\"userVisaStatus\": \"GC-EAD\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/users/users/roleStatus"
							},
							"response": []
						},
						{
							"name": "Create student user with existing phone number",
							"id": "346eb36f-cb11-406b-a569-f0d919c05efc",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"userComments\": \"string\",\r\n\"userEduPg\": \"BE\",\r\n\"userEduUg\": \"MCA\",\r\n\"userFirstName\": \"KrishNew-SDET-280\",\r\n\"userLastName\": \"WilliamNew-SDET-280\",\r\n\"userLinkedinUrl\": \"www.linkedin.com/KrishNew002\",\r\n\"userLocation\": \"string\",\r\n\"userMiddleName\": \"string\",\r\n\"userPhoneNumber\": 3689345664281,\r\n\"userRoleMaps\": [\r\n{\r\n\"roleId\": \"R03\",\r\n\"userRoleStatus\": \"ROLE_STUDENT\"\r\n}\r\n],\r\n\"userTimeZone\": \"PST\",\r\n\"userVisaStatus\": \"Not-Specified\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}{{CreateUser}}"
							},
							"response": []
						},
						{
							"name": "Create Admin user with existing phone number",
							"id": "f30cf1ef-56d2-47cd-b6e9-5110bf50e064",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"userComments\": \"string\",\r\n\"userEduPg\": \"B.Com\",\r\n\"userEduUg\": \"MCA\",\r\n\"userFirstName\": \"KrishnaNew-SDET-282\",\r\n\"userLastName\": \"WilliamNew-SDET-282\",\r\n\"userLinkedinUrl\": \"www.linkedin.com/KrishnaNew002\",\r\n\"userLocation\": \"string\",\r\n\"userMiddleName\": \"string\",\r\n\"userPhoneNumber\": 3689345664283,\r\n\"userRoleMaps\": [\r\n{\r\n\"roleId\": \"R01\",\r\n\"userRoleStatus\": \"ROLE_ADMIN\"\r\n}\r\n],\r\n\"userTimeZone\": \"MST\",\r\n\"userVisaStatus\": \"NA\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}{{CreateUser}}"
							},
							"response": []
						},
						{
							"name": "Create staff user with existing phone number",
							"id": "af69bc3c-0fe5-4013-98f3-6a12fd8741cf",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"userComments\":\"string\",\r\n\"userEduPg\": \"MA\",\r\n\"userEduUg\": \"MCA\",\r\n\"userFirstName\": \"John-SDET-285\",\r\n\"userLastName\": \"DOe-SDET-285\",\r\n\"userLinkedinUrl\": \"www.linkedin.com/John285002\",\r\n\"userLocation\": \"string\",\r\n\"userMiddleName\": \"string\",\r\n\"userPhoneNumber\": 3689345664288,\r\n\"userRoleMaps\": [\r\n{\r\n\"roleId\": \"R02\",\r\n\"userRoleStatus\": \"ROLE_STAFF\"\r\n}\r\n],\r\n\"userTimeZone\": \"CST\",\r\n\"userVisaStatus\": \"GC-EAD\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}{{CreateUser}}"
							},
							"response": []
						},
						{
							"name": "Negative-Invalid Visa Status",
							"id": "270a57ef-612b-4afb-9052-221f4bcd77ce",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"userComments\":\"string\",\r\n\"userEduPg\": \"MA\",\r\n\"userEduUg\": \"MCA\",\r\n\"userFirstName\": \"Test-SDET-100\",\r\n\"userLastName\": \"User-SDET-100\",\r\n\"userLinkedinUrl\": \"www.linkedin.com/Test285002\",\r\n\"userLocation\": \"string\",\r\n\"userMiddleName\": \"string\",\r\n\"userPhoneNumber\":{{$randomInt}},\r\n\"userRoleMaps\": [\r\n{\r\n\"roleId\": \"R03\",\r\n\"userRoleStatus\": \"ROLE_STUDENT\"\r\n}\r\n],\r\n\"userTimeZone\": \"PST\",\r\n\"userVisaStatus\": \"L2\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}{{CreateUser}}"
							},
							"response": []
						},
						{
							"name": "Negative-Invalid Time Zone",
							"id": "9d837416-13ce-453b-99e0-2fe20cdb94c4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"userComments\":\"string\",\r\n\"userEduPg\": \"BBA\",\r\n\"userEduUg\": \"MCA\",\r\n\"userFirstName\": \"Test2-SDET-100\",\r\n\"userLastName\": \"User2-SDET-100\",\r\n\"userLinkedinUrl\": \"www.linkedin.com/Test2285002\",\r\n\"userLocation\": \"string\",\r\n\"userMiddleName\": \"string\",\r\n\"userPhoneNumber\":{{$randomInt}},\r\n\"userRoleMaps\": [\r\n{\r\n\"roleId\": \"R03\",\r\n\"userRoleStatus\": \"ROLE_STUDENT\"\r\n}\r\n],\r\n\"userTimeZone\": \"PDT\",\r\n\"userVisaStatus\": \"H1B\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}{{CreateUser}}"
							},
							"response": []
						},
						{
							"name": "Negative-missing Phone Number",
							"id": "596f06cf-3be6-427d-8698-1598c5fc251d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"userComments\":\"string\",\r\n\"userEduPg\": \"BBA\",\r\n\"userEduUg\": \"MCA\",\r\n\"userFirstName\": \"Test3-SDET-100\",\r\n\"userLastName\": \"User3-SDET-100\",\r\n\"userLinkedinUrl\": \"www.linkedin.com/Test32285002\",\r\n\"userLocation\": \"string\",\r\n\"userMiddleName\": \"string\",\r\n\"userRoleMaps\": [\r\n{\r\n\"roleId\": \"R02\",\r\n\"userRoleStatus\": \"ROLE_STAFF\"\r\n}\r\n],\r\n\"userTimeZone\": \"PDT\",\r\n\"userVisaStatus\": \"H1B\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}{{CreateUser}}"
							},
							"response": []
						},
						{
							"name": "Negative-missing Roll Id",
							"id": "c0819dcc-a2de-4510-bdec-fd2e364f1efc",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"userComments\":\"string\",\r\n\"userEduPg\": \"BBA\",\r\n\"userEduUg\": \"MCA\",\r\n\"userFirstName\": \"Test3-SDET-100\",\r\n\"userLastName\": \"User3-SDET-100\",\r\n\"userLinkedinUrl\": \"www.linkedin.com/Test32285002\",\r\n\"userLocation\": \"string\",\r\n\"userMiddleName\": \"string\",\r\n\"userPhoneNumber\": {{$randomInt}},\r\n\"userRoleMaps\": [\r\n{\r\n\"userRoleStatus\": \"ROLE_STUDENT\"\r\n}\r\n],\r\n\"userTimeZone\": \"PST\",\r\n\"userVisaStatus\": \"H1B\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}{{CreateUser}}"
							},
							"response": []
						},
						{
							"name": "Negative-missing Last Name",
							"id": "36c9740d-46ea-4007-94dc-25c720c1b8b7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"userComments\":\"string\",\r\n\"userEduPg\": \"BBA\",\r\n\"userEduUg\": \"MCA\",\r\n\"userFirstName\": \"Test3-SDET-100\",\r\n\"userLinkedinUrl\": \"www.linkedin.com/Test32285002\",\r\n\"userLocation\": \"string\",\r\n\"userMiddleName\": \"string\",\r\n\"userPhoneNumber\": {{$randomInt}},\r\n\"userRoleMaps\": [\r\n{\r\n\"roleId\": \"R01\",\r\n\"userRoleStatus\": \"ROLE_ADMIN\"\r\n}\r\n],\r\n\"userTimeZone\": \"PST\",\r\n\"userVisaStatus\": \"H1B\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}{{CreateUser}}"
							},
							"response": []
						},
						{
							"name": "Negative-missing Role Status",
							"id": "dfc89918-6ee3-479e-b9a0-640fc632265a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"userComments\": \"string\",\r\n\"userEduPg\": \"BE\",\r\n\"userEduUg\": \"MCA\",\r\n\"userFirstName\": \"Krish-SDET-280\",\r\n\"userLastName\": \"William-SDET-280\",\r\n\"userLinkedinUrl\": \"www.linkedin.com/Krish002\",\r\n\"userLocation\": \"string\",\r\n\"userMiddleName\": \"string\",\r\n\"userPhoneNumber\": 3689345664281,\r\n\"userRoleMaps\": [\r\n{\r\n\"roleId\": \"R03\"\r\n}\r\n],\r\n\"userTimeZone\": \"PST\",\r\n\"userVisaStatus\": \"Not-Specified\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}{{CreateUser}}"
							},
							"response": []
						},
						{
							"name": "Negative-missing FirstName",
							"id": "4248504c-45bf-49ff-83ea-bce4cc582957",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"userComments\": \"string\",\r\n\"userEduPg\": \"BE\",\r\n\"userEduUg\": \"MCA\",\r\n\"userLastName\": \"William-SDET-280\",\r\n\"userLinkedinUrl\": \"www.linkedin.com/Krish002\",\r\n\"userLocation\": \"string\",\r\n\"userMiddleName\": \"string\",\r\n\"userPhoneNumber\": 3689345664281,\r\n\"userRoleMaps\": [\r\n{\r\n\"roleId\": \"R01\",\r\n\"userRoleStatus\": \"ROLE_ADMIN\"\r\n}\r\n],\r\n\"userTimeZone\": \"PST\",\r\n\"userVisaStatus\": \"Not-Specified\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}{{CreateUser}}"
							},
							"response": []
						}
					],
					"id": "9481c5bc-9109-4c0d-b4aa-81b90934c4ea"
				}
			],
			"id": "dd6b2c20-ca9d-463c-b3e6-cb82aa3c63ee"
		},
		{
			"name": "Assignment_Module",
			"item": [
				{
					"name": "GET_All_Assignments",
					"item": [
						{
							"name": "Assignment_TC_001_Valid_Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1fed7802-1e13-4568-ba91-a9994c0b5cce",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validating the data type of the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data type of the response body\",() => {\r",
											"    pm.expect(jsonData[2].assignmentDescription).to.be.a(\"string\");\r",
											"    pm.expect(jsonData[2].assignmentId).to.be.a(\"number\");\r",
											"    pm.expect(jsonData[2].assignmentName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData[2].batchId).to.be.a(\"number\");\r",
											"    pm.expect(jsonData[2].comments).to.be.a(\"string\");\r",
											"    pm.expect(jsonData[2].createdBy).to.be.a(\"string\");\r",
											"    pm.expect(jsonData[2].dueDate).to.be.a(\"string\");\r",
											"    pm.expect(jsonData[2].graderId).to.be.a(\"string\");\r",
											"    pm.expect(jsonData[2].pathAttachment1).to.be.a(\"string\");\r",
											"    pm.expect(jsonData[2].pathAttachment2).to.be.a(\"string\");\r",
											"    pm.expect(jsonData[2].pathAttachment3).to.be.a(\"string\");\r",
											"    pm.expect(jsonData[2].pathAttachment4).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"//validating the JSON schema\r",
											"var schema = \r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"assignmentId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"assignmentName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"assignmentDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"comments\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"dueDate\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment1\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment2\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment3\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment4\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment5\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"createdBy\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"graderId\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"assignmentId\",\r",
											"    \"assignmentName\",\r",
											"    \"assignmentDescription\",\r",
											"    \"comments\",\r",
											"    \"dueDate\",\r",
											"    \"pathAttachment1\",\r",
											"    \"pathAttachment2\",\r",
											"    \"pathAttachment3\",\r",
											"    \"pathAttachment4\",\r",
											"    \"pathAttachment5\",\r",
											"    \"batchId\",\r",
											"    \"createdBy\",\r",
											"    \"graderId\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData[2],schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "5facddf5-21bc-4107-9254-93139f7e97eb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_002_Invalid_Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25128c1a-a432-4e35-b68a-99f728836fe6",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the data type of the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.status).to.eql(404);\r",
											"    pm.expect(jsonData.error).to.eql(\"Not Found\");\r",
											"    \r",
											"});\r",
											"\r",
											"//validating the JSON schema\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "672f0c4d-25e8-4533-9cdb-5d0f158d0bb6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/{{invalid_endpoint_1}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_003_Without_Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d047211b-c4e5-4d7d-8e05-06426e6bdb93",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the data type of the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.status).to.eql(404);\r",
											"    pm.expect(jsonData.error).to.eql(\"Not Found\");\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"//validating the JSON schema\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c8373750-f31d-42cc-871a-3d5c592b1076",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_004_Invalid_Baseurl",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9017fc16-f6da-4a63-8d33-961bff8a0985",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/html;charset=utf-8');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f655a365-f2dd-4dec-b39d-104811574ebf",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{invalid_baseURL}}/{{Assgn_endpoint_1}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_005_Invalid_Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6aa8ae7a-4b1d-40c1-806a-a102549e98f8",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "476160ea-a6b2-40b8-96f8-30196949e698",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}"
							},
							"response": []
						}
					],
					"id": "058d3919-e5d8-4c06-8b36-059103ea6a7c"
				},
				{
					"name": "GET_By_ID",
					"item": [
						{
							"name": "Assignment_TC_006_Valid_Inputs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "372b9568-d634-43a1-a402-a5917df633ef",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validating the data type of the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data type of the response body\",() => {\r",
											"    pm.expect(jsonData.assignmentDescription).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.assignmentId).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.assignmentName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.batchId).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.comments).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.createdBy).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.dueDate).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.graderId).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.pathAttachment1).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.pathAttachment2).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.pathAttachment3).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.pathAttachment4).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the JSON schema\r",
											"var schema = \r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"assignmentId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"assignmentName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"assignmentDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"comments\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"dueDate\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment1\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment2\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment3\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment4\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment5\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"createdBy\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"graderId\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"assignmentId\",\r",
											"    \"assignmentName\",\r",
											"    \"assignmentDescription\",\r",
											"    \"comments\",\r",
											"    \"dueDate\",\r",
											"    \"pathAttachment1\",\r",
											"    \"pathAttachment2\",\r",
											"    \"pathAttachment3\",\r",
											"    \"pathAttachment4\",\r",
											"    \"pathAttachment5\",\r",
											"    \"batchId\",\r",
											"    \"createdBy\",\r",
											"    \"graderId\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "0ce94d9d-fb68-4079-8dbb-b7706e7a0a6c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}/{{Assign_assignmentId}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_007_Invalid_Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22e62527-5fa6-4cea-b849-95d33a34475e",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the data type of the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.status).to.eql(404);\r",
											"    pm.expect(jsonData.error).to.eql(\"Not Found\");\r",
											"    \r",
											"});\r",
											"\r",
											"//validating the JSON schema\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "9e3ba093-7617-4ddf-b95a-fabc477adb2c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/{{invalid_endpoint_1}}/{{Assign_assignmentId}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_008_Invalid_AssignmentID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8bffb5b2-7b33-436d-8484-3aac53230d11",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.message).to.eql(\"Assignment not found with Id : 999999 \");\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c960604d-2175-40ed-9699-31db5574b3d5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}/{{invalid_assignmentId}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_009_Invalid_Baseurl",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d709e4e1-dfc0-4b19-96ba-e25225455b49",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/html;charset=utf-8');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7df8c451-296c-44ce-9567-8a7cccf735bc",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{invalid_baseURL}}/{{Assgn_endpoint_1}}/{{Assign_assignmentId}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_010_Invalid_Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d350e0aa-df2e-4cf1-abba-30bd13478988",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b7e27b48-3ff0-4aee-bdf0-876d66a0bce3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}/{{Assign_assignmentId}}"
							},
							"response": []
						}
					],
					"id": "fb0a38c6-314c-43a7-8278-97b59756f38b"
				},
				{
					"name": "GET_Assignment_for_Batch",
					"item": [
						{
							"name": "Assignment_TC_011_Valid_Inputs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dcf365e1-91b2-42ac-8fb9-74ea6ea9017e",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validating the data type of the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data type of the response body\",() => {\r",
											"    pm.expect(jsonData[0].assignmentDescription).to.be.a(\"string\");\r",
											"    pm.expect(jsonData[0].assignmentId).to.be.a(\"number\");\r",
											"    pm.expect(jsonData[0].assignmentName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData[0].batchId).to.be.a(\"number\");\r",
											"    pm.expect(jsonData[0].comments).to.be.a(\"string\");\r",
											"    pm.expect(jsonData[0].createdBy).to.be.a(\"string\");\r",
											"    pm.expect(jsonData[0].dueDate).to.be.a(\"string\");\r",
											"    pm.expect(jsonData[0].graderId).to.be.a(\"string\");\r",
											"    pm.expect(jsonData[0].pathAttachment1).to.be.a(\"string\");\r",
											"    pm.expect(jsonData[0].pathAttachment2).to.be.a(\"string\");\r",
											"    pm.expect(jsonData[0].pathAttachment3).to.be.a(\"string\");\r",
											"    pm.expect(jsonData[0].pathAttachment4).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the JSON schema\r",
											"var schema = \r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"assignmentId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"assignmentName\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"assignmentDescription\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"comments\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"dueDate\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"pathAttachment1\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"pathAttachment2\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"pathAttachment3\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"pathAttachment4\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"pathAttachment5\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"batchId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"createdBy\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"graderId\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"assignmentId\",\r",
											"        \"assignmentName\",\r",
											"        \"assignmentDescription\",\r",
											"        \"comments\",\r",
											"        \"dueDate\",\r",
											"        \"pathAttachment1\",\r",
											"        \"pathAttachment2\",\r",
											"        \"pathAttachment3\",\r",
											"        \"pathAttachment4\",\r",
											"        \"pathAttachment5\",\r",
											"        \"batchId\",\r",
											"        \"createdBy\",\r",
											"        \"graderId\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "8cf1ee22-bd54-4a3a-86f9-ac6dd6ae28df",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/{{Assgn_Endpoint_2}}/{{Assign_batchId}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_012_ValidID_ButNoAssignments",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f050ac1d-2ab9-4747-9681-1a6bdaaa0cd5",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.message).to.eql(\"Assignments not found with BatchId : 112 \");\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"    \r",
											"});\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "5ece3aa3-42f2-47b2-859a-44ff37ada109",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/{{Assgn_Endpoint_2}}/{{batchId_noassignments}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_013_Invalid_BatchID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f2f2106-9106-4704-b6a1-7d34808d51fd",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.message).to.eql(\"Batch not found with Id : 999999 \");\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"    \r",
											"});\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "cf17e0f5-f8a9-4d82-9b00-b64954482b7a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/{{Assgn_Endpoint_2}}/{{invalid_Assign_batchId}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_014_Invalid_Baseurl",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a2270319-7e7a-474c-99b2-3bda571ef1a5",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/html;charset=utf-8');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "fd1f8994-1310-4143-a235-7eb3f3f8b04f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{invalid_baseURL}}/{{Assgn_Endpoint_2}}/{{Assign_batchId}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_015_Invalid_Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cc0e6dfe-1863-427a-8651-4ca3842c686c",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "9dbf3d0b-3a38-4ef6-bb16-3d2ca9cd3ce9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": "{{baseURL}}/{{Assgn_Endpoint_2}}/{{Assign_batchId}}"
							},
							"response": []
						}
					],
					"id": "e8bf716c-0b61-4eeb-b136-24895bd1e079"
				},
				{
					"name": "POST_Create_Assignment",
					"item": [
						{
							"name": "Assignment_TC_016_Valid_Inputs",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e2bc1337-a81b-44bf-95c8-3c9105b080a4",
										"exec": [
											"const randno = Math.floor(Math.random()*10000+1);\r",
											"var randomstr = \"Jun23-PostwomenTechies-SDET-Selenium-\"+randno;\r",
											"\r",
											"pm.environment.set(\"Assign_assignmentDescription\",\"Cucumber Assignment\");\r",
											"pm.environment.set(\"Assign_assignmentName\",randomstr);\r",
											"pm.environment.set(\"Assign_batchId\",1);\r",
											"pm.environment.set(\"Assign_comments\",\"Created By Team18\");\r",
											"pm.environment.set(\"Assign_createdBy\",\"U22\");\r",
											"pm.environment.set(\"Assign_dueDate\",\"2023-06-29T13:14:42.450Z\");\r",
											"pm.environment.set(\"Assign_graderId\",\"U19\");\r",
											"pm.environment.set(\"Assign_pathAttachment1\",\"File1.json\");\r",
											"pm.environment.set(\"Assign_pathAttachment2\",\"File2.json\");\r",
											"pm.environment.set(\"Assign_pathAttachment3\",\"File3.json\");\r",
											"pm.environment.set(\"Assign_pathAttachment4\",\"File4.json\");\r",
											"pm.environment.set(\"Assign_pathAttachment5\",\"File5.json\");\r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5dc30570-5448-46a7-ad75-6c1bda6c367e",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status Code Name has String\",() => {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"var jsonResponse = pm.response.json();\r",
											"var id = jsonResponse.assignmentId;\r",
											"pm.environment.set(\"Assign_CreatedId\", id);\r",
											"console.log(id);\r",
											"\r",
											"//validating the JSON schema\r",
											"var schema = \r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"assignmentId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"assignmentName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"assignmentDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"comments\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"dueDate\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment1\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment2\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment3\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment4\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment5\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"createdBy\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"graderId\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"assignmentId\",\r",
											"    \"assignmentName\",\r",
											"    \"assignmentDescription\",\r",
											"    \"comments\",\r",
											"    \"dueDate\",\r",
											"    \"pathAttachment1\",\r",
											"    \"pathAttachment2\",\r",
											"    \"pathAttachment3\",\r",
											"    \"pathAttachment4\",\r",
											"    \"pathAttachment5\",\r",
											"    \"batchId\",\r",
											"    \"createdBy\",\r",
											"    \"graderId\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonResponse,schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//validating the data type of the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data type of the response body\",() => {\r",
											"    pm.expect(jsonData.assignmentDescription).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.assignmentId).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.assignmentName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.batchId).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.comments).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.createdBy).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.dueDate).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.graderId).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.pathAttachment1).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.pathAttachment2).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.pathAttachment3).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.pathAttachment4).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f5f7e009-8480-4a60-a37e-e82c591ec147",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"assignmentDescription\": \"{{Assign_assignmentDescription}}\",\r\n  \"assignmentId\": 0,\r\n  \"assignmentName\": \"{{Assign_assignmentName}}\",\r\n  \"batchId\": {{Assign_batchId}},\r\n  \"comments\": \"{{Assign_comments}}\",\r\n  \"createdBy\": \"{{Assign_createdBy}}\",\r\n  \"dueDate\": \"{{Assign_dueDate}}\",\r\n  \"graderId\": \"{{Assign_graderId}}\",\r\n  \"pathAttachment1\": \"{{Assign_pathAttachment1}}\",\r\n  \"pathAttachment2\": \"{{Assign_pathAttachment2}}\",\r\n  \"pathAttachment3\": \"{{Assign_pathAttachment3}}\",\r\n  \"pathAttachment4\": \"{{Assign_pathAttachment4}}\",\r\n  \"pathAttachment5\": \"{{Assign_pathAttachment5}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_017_Valid_Inputs_DataDriven_ExternalFile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "16263477-2826-4872-91b9-07ab32d4e528",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status Code Name has String\",() => {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"var jsonResponse = pm.response.json();\r",
											"var id = jsonResponse.assignmentId;\r",
											"pm.environment.set(\"Assign_CreatedId\", id);\r",
											"console.log(id);\r",
											"\r",
											"//validating the JSON schema\r",
											"var schema = \r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"assignmentId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"assignmentName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"assignmentDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"comments\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"dueDate\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment1\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment2\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment3\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment4\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment5\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"createdBy\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"graderId\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"assignmentId\",\r",
											"    \"assignmentName\",\r",
											"    \"assignmentDescription\",\r",
											"    \"comments\",\r",
											"    \"dueDate\",\r",
											"    \"pathAttachment1\",\r",
											"    \"pathAttachment2\",\r",
											"    \"pathAttachment3\",\r",
											"    \"pathAttachment4\",\r",
											"    \"pathAttachment5\",\r",
											"    \"batchId\",\r",
											"    \"createdBy\",\r",
											"    \"graderId\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonResponse,schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//validating the data type of the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data type of the response body\",() => {\r",
											"    pm.expect(jsonData.assignmentDescription).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.assignmentId).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.assignmentName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.batchId).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.comments).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.createdBy).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.dueDate).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.graderId).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.pathAttachment1).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.pathAttachment2).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.pathAttachment3).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.pathAttachment4).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "85135290-c3a7-48af-9aeb-df3d815bfa04",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"assignmentDescription\": \"{{Assign_assignmentDescription2}}\",\r\n  \"assignmentId\": 0,\r\n  \"assignmentName\": \"{{Assign_assignmentName2}}\",\r\n  \"batchId\": {{Assign_batchId2}},\r\n  \"comments\": \"{{Assign_comments2}}\",\r\n  \"createdBy\": \"{{Assign_createdBy2}}\",\r\n  \"dueDate\": \"{{Assign_dueDate2}}\",\r\n  \"graderId\": \"{{Assign_graderId2}}\",\r\n  \"pathAttachment1\": \"{{Assign_pathAttachment12}}\",\r\n  \"pathAttachment2\": \"{{Assign_pathAttachment22}}\",\r\n  \"pathAttachment3\": \"{{Assign_pathAttachment32}}\",\r\n  \"pathAttachment4\": \"{{Assign_pathAttachment42}}\",\r\n  \"pathAttachment5\": \"{{Assign_pathAttachment52}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_018_Null_AssignmentName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "68acb7ae-ceb4-4b05-a53e-917e180be5eb",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.message).to.eql(\"Assignment Name is mandatory\");\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "4f1d1054-7df6-4ffc-942d-0464fa7eb0d0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"assignmentDescription\": \"Cucumber Project\",\r\n  \"assignmentId\": 0,\r\n  \"assignmentName\": null,\r\n  \"batchId\": 1,\r\n  \"comments\": \"Day 01 Assignments\",\r\n  \"createdBy\": \"U22\",\r\n  \"dueDate\": \"2023-06-24T13:14:42.450Z\",\r\n  \"graderId\": \"U19\",\r\n  \"pathAttachment1\": \"File1\",\r\n  \"pathAttachment2\": \"File2\",\r\n  \"pathAttachment3\": \"File3\",\r\n  \"pathAttachment4\": \"File4\",\r\n  \"pathAttachment5\": \"File5\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_019_Without_AssignmentName_Field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a6bae056-3505-40db-8ddd-4a7d9d9dcd98",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.message).to.eql(\"Assignment Name is mandatory\");\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "beb23d67-9d94-453b-a6d6-bf0f4a806f38",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"assignmentDescription\": \"Selenium Assignment\",\r\n  \"assignmentId\": 0,\r\n  \"batchId\": 1,\r\n  \"comments\": \"Day 01 Assignments\",\r\n  \"createdBy\": \"U22\",\r\n  \"dueDate\": \"2023-06-24T13:14:42.450Z\",\r\n  \"graderId\": \"U19\",\r\n  \"pathAttachment1\": \"File1\",\r\n  \"pathAttachment2\": \"File2\",\r\n  \"pathAttachment3\": \"File3\",\r\n  \"pathAttachment4\": \"File4\",\r\n  \"pathAttachment5\": \"File5\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_020_Invalid_CreatedBy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cc2528eb-f9c5-4612-a67d-b831f38fb494",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400 or 404\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400,404]);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Bad Request/Not Found\", function () {\r",
											"    pm.expect(pm.response.status).to.be.oneOf([\"Bad Request\",\"Not Found\"]);\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "4cfcb305-c081-4764-b5de-b2a4d3c162e3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"assignmentDescription\": \"Selenium Assignment\",\r\n  \"assignmentId\": 0,\r\n  \"assignmentName\": \"Jun23-PostwomenTechies-SDET-Selenium-001\",\r\n  \"batchId\": 1,\r\n  \"comments\": \"Day 01 Assignments\",\r\n  \"createdBy\": \"123\",\r\n  \"dueDate\": \"2023-06-24T13:14:42.450Z\",\r\n  \"graderId\": \"U19\",\r\n  \"pathAttachment1\": \"File1\",\r\n  \"pathAttachment2\": \"File2\",\r\n  \"pathAttachment3\": \"File3\",\r\n  \"pathAttachment4\": \"File4\",\r\n  \"pathAttachment5\": \"File5\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_021_Without_CreatedBy_Field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "32784483-4916-4d72-99ba-ca9236709313",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.message).to.eql(\"Created By is mandatory\");\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d23508bb-e15a-4ea5-bf14-5ef5a76b1966",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"assignmentDescription\": \"Selenium Assignment\",\r\n  \"assignmentId\": 0,\r\n  \"assignmentName\": \"Jun23-PostwomenTechies-SDET-Selenium-001\",\r\n  \"batchId\": 1,\r\n  \"comments\": \"Day 01 Assignments\",\r\n  \"dueDate\": \"2023-06-24T13:14:42.450Z\",\r\n  \"graderId\": \"U19\",\r\n  \"pathAttachment1\": \"File1\",\r\n  \"pathAttachment2\": \"File2\",\r\n  \"pathAttachment3\": \"File3\",\r\n  \"pathAttachment4\": \"File4\",\r\n  \"pathAttachment5\": \"File5\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_022_Invalid_GraderId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2b598792-c3fd-410f-a334-e2973c026c34",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400 or 404\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400,404]);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Bad Request/Not Found\", function () {\r",
											"    pm.expect(pm.response.status).to.be.oneOf([\"Bad Request\",\"Not Found\"]);\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2d6ca3a4-f5a2-49a6-af82-905b066b9ef2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"assignmentDescription\": \"Selenium Assignment\",\r\n  \"assignmentId\": 0,\r\n  \"assignmentName\": \"Jun23-PostwomenTechies-SDET-Selenium-001\",\r\n  \"batchId\": 1,\r\n  \"comments\": \"Day 01 Assignments\",\r\n  \"createdBy\": \"U22\",\r\n  \"dueDate\": \"2023-06-24T13:14:42.450Z\",\r\n  \"graderId\": \"000\",\r\n  \"pathAttachment1\": \"File1\",\r\n  \"pathAttachment2\": \"File2\",\r\n  \"pathAttachment3\": \"File3\",\r\n  \"pathAttachment4\": \"File4\",\r\n  \"pathAttachment5\": \"File5\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_023_Without_GraderId_Field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "100a2cc1-ec4a-4d18-8362-400c452f45b6",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Bad request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.message).to.eql(\"Grader ID is mandatory\");\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "be0fbd01-4e64-4dba-9a04-a48a6f691596",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"assignmentDescription\": \"Selenium Assignment\",\r\n  \"assignmentId\": 0,\r\n  \"assignmentName\": \"Jun23-PostwomenTechies-SDET-Selenium-001\",\r\n  \"batchId\": 1,\r\n  \"comments\": \"Day 01 Assignments\",\r\n  \"createdBy\": \"U22\",\r\n  \"dueDate\": \"2023-06-24T13:14:42.450Z\",\r\n  \"pathAttachment1\": \"File1\",\r\n  \"pathAttachment2\": \"File2\",\r\n  \"pathAttachment3\": \"File3\",\r\n  \"pathAttachment4\": \"File4\",\r\n  \"pathAttachment5\": \"File5\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_024_Invalid_BatchId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "744ec2cb-c58f-4caf-8c31-e5562d508851",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//validating the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.status).to.eql(400);\r",
											"    pm.expect(jsonData.error).to.eql(\"Bad Request\");\r",
											"    \r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d03aa713-9aef-45a5-b285-78fa6143011b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"assignmentDescription\": \"Selenium Assignment\",\r\n  \"assignmentId\": 0,\r\n  \"assignmentName\": \"Jun23-PostwomenTechies-SDET-Selenium-001\",\r\n  \"batchId\": \"dd\",\r\n  \"comments\": \"Day 01 Assignments\",\r\n  \"createdBy\": \"U22\",\r\n  \"dueDate\": \"2023-06-24T13:14:42.450Z\",\r\n  \"graderId\": \"U19\",\r\n  \"pathAttachment1\": \"File1\",\r\n  \"pathAttachment2\": \"File2\",\r\n  \"pathAttachment3\": \"File3\",\r\n  \"pathAttachment4\": \"File4\",\r\n  \"pathAttachment5\": \"File5\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_025_Without_BatchId_Field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1fef9d6f-bb44-4665-b224-e946962cf3e5",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.message).to.eql(\"Batch ID is mandatory\");\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "39df4541-b7b4-4bf8-874b-8dc9d8fc5354",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"assignmentDescription\": \"Selenium Assignment\",\r\n  \"assignmentId\": 0,\r\n  \"assignmentName\": \"Jun23-PostwomenTechies-SDET-Selenium-001\",\r\n  \"comments\": \"Day 01 Assignments\",\r\n  \"createdBy\": \"U22\",\r\n  \"dueDate\": \"2023-06-24T13:14:42.450Z\",\r\n  \"graderId\": \"U19\",\r\n  \"pathAttachment1\": \"File1\",\r\n  \"pathAttachment2\": \"File2\",\r\n  \"pathAttachment3\": \"File3\",\r\n  \"pathAttachment4\": \"File4\",\r\n  \"pathAttachment5\": \"File5\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_026_Invalid_DueDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6eefabe-9050-4a49-9883-6dffeec5ac46",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//validating the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.status).to.eql(400);\r",
											"    pm.expect(jsonData.error).to.eql(\"Bad Request\");\r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "1381411d-cca4-4200-8885-cb6e752e14ea",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"assignmentDescription\": \"Selenium Assignment\",\r\n  \"assignmentId\": 0,\r\n  \"assignmentName\": \"Jun23-PostwomenTechies-SDET-Selenium-001\",\r\n  \"batchId\": 1,\r\n  \"comments\": \"Day 01 Assignments\",\r\n  \"createdBy\": \"U22\",\r\n  \"dueDate\": 09,\r\n  \"graderId\": \"U19\",\r\n  \"pathAttachment1\": \"File1\",\r\n  \"pathAttachment2\": \"File2\",\r\n  \"pathAttachment3\": \"File3\",\r\n  \"pathAttachment4\": \"File4\",\r\n  \"pathAttachment5\": \"File5\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_027_Without_DueDate_Field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d0a4681-da2d-4f9a-97a1-7ff0bc73e040",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.message).to.eql(\"Due Date is mandatory\");\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "cd454328-0c4e-4179-9b42-bb17c4604649",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"assignmentDescription\": \"Selenium Assignment\",\r\n  \"assignmentId\": 0,\r\n  \"assignmentName\": \"Jun23-PostwomenTechies-SDET-Selenium-001\",\r\n  \"batchId\": 1,\r\n  \"comments\": \"Day 01 Assignments\",\r\n  \"createdBy\": \"U22\",\r\n  \"graderId\": \"U19\",\r\n  \"pathAttachment1\": \"File1\",\r\n  \"pathAttachment2\": \"File2\",\r\n  \"pathAttachment3\": \"File3\",\r\n  \"pathAttachment4\": \"File4\",\r\n  \"pathAttachment5\": \"File5\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_028_Null_AssignmentDescription",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bcfe5d6b-23a8-4916-95af-e76962cfbe5a",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.message).to.eql(\"Assignment Description is mandatory\");\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "17e80585-6271-4eef-97f5-1c93e5df5ebf",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"assignmentDescription\": null,\r\n  \"assignmentId\": 0,\r\n  \"assignmentName\": \"Jun23-PostwomenTechies-SDET-Selenium-001\",\r\n  \"batchId\": 1,\r\n  \"comments\": \"Day 01 Assignments\",\r\n  \"createdBy\": \"U22\",\r\n  \"dueDate\": \"2023-06-24T13:14:42.450Z\",\r\n  \"graderId\": \"U19\",\r\n  \"pathAttachment1\": \"File1\",\r\n  \"pathAttachment2\": \"File2\",\r\n  \"pathAttachment3\": \"File3\",\r\n  \"pathAttachment4\": \"File4\",\r\n  \"pathAttachment5\": \"File5\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_029_Without_AssignmentDescription_Field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a8c9902d-e903-4cc4-87c6-c6d63e63f200",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.message).to.eql(\"Assignment Description is mandatory\");\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b5c8ab0f-9388-46bc-83df-b9dfdb683012",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"assignmentId\": 0,\r\n  \"assignmentName\": \"Jun23-PostwomenTechies-SDET-Selenium-001\",\r\n  \"batchId\": 1,\r\n  \"comments\": \"Day 01 Assignments\",\r\n  \"createdBy\": \"U22\",\r\n  \"dueDate\": \"2023-06-24T13:14:42.450Z\",\r\n  \"graderId\": \"U19\",\r\n  \"pathAttachment1\": \"File1\",\r\n  \"pathAttachment2\": \"File2\",\r\n  \"pathAttachment3\": \"File3\",\r\n  \"pathAttachment4\": \"File4\",\r\n  \"pathAttachment5\": \"File5\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}"
							},
							"response": []
						}
					],
					"id": "b38408b3-095c-4e5e-b38e-7a4aca7055b0"
				},
				{
					"name": "PUT_Update_Assignment",
					"item": [
						{
							"name": "Assignment_TC_030_Valid_Inputs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "159693c6-05d0-4cba-aecf-d0bb03b46974",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema = \r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"assignmentId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"assignmentName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"assignmentDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"comments\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"dueDate\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment1\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment2\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment3\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment4\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment5\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"createdBy\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"graderId\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"assignmentId\",\r",
											"    \"assignmentName\",\r",
											"    \"assignmentDescription\",\r",
											"    \"comments\",\r",
											"    \"dueDate\",\r",
											"    \"pathAttachment1\",\r",
											"    \"pathAttachment2\",\r",
											"    \"pathAttachment3\",\r",
											"    \"pathAttachment4\",\r",
											"    \"pathAttachment5\",\r",
											"    \"batchId\",\r",
											"    \"createdBy\",\r",
											"    \"graderId\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the data type of the response body\r",
											"pm.test(\"Validating the data type of the response body\",() => {\r",
											"    pm.expect(jsonData.assignmentDescription).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.assignmentId).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.assignmentName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.batchId).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.comments).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.createdBy).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.dueDate).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.graderId).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.pathAttachment1).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.pathAttachment2).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.pathAttachment3).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.pathAttachment4).to.be.a(\"string\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "8dca03e4-16df-4109-ab40-59189a09aca2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"assignmentName\": \"Jun23-PostwomenTechies-SDET-Selenium-150\",\r\n  \"assignmentDescription\": \"Selenium Assignment1\",\r\n  \"comments\": \"Created By Team18\",\r\n  \"dueDate\": \"2023-06-29T13:14:42.450+00:00\",\r\n  \"batchId\": 50,\r\n  \"createdBy\": \"U22\",\r\n  \"graderId\": \"U19\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}/{{Assign_Put_Id}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_031_Valid_Inputs_DataDrivern_ExternalFile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fc745cc2-9131-4f21-9e2f-3ecda9b941d5",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema = \r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"assignmentId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"assignmentName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"assignmentDescription\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"comments\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"dueDate\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment1\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment2\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment3\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment4\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"pathAttachment5\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"batchId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"createdBy\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"graderId\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"assignmentId\",\r",
											"    \"assignmentName\",\r",
											"    \"assignmentDescription\",\r",
											"    \"comments\",\r",
											"    \"dueDate\",\r",
											"    \"pathAttachment1\",\r",
											"    \"pathAttachment2\",\r",
											"    \"pathAttachment3\",\r",
											"    \"pathAttachment4\",\r",
											"    \"pathAttachment5\",\r",
											"    \"batchId\",\r",
											"    \"createdBy\",\r",
											"    \"graderId\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the data type of the response body\r",
											"pm.test(\"Validating the data type of the response body\",() => {\r",
											"    pm.expect(jsonData.assignmentDescription).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.assignmentId).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.assignmentName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.batchId).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.comments).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.createdBy).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.dueDate).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.graderId).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.pathAttachment1).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.pathAttachment2).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.pathAttachment3).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.pathAttachment4).to.be.a(\"string\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2d26ad5a-c59c-4680-8de9-7e01b177300c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"assignmentName\": \"{{Put_assignmentName}}\",\r\n  \"assignmentDescription\": \"{{Put_assignmentDescription}}\",\r\n  \"comments\": \"{{Put_comments}}\",\r\n  \"dueDate\": \"{{Put_dueDate}}\",\r\n  \"batchId\": {{Put_batchId}},\r\n  \"createdBy\": \"{{Put_createdBy}}\",\r\n  \"graderId\": \"{{Put_graderId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}/{{Assign_Put_Id}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_032_Without_RequestPayload",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "08f70125-28c0-483a-8eb4-6110a57e93af",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//validating the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.status).to.eql(400);\r",
											"    pm.expect(jsonData.error).to.eql(\"Bad Request\");\r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "87f42940-3523-4c9d-afc4-21ea6f01d22d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}/{{Assign_Put_Id}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_033_Null_AssignmentName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9b0f3f01-656c-4932-b089-5f5665b09277",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.message).to.eql(\"Assignment Name is mandatory\");\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "fb99c632-52bc-4bb7-90d2-a6b79d466fdd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"assignmentDescription\": \"Selenium Assignment\",\r\n  \"assignmentId\": 0,\r\n  \"assignmentName\": null,\r\n  \"batchId\": 1,\r\n  \"comments\": \"Day 02 Assignments\",\r\n  \"createdBy\": \"U22\",\r\n  \"dueDate\": \"2023-06-24T11:14:42.450Z\",\r\n  \"graderId\": \"U19\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}/{{Assign_Put_Id}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_034_Null_CreatedBy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd91ab3c-3ebf-4851-9863-636ed8aaa971",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.message).to.eql(\"Created By is mandatory\");\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a594e416-6764-4816-9de3-537353ba0d57",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"assignmentDescription\": \"Selenium Assignment\",\r\n  \"assignmentId\": 0,\r\n  \"assignmentName\": \"Jun23-PostwomenTechies-SDET-Selenium-001\",\r\n  \"batchId\": 1,\r\n  \"comments\": \"Day 02 Assignments\",\r\n  \"createdBy\": null,\r\n  \"dueDate\": \"2023-06-24T11:14:42.450Z\",\r\n  \"graderId\": \"U19\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}/{{Assign_Put_Id}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_035_Null_GraderId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "71d06ae6-3c73-4e7a-9370-3835467b71fa",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.message).to.eql(\"Grader ID is mandatory\");\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b6a7eba5-9d42-4f38-878f-2a57351df539",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"assignmentDescription\": \"Selenium Assignment\",\r\n  \"assignmentId\": 0,\r\n  \"assignmentName\": \"Jun23-PostwomenTechies-SDET-Selenium-001\",\r\n  \"batchId\": 1,\r\n  \"comments\": \"Day 02 Assignments\",\r\n  \"createdBy\": \"U22\",\r\n  \"dueDate\": \"2023-06-24T11:14:42.450Z\",\r\n  \"graderId\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}/{{Assign_Put_Id}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_036_Null_BatchId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6b0994ed-406d-49fd-ac93-936c7d8e32d5",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.message).to.eql(\"Batch ID is mandatory\");\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ed97ee70-7049-4404-a1ba-54c38e90f8df",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"assignmentDescription\": \"Selenium Assignment\",\r\n  \"assignmentId\": 0,\r\n  \"assignmentName\": \"Jun23-PostwomenTechies-SDET-Selenium-001\",\r\n  \"batchId\": null,\r\n  \"comments\": \"Day 02 Assignments\",\r\n  \"createdBy\": \"U22\",\r\n  \"dueDate\": \"2023-06-24T11:14:42.450Z\",\r\n  \"graderId\": \"U19\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}/{{Assign_Put_Id}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_037_Null_DueDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0c7cb8d4-f369-473d-846b-01a57ece8d6a",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.message).to.eql(\"Due Date is mandatory\");\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "0d5fa576-b7e3-45d2-b084-969afaf812ed",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"assignmentDescription\": \"Selenium Assignment\",\r\n  \"assignmentId\": 0,\r\n  \"assignmentName\": \"Jun23-PostwomenTechies-SDET-Selenium-001\",\r\n  \"batchId\": 1,\r\n  \"comments\": \"Day 02 Assignments\",\r\n  \"createdBy\": \"U22\",\r\n  \"dueDate\": null,\r\n  \"graderId\": \"U19\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}/{{Assign_Put_Id}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_038_Null_AssignmentDescription",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d5254f2b-a475-4a7a-8177-ce94754e23f5",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.message).to.eql(\"Assignment Description is mandatory\");\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "12470d23-7c9f-483a-a8f2-bb5286fa3e2d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"assignmentDescription\": null,\r\n  \"assignmentId\": 0,\r\n  \"assignmentName\": \"Jun23-PostwomenTechies-SDET-Selenium-001\",\r\n  \"batchId\": 1,\r\n  \"comments\": \"Day 02 Assignments\",\r\n  \"createdBy\": \"U22\",\r\n  \"dueDate\": \"2023-06-24T11:14:42.450Z\",\r\n  \"graderId\": \"U19\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}/{{Assign_Put_Id}}"
							},
							"response": []
						}
					],
					"id": "ea6bafe8-f3a7-42f5-b43b-5600beb65022"
				},
				{
					"name": "DELETE_with_ID",
					"item": [
						{
							"name": "Assignment_TC_039_Valid_Inputs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dab79936-b888-4e8e-b779-ede0c3333b9e",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.message).to.eql(\"Assignment deleted successfully\");\r",
											"    pm.expect(jsonData.success).to.eql(true);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e4999b53-d683-410b-877a-7671ac433f9b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}/{{Assign_CreatedId}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_040_Invalid_AssignmentId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "727d4a4f-aaa6-4663-9e94-7f1b10a36560",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.message).to.eql(\"Assignment not found with Id : 999999 \");\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"//validating the JSON schema\r",
											"var jsonData = pm.response.json();\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b772d234-34f5-48ac-9d03-96c44ae9f041",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}/{{invalid_assignmentId}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_041_Invalid_EndPoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e206b1b7-1d3d-4b4b-ad28-b2b263c8a2ee",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the data type of the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.status).to.eql(404);\r",
											"    pm.expect(jsonData.error).to.eql(\"Not Found\");\r",
											"    \r",
											"});\r",
											"\r",
											"//validating the JSON schema\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "37c64d08-373e-446c-9d0f-d6c7fb5e7e88",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{baseURL}}/{{invalid_endpoint_1}}/{{invalid_assignmentId}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_042_Null_AssignmentId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c97adf0-6d27-4a9f-b528-115b55ff5ee6",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Method Not Allowed\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//validating the data type of the response body\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validating the data of the response body\",() => {\r",
											"    pm.expect(jsonData.status).to.eql(405);\r",
											"    pm.expect(jsonData.error).to.eql(\"Method Not Allowed\");\r",
											"    \r",
											"});\r",
											"\r",
											"//validating the JSON schema\r",
											"var schema =\r",
											"{\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"timestamp\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"status\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"path\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"timestamp\",\r",
											"    \"status\",\r",
											"    \"error\",\r",
											"    \"path\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", function() {\r",
											"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d3f1c087-a3a7-4d1d-a4b9-9051062afcc5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{baseURL}}/{{Assgn_endpoint_1}}"
							},
							"response": []
						},
						{
							"name": "Assignment_TC_043_Invalid_Baseurl",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eb8fa9e1-0ad8-4d4d-ade7-d3006a26a7ca",
										"exec": [
											"//Validating the status code\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//validating the status message\r",
											"pm.test(\"Status code name is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//Validating header\r",
											"pm.test(\"Validating the Content-Type header is application/json\",() => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/html;charset=utf-8');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "305a5639-7df0-4c66-a619-743baa00254f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{invalid_baseURL}}/{{Assgn_endpoint_1}}/{{Assign_assignmentId}}"
							},
							"response": []
						}
					],
					"id": "23a2c8c7-05a5-4edf-b05e-2a434a416097"
				}
			],
			"id": "cc47accc-9311-4a65-979c-b971c30b4332"
		},
		{
			"name": "Assignment_Submit_Module",
			"item": [
				{
					"name": "Grades by StudentID invalid tc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1755bdeb-d446-44aa-969a-3f95c4d59dd3",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Status message is OK\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"    \r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"var schema = \r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"submissionId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"assignmentId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"userId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subDesc\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subComments\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach1\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach2\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach3\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach4\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach5\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subDateTime\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"gradedBy\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"gradedDateTime\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"grade\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"submissionId\",\r",
									"        \"assignmentId\",\r",
									"        \"userId\",\r",
									"        \"subDesc\",\r",
									"        \"subComments\",\r",
									"        \"subPathAttach1\",\r",
									"        \"subPathAttach2\",\r",
									"        \"subPathAttach3\",\r",
									"        \"subPathAttach4\",\r",
									"        \"subPathAttach5\",\r",
									"        \"subDateTime\",\r",
									"        \"gradedBy\",\r",
									"        \"gradedDateTime\",\r",
									"        \"grade\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Validate Schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema))\r",
									" })"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "eea9ea31-7512-4d72-a088-1fda448b5b6a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/assignmentsubmission/getGradesByStudentId/U"
					},
					"response": []
				},
				{
					"name": "Grades by StudentID valid tc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "de2a615a-f9a7-41d1-be79-479b96240b80",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Status message is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    \r",
									"});\r",
									"//validate Response body\r",
									"    pm.test(\"Validate Response body\", function() {\r",
									"         \r",
									"        pm.expect(jsonResponse.batchId, pm.environment.get(\"batchId\"));\r",
									"        pm.expect(jsonResponse.batchName,pm.environment.get(\"batchName\"));\r",
									"        pm.expect(jsonResponse.batchStatus,pm.environment.get(\"batchStatus\"));\r",
									"        pm.expect(jsonResponse.batchDescription, pm.environment.get(\"batchDescription\"));\r",
									"        pm.expect(jsonResponse.batchNoOfClasses, pm.environment.get(\"batchNoOfClasses\"));\r",
									"        pm.expect(jsonResponse.programId, pm.environment.get(\"programId\"));\r",
									"        pm.expect(jsonResponse.programName,pm.environment.get(\"programName\"));\r",
									"})\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"var schema = \r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"submissionId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"assignmentId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"userId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subDesc\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subComments\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach1\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach2\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach3\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach4\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach5\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subDateTime\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"gradedBy\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"gradedDateTime\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"grade\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"submissionId\",\r",
									"        \"assignmentId\",\r",
									"        \"userId\",\r",
									"        \"subDesc\",\r",
									"        \"subComments\",\r",
									"        \"subPathAttach1\",\r",
									"        \"subPathAttach2\",\r",
									"        \"subPathAttach3\",\r",
									"        \"subPathAttach4\",\r",
									"        \"subPathAttach5\",\r",
									"        \"subDateTime\",\r",
									"        \"gradedBy\",\r",
									"        \"gradedDateTime\",\r",
									"        \"grade\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Validate Schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema))\r",
									" })"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6f34f120-1eec-4b80-a154-736b9866e04e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/assignmentsubmission/getGradesByStudentId/U22"
					},
					"response": []
				},
				{
					"name": "All Submission",
					"id": "a6d9bcf8-b883-470f-9aaa-3925b49f3d61",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/assignmentsubmission"
					},
					"response": []
				},
				{
					"name": "Resubmit Assignment valid tc",
					"id": "91f5d7f7-0f61-40ed-98fd-3fa76ae9e4a8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \r\n        \"assignmentId\": 13,\r\n        \"userId\": \"U92\",\r\n        \"subDesc\": \"team 22\",\r\n        \"subComments\": \"team22 testing post request\",\r\n        \"subPathAttach1\": \"team 22\",\r\n        \"subPathAttach2\": \"team 22\",\r\n        \"subPathAttach3\": \"team 22\",\r\n        \"subPathAttach4\": \"team 22\",\r\n        \"subPathAttach5\": \"team 22\",\r\n        \"subDateTime\": \"06-26-2023 19:55:04\",\r\n        \"gradedBy\": null,\r\n        \"gradedDateTime\": null,\r\n        \"grade\": -1\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/assignmentsubmission/196"
					},
					"response": []
				},
				{
					"name": "Grade Assignment Submission valid tc",
					"id": "2f86f25d-daff-4d10-9e29-9f7eedcf9350",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"assignmentId\": 197,\r\n        \"userId\": \"U234\",\r\n        \"subDesc\": \"Assignment submission by U234\",\r\n        \"subComments\": \"submitted succesfully\",\r\n        \"subPathAttach1\": \"file1.json\",\r\n        \"subPathAttach2\": \"file2.json\",\r\n        \"subPathAttach3\": \"file3.json\",\r\n        \"subPathAttach4\": \"file4.json\",\r\n        \"subPathAttach5\": \"file5.json\",\r\n        \"subDateTime\": \"06-26-2023 20:48:47\",\r\n        \"gradedBy\": \"U1172\",\r\n        \"gradedDateTime\": null,\r\n        \"grade\": 2\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/assignmentsubmission/gradesubmission/211"
					},
					"response": []
				},
				{
					"name": "GET Grades by BatchID valid tc",
					"id": "3a5aa096-cc6f-46f5-b7a0-27233a19087f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/assignmentsubmission/grades/1"
					},
					"response": []
				},
				{
					"name": " https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/assignmentsubmission/studentbatch/abcd",
					"id": "aa97f5f8-983f-4ba7-b000-89d5d990ae29",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/assignmentsubmission/studentbatch/abcd"
					},
					"response": []
				},
				{
					"name": "GET Grades by BatchID invalid tc",
					"id": "303e3c33-4c83-4f04-bf37-5fe72a1fba82",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/assignmentsubmission/grades/0"
					},
					"response": []
				},
				{
					"name": "GET Submission by User ID valid tc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c3a958fb-e2df-428c-884c-aa1c986234a8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Status message is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    \r",
									"});\r",
									"\r",
									"\r",
									"//Get the response result\r",
									"var jsonResponse = pm.response.json();\r",
									"var schema = \r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"submissionId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"assignmentId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"userId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subDesc\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subComments\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach1\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach2\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach3\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach4\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subPathAttach5\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subDateTime\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"gradedBy\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"gradedDateTime\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"grade\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"submissionId\",\r",
									"        \"assignmentId\",\r",
									"        \"userId\",\r",
									"        \"subDesc\",\r",
									"        \"subComments\",\r",
									"        \"subPathAttach1\",\r",
									"        \"subPathAttach2\",\r",
									"        \"subPathAttach3\",\r",
									"        \"subPathAttach4\",\r",
									"        \"subPathAttach5\",\r",
									"        \"subDateTime\",\r",
									"        \"gradedBy\",\r",
									"        \"gradedDateTime\",\r",
									"        \"grade\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Validate Schema\", () => {\r",
									"  //using tv4 validatory library and validate method\r",
									" pm.expect(tv4.validate(jsonResponse,schema))\r",
									" })"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f35439ec-58bb-4097-a9f4-6fb182b7ca6d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/assignmentsubmission/student/U75"
					},
					"response": []
				},
				{
					"name": "GET Submission by User ID invalid tc",
					"id": "b827a2ec-b557-4d1f-bf90-4f335f5c01eb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/assignmentsubmission/student/U7"
					},
					"response": []
				},
				{
					"name": "Submission by batch ID valid tc",
					"id": "bf373f35-f48b-4d70-8864-4da44a00a86a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/assignmentsubmission/studentbatch/1"
					},
					"response": []
				},
				{
					"name": "GET Grades by Assignment ID invali endpoint",
					"id": "b2f4902e-e19f-4424-95dd-f2a3f12d5c33",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/assignmentsubmission/getGrades/1287\n"
					},
					"response": []
				},
				{
					"name": "DELETE Request valid tc",
					"id": "27fb3684-4671-490c-8f1d-c5d720985153",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/assignmentsubmission/384"
					},
					"response": []
				},
				{
					"name": "Delete Request invalid tc",
					"id": "05c62eb5-cc25-432a-88e8-e778f00ee089",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/assignmentsubmission/3"
					},
					"response": []
				},
				{
					"name": "Grade Assignment Submission invalid tc",
					"id": "b0f97732-8a61-4e68-bbc2-0dd082be433e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"assignmentId\": null,\r\n        \"userId\": \"null\",\r\n        \"subDesc\": \"null\",\r\n        \"subComments\": \"submitted succesfully\",\r\n        \"subPathAttach1\": \"file1.json\",\r\n        \"subPathAttach2\": \"file2.json\",\r\n        \"subPathAttach3\": \"file3.json\",\r\n        \"subPathAttach4\": \"file4.json\",\r\n        \"subPathAttach5\": \"file5.json\",\r\n        \"subDateTime\": \"06-26-2023 20:48:47\",\r\n        \"gradedBy\": \"U1172\",\r\n        \"gradedDateTime\": null,\r\n        \"grade\": 2\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms/assignmentsubmission/gradesubmission/21"
					},
					"response": []
				}
			],
			"id": "43ce9408-6808-4626-a790-514df62b97cf"
		}
	],
	"variable": [
		{
			"id": "0130b771-6752-45eb-ae5f-5479d595f7d3",
			"key": "Assign_CreatedId",
			"value": ""
		},
		{
			"id": "81821cf8-79d7-4ac7-ba27-595e0a9cf61b",
			"key": "userEndpoint",
			"value": "/users/users"
		},
		{
			"id": "2991d82d-c3b3-408c-a840-a1c00b224c04",
			"key": "{{saveprogram}}",
			"value": "saveprogram"
		}
	]
}